{"version":3,"sources":["logo.svg","Blockly/BlocklyComponent.jsx","Blockly/index.js","fields/BlocklyReactField.jsx","fields/DateField.jsx","blocks/customblocks.js","generator/generator.js","App.js","serviceWorker.js","index.js"],"names":["Blockly","setLocale","locale","BlocklyComponent","props","blocklyDiv","useRef","toolbox","primaryWorkspace","useEffect","initialXml","rest","children","current","inject","Xml","domToWorkspace","textToDom","Fragment","onClick","code","BlocklyJS","workspaceToCode","console","log","ref","id","style","display","Block","p","is","React","createElement","Value","Field","Shadow","BlocklyReactField","SERIALIZABLE","this","div_","getContentDiv","ReactDOM","render","border","sourceBlock_","colourTertiary","colourBorder","colourLight","setColour","getColour","showPositionedByField","dropdownDispose_","bind","unmountComponentAtNode","options","FieldRenderComponent","color","Component","register","ReactDateField","onDateSelected_","date","setValue","Date","hideIfOwner","value_","toLocaleDateString","fieldElement","textContent","selected","onChange","inline","reactDateField","init","jsonInit","setStyle","testReactField","block","getField","getText","App","className","src","logo","alt","readOnly","trashcan","media","move","scrollbars","drag","wheel","type","name","disabled","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13925e29.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Blockly React Component.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n import React from 'react';\n import './BlocklyComponent.css';\n import {useEffect, useRef} from 'react';\n\n import Blockly from 'blockly/core';\n import BlocklyJS from 'blockly/javascript';\n import locale from 'blockly/msg/en';\n import 'blockly/blocks';\n \n Blockly.setLocale(locale);\n \n function BlocklyComponent(props) {\n    const blocklyDiv = useRef();\n    const toolbox = useRef();\n    let primaryWorkspace = useRef();\n\n    const generateCode = () => {\n        var code = BlocklyJS.workspaceToCode(\n          primaryWorkspace.current\n        );\n        console.log(code);\n    }\n \n    useEffect(() => {\n        const { initialXml, children, ...rest } = props;\n            primaryWorkspace.current = Blockly.inject(\n                blocklyDiv.current,\n                {\n                    toolbox: toolbox.current,\n                    ...rest\n                },\n            );\n\n            if (initialXml) {\n                Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(initialXml), primaryWorkspace.current);\n            }\n    }, [primaryWorkspace, toolbox, blocklyDiv, props]);\n \n    return (\n    <React.Fragment>\n        <button onClick={generateCode}>Convert</button>\n        <div ref={blocklyDiv} id=\"blocklyDiv\" />\n        <div style={{ display: 'none' }} ref={toolbox}>\n            {props.children}\n        </div>\n    </React.Fragment>);\n}\n \nexport default BlocklyComponent;\n ","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview XML wrappers for block, category, value, field and shadow.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n import React from 'react';\nimport BlocklyComponent from './BlocklyComponent';\n\nexport default BlocklyComponent;\n\nconst Block = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"block\", props, children);\n};\n\nconst Category = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"category\", props, children);\n};\n\nconst Value = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"value\", props, children);\n};\n\nconst Field = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"field\", props, children);\n};\n\nconst Shadow = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"shadow\", props, children);\n};\n\nexport { Block, Category, Value, Field, Shadow }","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Sample React Blockly Field.\n * This shows you how to create a custom Blockly field that renders a React\n * component inside of the dropdown div when shown.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as Blockly from 'blockly/core';\n\n\nclass BlocklyReactField extends Blockly.Field {\n\n  SERIALIZABLE = true\n  \n  static fromJson(options) {\n    return new BlocklyReactField(options['text']);\n  }\n\n  showEditor_() {\n    this.div_ = Blockly.DropDownDiv.getContentDiv();\n    ReactDOM.render(this.render(),\n      this.div_);\n\n    var border = this.sourceBlock_.style.colourTertiary;\n    border = border.colourBorder || border.colourLight;\n    Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), border);\n\n    Blockly.DropDownDiv.showPositionedByField(\n      this, this.dropdownDispose_.bind(this));\n  }\n\n  dropdownDispose_() {\n    ReactDOM.unmountComponentAtNode(this.div_);\n  }\n\n  render() {\n    return <FieldRenderComponent />\n  }\n}\n\nclass FieldRenderComponent extends React.Component {\n\n  render() {\n    return <div style={{ color: '#fff' }}>\n      Hello from React!\n        </div>;\n  }\n}\n\nBlockly.fieldRegistry.register('field_react_component', BlocklyReactField);\n\nexport default BlocklyReactField;\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview React date field that uses the react-datepicker package.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from 'react';\nimport * as Blockly from 'blockly/core';\n\nimport BlocklyReactField from './BlocklyReactField';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nclass ReactDateField extends BlocklyReactField {\n\n  static fromJson(options) {\n    return new ReactDateField(new Date(options['date']));\n  }\n  \n  onDateSelected_ = (date) => {\n    this.setValue(new Date(date));\n    Blockly.DropDownDiv.hideIfOwner(this, true);\n  }\n\n  getText_() {\n    return this.value_.toLocaleDateString();\n  };\n\n  fromXml(fieldElement) {\n    this.setValue(new Date(fieldElement.textContent));\n  }\n\n  render() {\n    return <DatePicker\n        selected={this.value_}\n        onChange={this.onDateSelected_}\n        inline />\n  }\n}\n\nBlockly.fieldRegistry.register('field_react_date', ReactDateField);\n\nexport default ReactDateField;\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n\n\nimport * as Blockly from 'blockly/core';\n\n// Since we're using json to initialize the field, we'll need to import it.\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\n\nimport '@blockly/field-date';\n\nlet reactDateField = {\n        \"type\": \"test_react_date_field\",\n        \"message0\": \"date field: %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_date\",\n                \"name\": \"DATE\",\n                \"date\": \"2020-02-20\"\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n    };\n\nBlockly.Blocks['test_react_date_field'] = {\n  init: function() {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  }\n}\n\nvar testReactField = {\n  \"type\": \"test_react_field\",\n  \"message0\": \"custom field %1\",\n  \"args0\": [\n    {\n      \"type\": \"field_react_component\",\n      \"name\": \"FIELD\",\n      \"text\": \"Click me\"\n    },\n  ],\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n};\n\nBlockly.Blocks['test_react_field'] = {\n  init: function() {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  }\n};\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define generation methods for custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on generating code:\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\n\nimport * as Blockly from 'blockly/core';\nimport 'blockly/javascript';\n\nBlockly.JavaScript['test_react_field'] = function (block) {\n    return 'console.log(\\'custom block\\');\\n';\n};\n\nBlockly.JavaScript['test_react_date_field'] = function (block) {\n    return 'console.log(' + block.getField('DATE').getText() + ');\\n';\n};\n","/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Main React component that includes the Blockly component.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from 'react';\nimport './App.css';\n\nimport logo from './logo.svg';\n\nimport BlocklyComponent, { Block, Value, Field, Shadow } from './Blockly';\n\nimport './blocks/customblocks';\nimport './generator/generator';\n\nfunction App(props) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <BlocklyComponent readOnly={false} \n          trashcan={true} media={'media/'}\n          move={{\n            scrollbars: true,\n            drag: true,\n            wheel: true\n          }}\n          initialXml={`\n<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n<block type=\"controls_ifelse\" x=\"0\" y=\"0\"></block>\n</xml>\n      `}>\n            <Block type=\"test_react_field\" />\n            <Block type=\"test_react_date_field\" />\n            <Block type=\"controls_ifelse\" />\n            <Block type=\"logic_compare\" />\n            <Block type=\"logic_operation\" />\n            <Block type=\"controls_repeat_ext\">\n              <Value name=\"TIMES\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">10</Field>\n                </Shadow>\n              </Value>\n            </Block>\n            <Block type=\"logic_operation\" />\n            <Block type=\"logic_negate\" />\n            <Block type=\"logic_boolean\" />\n            <Block type=\"logic_null\" disabled=\"true\" />\n            <Block type=\"logic_ternary\" />\n            <Block type=\"text_charAt\">\n              <Value name=\"VALUE\">\n                <Block type=\"variables_get\">\n                  <Field name=\"VAR\">text</Field>\n                </Block>\n              </Value>\n            </Block>\n          </BlocklyComponent>\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
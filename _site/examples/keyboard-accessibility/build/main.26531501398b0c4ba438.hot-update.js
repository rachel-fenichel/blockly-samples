webpackHotUpdate("main",{

/***/ "./src/music.js":
/*!**********************!*\
  !*** ./src/music.js ***!
  \**********************/
/*! exports provided: Music */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Music\", function() { return Music; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _music_blocks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music_blocks */ \"./src/music_blocks.js\");\n/* harmony import */ var _music_block_generators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music_block_generators */ \"./src/music_block_generators.js\");\n/* harmony import */ var js_interpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js-interpreter */ \"./node_modules/js-interpreter/lib/js-interpreter.js\");\n/* harmony import */ var js_interpreter__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(js_interpreter__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _note_player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note_player */ \"./src/note_player.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Game logic for music game.\n */\n\n\n\n\n\n/**\n * Constant denoting a rest.\n */\n\nvar REST = 'REST';\n/**\n * Class representing transcript of notes played.\n */\n\nvar Transcript = /*#__PURE__*/function () {\n  /**\n   * Class for holding transcript of notes that were played. Expects\n   * notesAndRests and durations to have a matching length.\n   * @param {Array<string>} notesAndRests The notes and rests.\n   * @param {Array<number>} durations The durations of the notes and rests.\n   */\n  function Transcript() {\n    var notesAndRests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var durations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Transcript);\n\n    if (notesAndRests.length !== durations.length) {\n      console.error('Transcript length mismatch.');\n    }\n\n    this.notesAndRests = [];\n    this.durations = [];\n    this.size = 0;\n    this.readableText_ = '';\n\n    for (var i = 0; i < notesAndRests.length; i++) {\n      this.appendNote(notesAndRests[i], durations[i]);\n    }\n  }\n  /**\n   * Converts duration number into approriate string.\n   * @param {number} duration The duration.\n   * @return {string} The string version of duration.\n   * @private\n   */\n\n\n  _createClass(Transcript, [{\n    key: \"appendReadableText_\",\n\n    /**\n     * Internal method for appending text to transcript text.\n     * @param {string} text The text to append.\n     * @private\n     */\n    value: function appendReadableText_(text) {\n      if (this.readableText_) {\n        this.readableText_ += ', ';\n      } else {\n        text = text.charAt(0).toUpperCase() + text.slice(1);\n      }\n\n      this.readableText_ += text;\n    }\n    /**\n     * Returns sentence representing the notes played in this transcript.\n     * @return {string} The sentence.\n     */\n\n  }, {\n    key: \"getReadableText\",\n    value: function getReadableText() {\n      if (!this.readableText_) {\n        return 'Empty.';\n      }\n\n      var items = this.readableText_.split(',');\n\n      if (items.length > 1) {\n        items[items.length - 1] = ' and ' + items[items.length - 1];\n      }\n\n      return items.join(',') + '.';\n    }\n    /**\n     * Appends note to transcript.\n     * @param {string} note The pitch of note to append.\n     * @param {number} duration The duration of the note.\n     */\n\n  }, {\n    key: \"appendNote\",\n    value: function appendNote(note, duration) {\n      this.notesAndRests.push(note);\n      this.durations.push(duration);\n      this.appendReadableText_(\"play \".concat(Transcript.getDurationText_(duration), \" note \").concat(note));\n      this.size++;\n    }\n    /**\n     * Appends rest to transcript.\n     * @param {number} duration The duration of the rest.\n     */\n\n  }, {\n    key: \"appendRest\",\n    value: function appendRest(duration) {\n      this.notesAndRests.push(REST);\n      this.durations.push(duration);\n      this.appendReadableText_(\"\".concat(Transcript.getDurationText_(duration), \" rest\"));\n      this.size++;\n    }\n  }], [{\n    key: \"getDurationText_\",\n    value: function getDurationText_(duration) {\n      var durationText = 'unknown';\n\n      switch (duration) {\n        case 1:\n          durationText = 'whole';\n          break;\n\n        case 0.5:\n          durationText = 'half';\n          break;\n\n        case 0.25:\n          durationText = 'quarter';\n          break;\n\n        case 0.125:\n          durationText = 'eight';\n          break;\n      }\n\n      return durationText;\n    }\n  }]);\n\n  return Transcript;\n}();\n/**\n * Class representing musical stave.\n */\n\n\nvar Stave = /*#__PURE__*/function () {\n  /**\n   * Class holding code for music to play.\n   * @param {number} id The unique id of this stave.\n   * @param {Array<Interpreter.State>} stateStack The stateStack containing code\n   *    for this stave.\n   */\n  function Stave(id, stateStack) {\n    _classCallCheck(this, Stave);\n\n    /**\n     * The id.\n     * @type {number}\n     */\n    this.id = id;\n    /**\n     * The state stack.\n     * @type {Array<Interpreter.State>}\n     */\n\n    this.stateStack = stateStack;\n    /**\n     * Whether all the notes have ben played.\n     * @type {boolean}\n     */\n\n    this.done = false;\n    /**\n     * The time to pause till.\n     * @type {number}\n     * @private\n     */\n\n    this.pauseUntil64ths_ = 0;\n    /**\n     * The transcript of notes played.\n     * @type {Transcript}\n     * @private\n     */\n\n    this.transcript_ = new Transcript();\n    /**\n     * Currently playing note.\n     * @type {string}\n     * @private\n     */\n\n    this.note_ = '';\n  }\n  /**\n   * Whether this stave is currently paused.\n   * @param {number} clock64ths Number of 1/64ths notes since the start.\n   * @return {boolean} Whether this stave is paused.\n   */\n\n\n  _createClass(Stave, [{\n    key: \"isPaused\",\n    value: function isPaused(clock64ths) {\n      return this.pauseUntil64ths_ > clock64ths;\n    }\n    /**\n     * Play one note.\n     * @param {number} duration Fraction of a whole note length to play.\n     * @param {string} pitch Note to play.\n     * @param {number} clock64ths Number of 1/64ths notes since the start.\n     */\n\n  }, {\n    key: \"play\",\n    value: function play(duration, pitch, clock64ths) {\n      this.stopSound();\n      this.note_ = pitch;\n      _note_player__WEBPACK_IMPORTED_MODULE_4__[\"notePlayer\"].triggerAttack(pitch);\n      this.pauseUntil64ths_ = duration * 64 + clock64ths; // Make a record of this note.\n\n      this.transcript_.appendNote(pitch, duration);\n    }\n    /**\n     * Wait one rest.\n     * @param {number} duration Fraction of a whole note length to rest.\n     * @param {number} clock64ths Number of 1/64ths notes since the start.\n     */\n\n  }, {\n    key: \"rest\",\n    value: function rest(duration, clock64ths) {\n      this.stopSound();\n      this.pauseUntil64ths_ = duration * 64 + clock64ths; // Make a record of this rest.\n\n      this.transcript_.appendRest(duration);\n    }\n    /**\n     * Stops currently playing note.\n     */\n\n  }, {\n    key: \"stopSound\",\n    value: function stopSound() {\n      if (this.note_) {\n        _note_player__WEBPACK_IMPORTED_MODULE_4__[\"notePlayer\"].triggerRelease();\n        this.note_ = '';\n      }\n    }\n    /**\n     * Returns feedback on what is different between the loaded transcript and the\n     * expected one, or empty string if they are equal.\n     * @param {Transcript} expectedTranscript The expected transcript.\n     * @return {string} The feedback.\n     */\n\n  }, {\n    key: \"getFeedback\",\n    value: function getFeedback(expectedTranscript) {\n      var feedback = ''; // There could be extra or missing notes.\n\n      var actualSize = this.transcript_.size;\n      var expectedSize = expectedTranscript.size;\n      var sizeMismatch = actualSize !== expectedSize;\n\n      if (actualSize < expectedSize) {\n        feedback += 'Your solution is missing notes.\\n';\n      } else if (actualSize > expectedSize) {\n        feedback += 'Your solution has extra notes.\\n';\n      } // The notes played could be wrong (duration or note).\n\n\n      var hasIncorrectNotes = false;\n      var hasIncorrectDuration = false;\n\n      for (var i = 0; i < actualSize && i < expectedSize; i++) {\n        if (this.transcript_.notesAndRests[i] !== expectedTranscript.notesAndRests[i]) {\n          hasIncorrectNotes = true;\n        }\n\n        if (this.transcript_.durations[i] !== expectedTranscript.durations[i]) {\n          hasIncorrectDuration = true;\n        }\n      }\n\n      if (hasIncorrectNotes) {\n        feedback += \"Some of the notes \".concat(sizeMismatch ? 'may be' : 'are', \" incorrect.\\n\");\n      }\n\n      if (hasIncorrectDuration) {\n        feedback += \"Some of the note durations \" + \"\".concat(sizeMismatch ? 'may be' : 'are', \" incorrect.\\n\");\n      } // Append the actual and expected notes played.\n\n\n      if (sizeMismatch || hasIncorrectNotes || hasIncorrectDuration) {\n        feedback += \"\\nYour solution: \".concat(this.transcript_.getReadableText() || 'empty', \"\\n\");\n        feedback += \"Expected solution: \".concat(expectedTranscript.getReadableText());\n      }\n\n      return feedback;\n    }\n  }]);\n\n  return Stave;\n}();\n/**\n * Game logic for music game.\n */\n\n\nvar Music = /*#__PURE__*/function () {\n  /**\n   * Class for a music game.\n   * @param {Blockly.WorkspaceSvg} workspace The Blockly workspace.\n   * @param {function(string)} onGoalUpdateCb The callback function for goal\n   *    change.\n   * @param {function()} onSuccessCb The callback function for on success event.\n   * @param {function(string)} onFailureCb The callback function for on failure\n   *    event.\n   * @constructor\n   */\n  function Music(workspace, onGoalUpdateCb, onSuccessCb, onFailureCb) {\n    _classCallCheck(this, Music);\n\n    /**\n     * The Blockly workspace associated with this game.\n     * @type {!Blockly.WorkspaceSvg}\n     */\n    this.workspace = workspace;\n    /**\n     * The currently loaded level. 0 if no level loaded.\n     */\n\n    this.level = 0;\n    /**\n     * Callback function for goal update.\n     * @param {string} text The text to set the goal to.\n     */\n\n    this.onGoalUpdate = onGoalUpdateCb;\n    /**\n     * The expected answer.\n     * @type {Array<Transcript>}\n     * @private\n     */\n\n    this.expectedAnswer_ = [];\n    /**\n     * The interpreter.\n     * @type {?Interpreter}\n     * @private\n     */\n\n    this.interpreter_ = null;\n    /**\n     * @type {Array<Stave>}\n     * @private\n     */\n\n    this.staves_ = [];\n    /**\n     * The current active stave.\n     * @type {?Stave}\n     * @private\n     */\n\n    this.activeStave_ = null;\n    /**\n     * Time of start of execution.\n     * @type {number}\n     * @private\n     */\n\n    this.startTime_ = 0;\n    /**\n     * Number of 1/64ths notes since the start.\n     * @type {number}\n     * @private\n     */\n\n    this.clock64ths_ = 0;\n    /**\n     * The speed at which to play notes. Between 0 and 1, with 0 being slow,\n     * 0.5 being normal speed, and 1 being fast.\n     * @type {number}\n     * @private\n     */\n\n    this.speed_ = 0.5;\n    /**\n     * The id of the last setTimeout call. Used for game reset.\n     * @type {number}\n     * @private\n     */\n\n    this.pid_ = 0;\n    /**\n     * The callback function on level success.\n     * @type {function()}\n     * @private\n     */\n\n    this.onSuccessCallback_ = onSuccessCb;\n    /**\n     * The callback function on level failure.\n     * @type {function(string)}\n     * @param {string} feedback The level feedback.\n     * @private\n     */\n\n    this.onFailureCallback_ = onFailureCb;\n    this.registerPlayShortcut();\n  }\n  /**\n   * Registers a shortcut to play the notes on the workspace.\n   */\n\n\n  _createClass(Music, [{\n    key: \"registerPlayShortcut\",\n    value: function registerPlayShortcut() {\n      var newFunction = function () {\n        this.execute();\n      }.bind(this);\n      /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n\n\n      var playShortcut = {\n        name: 'playShortcut',\n        preconditionFn: function preconditionFn(workspace) {\n          return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n        },\n        callback: newFunction\n      };\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.register(playShortcut);\n      var shiftW = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.KeyCodes.P, [blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.KeyCodes.SHIFT]);\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.addKeyMapping(shiftW, playShortcut.name);\n    }\n    /**\n     * Clears the workspace and loads the specified blocks.\n     * @param {string} blockXml The xml text string of blocks.\n     */\n\n  }, {\n    key: \"loadWorkspaceBlocks\",\n    value: function loadWorkspaceBlocks(blockXml) {\n      this.workspace.clear();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.textToDom(blockXml), this.workspace);\n    }\n    /**\n     * Updates the currently loaded toolbox.\n     * @param {?Blockly.utils.toolbox.ToolboxDefinition} toolboxDef\n     *    DOM tree of toolbox contents, string of toolbox contents, or JSON\n     *    representing toolbox definition.\n     */\n\n  }, {\n    key: \"updateToolbox\",\n    value: function updateToolbox(toolboxDef) {\n      this.workspace.updateToolbox(toolboxDef);\n    }\n    /**\n     * Updates the goal based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"updateLevelGoal_\",\n    value: function updateLevelGoal_() {\n      var goalText = '';\n\n      switch (this.level) {\n        case 1:\n          this.expectedAnswer_ = [new Transcript(['C4', 'D4', 'E4', 'C4'], Array(4).fill(0.25))];\n          goalText = this.expectedAnswer_[0].getReadableText();\n          break;\n      }\n\n      this.onGoalUpdate(goalText);\n    }\n    /**\n     * Updates the toolbox based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"updateLevelToolbox_\",\n    value: function updateLevelToolbox_() {\n      var toolboxJson = {\n        'kind': 'flyoutToolbox',\n        'contents': [{\n          'kind': 'block',\n          'blockxml': \"<block type=\\\"music_note\\\">\\n                        <field name=\\\"DURATION\\\">0.25</field>\\n                        <value name=\\\"PITCH\\\">\\n                          <shadow type=\\\"music_pitch\\\">\\n                            <field name=\\\"PITCH\\\">C4</field>\\n                          </shadow>\\n                        </value>\\n                      </block>\"\n        }, {\n          'kind': 'block',\n          'type': 'music_rest'\n        }]\n      };\n      this.updateToolbox(toolboxJson);\n    }\n    /**\n     * Update the workspace blocks based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"loadLevelBlocks_\",\n    value: function loadLevelBlocks_() {\n      var levelXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"false\\\" x=\\\"180\\\"\\n            y=\\\"50\\\"></block>\\n          </xml>\";\n      this.loadWorkspaceBlocks(levelXml);\n    }\n    /**\n     * Load the specified level.\n     * @param {number|string} level The level to load.\n     */\n\n  }, {\n    key: \"loadLevel\",\n    value: function loadLevel(level) {\n      this.level = Number(level);\n      this.updateLevelGoal_();\n      this.updateLevelToolbox_();\n      this.loadLevelBlocks_();\n    }\n    /**\n     * Set the speed (Number between 0 and 1).\n     * @param {number} speed The speed to set to.\n     */\n\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed(speed) {\n      if (speed <= 0 || speed > 1) {\n        console.error('Invalid speed');\n        return;\n      }\n\n      this.speed_ = speed;\n      this.startTime_ = 0;\n    }\n    /**\n     * Generates code and logs it to the console.\n     */\n\n  }, {\n    key: \"logGeneratedCode\",\n    value: function logGeneratedCode() {\n      var codeJs = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.JavaScript.workspaceToCode(this.workspace);\n      console.log(codeJs);\n    }\n    /**\n     * Reset the music to the start position, clear the display, and kill any\n     * pending tasks.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Kill any task.\n      clearTimeout(this.pid_);\n      this.staves_.forEach(function (stave) {\n        stave.stopSound();\n      });\n      this.interpreter_ = null;\n      this.activeStave_ = null;\n      this.staves_.length = 0;\n      this.clock64ths_ = 0;\n      this.startTime_ = 0;\n    }\n    /**\n     * Plays music based on the blocks on the workspace.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var _this = this;\n\n      this.reset(); // Get generated code from workspace\n\n      var code = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.JavaScript.workspaceToCode(this.workspace); // Run user code.\n\n      this.interpreter_ = new js_interpreter__WEBPACK_IMPORTED_MODULE_3___default.a(code, this.interpreterInit_.bind(this)); // TODO add support for multiple threads.\n\n      var interpreter = new js_interpreter__WEBPACK_IMPORTED_MODULE_3___default.a(''); // Replace this thread's global scope with the cross-thread global.\n\n      interpreter.stateStack[0].scope = this.interpreter_.globalScope; // Add start call.\n\n      interpreter.appendCode('start();\\n');\n      this.staves_.push(new Stave(0, interpreter.stateStack));\n      this.pid_ = setTimeout(function () {\n        return _this.tick_();\n      }, 100);\n    }\n    /**\n     * Inject the Music API into a JavaScript interpreter.\n     * @param {!Interpreter} interpreter The JS-Interpreter.\n     * @param {!Interpreter.Object} globalObject Global object.\n     * @private\n     */\n\n  }, {\n    key: \"interpreterInit_\",\n    value: function interpreterInit_(interpreter, globalObject) {\n      var _this2 = this;\n\n      // API\n      var wrapper;\n\n      wrapper = function wrapper(duration, pitch, _id) {\n        _this2.play_(duration, pitch);\n      };\n\n      interpreter.setProperty(globalObject, 'play', interpreter.createNativeFunction(wrapper));\n\n      wrapper = function wrapper(duration, _id) {\n        _this2.rest_(duration);\n      };\n\n      interpreter.setProperty(globalObject, 'rest', interpreter.createNativeFunction(wrapper)); // TODO implement setInstrument API.\n    }\n    /**\n     * Play one note.\n     * @param {number} duration Fraction of a whole note length to play.\n     * @param {string} pitch Note play.\n     * @private\n     */\n\n  }, {\n    key: \"play_\",\n    value: function play_(duration, pitch) {\n      this.activeStave_.play(duration, pitch, this.clock64ths_);\n    }\n    /**\n     * Wait one rest.\n     * @param {number} duration Fraction of a whole note length to rest.\n     * @private\n     */\n\n  }, {\n    key: \"rest_\",\n    value: function rest_(duration) {\n      this.activeStave_.rest(duration, this.clock64ths_);\n    }\n    /**\n     * Execute a 1/64th tick of the program.\n     * @private\n     */\n\n  }, {\n    key: \"tick_\",\n    value: function tick_() {\n      var _this3 = this;\n\n      // Delay between start of each beat (1/64ths of a whole note).\n      // Reminder: The startTime_ should be reset after the slider is adjusted.\n      var scaleDuration = 1000 * (2.5 - 2 * this.speed_) / 64;\n\n      if (!this.startTime_) {\n        // Either the first tick, or first tick after slider was adjusted.\n        this.startTime_ = Date.now() - this.clock64ths_ * scaleDuration;\n      }\n\n      var done = true;\n      this.staves_.forEach(function (stave) {\n        if (!stave.done) {\n          done = false;\n\n          if (!stave.isPaused(_this3.clock64ths_)) {\n            _this3.executeChunk_(stave);\n          }\n        }\n      });\n\n      if (done) {\n        // Program complete.\n        var feedback = this.checkAnswer_();\n\n        if (feedback) {\n          this.onFailureCallback_(feedback);\n        } else {\n          this.onSuccessCallback_();\n        }\n      } else {\n        this.clock64ths_++;\n        var ms = this.startTime_ + this.clock64ths_ * scaleDuration - Date.now();\n        this.pid_ = setTimeout(function () {\n          return _this3.tick_();\n        }, ms);\n      }\n    }\n    /**\n     * Execute a bite-sized chunk of the user's code.\n     * @param {Stave} stave The stave to execute.\n     * @private\n     */\n\n  }, {\n    key: \"executeChunk_\",\n    value: function executeChunk_(stave) {\n      this.activeStave_ = stave; // Switch the interpreter to run the provided staff.\n\n      this.interpreter_.stateStack = stave.stateStack;\n      var ticks = 10000;\n      var go;\n\n      do {\n        try {\n          go = this.interpreter_.step();\n        } catch (e) {\n          // User error, terminate in shame.\n          alert(e);\n          go = false;\n        }\n\n        if (ticks-- == 0) {\n          console.warn('Staff ' + stave.id + ' is running slowly.');\n          return;\n        }\n\n        if (stave.isPaused(this.clock64ths_)) {\n          // Previously executed command (play or rest) requested a pause.\n          return;\n        }\n      } while (go); // Thread complete.  Wrap up.\n\n\n      stave.stopSound(stave);\n      stave.done = true;\n    }\n    /**\n     * Evaluates whether the answer for the currently loaded level is correct.\n     * Returns level feedback if correct or empty string if correct.\n     * @return {string} Level feedback or empty string.\n     * @private\n     */\n\n  }, {\n    key: \"checkAnswer_\",\n    value: function checkAnswer_() {\n      var feedback = '';\n\n      for (var i = 0; i < this.expectedAnswer_.length; i++) {\n        var staveFeedback = this.staves_[i].getFeedback(this.expectedAnswer_[i]);\n\n        if (staveFeedback) {\n          feedback += staveFeedback;\n        }\n      }\n\n      return feedback;\n    }\n  }]);\n\n  return Music;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/music.js\n");

/***/ }),

/***/ "./src/music_block_generators.js":
/*!***************************************!*\
  !*** ./src/music_block_generators.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var blockly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly */ \"./node_modules/blockly/dist/index.js\");\n/* harmony import */ var blockly__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview JavaScript generators for music blocks.\n */\n\n\nblockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"]['music_pitch'] = function (block) {\n  var code = blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].quote_(block.getFieldValue('PITCH'));\n  return [code, blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].ORDER_ATOMIC];\n};\n\nblockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"]['music_note'] = function (block) {\n  var pitch = blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].valueToCode(block, 'PITCH', blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].ORDER_NONE) || 'C4';\n  return 'play(' + Number(block.getFieldValue('DURATION')) + ', ' + pitch + ', \\'block_id_' + block.id + '\\');\\n';\n};\n\nblockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"]['music_rest_whole'] = function (block) {\n  return 'rest(1, \\'block_id_' + block.id + '\\');\\n';\n};\n\nblockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"]['music_rest'] = function (block) {\n  return 'rest(' + Number(block.getFieldValue('DURATION')) + ', \\'block_id_' + block.id + '\\');\\n';\n};\n\nblockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"]['music_instrument'] = function (block) {\n  var instrument = blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].quote_(block.getFieldValue('INSTRUMENT'));\n  return 'setInstrument(' + instrument + ', \\'block_id_' + block.id + '\\');\\n';\n};\n\nblockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"]['music_start'] = function (block) {\n  var statementsStack = blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].statementToCode(block, 'STACK');\n  var code = 'function start() {\\n' + statementsStack + '}\\n'; // Add % so as not to collide with helper functions in definitions list.\n\n  blockly__WEBPACK_IMPORTED_MODULE_0__[\"JavaScript\"].definitions_['%start'] = code;\n  return null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbXVzaWNfYmxvY2tfZ2VuZXJhdG9ycy5qcz8zZWM4Il0sIm5hbWVzIjpbIkJsb2NrbHkiLCJibG9jayIsImNvZGUiLCJxdW90ZV8iLCJnZXRGaWVsZFZhbHVlIiwiT1JERVJfQVRPTUlDIiwicGl0Y2giLCJ2YWx1ZVRvQ29kZSIsIk9SREVSX05PTkUiLCJOdW1iZXIiLCJpZCIsImluc3RydW1lbnQiLCJzdGF0ZW1lbnRzU3RhY2siLCJzdGF0ZW1lbnRUb0NvZGUiLCJkZWZpbml0aW9uc18iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUFBLGtEQUFBLENBQW1CLGFBQW5CLElBQW9DLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbEQsTUFBTUMsSUFBSSxHQUFHRixrREFBQSxDQUFtQkcsTUFBbkIsQ0FBMEJGLEtBQUssQ0FBQ0csYUFBTixDQUFvQixPQUFwQixDQUExQixDQUFiO0FBQ0EsU0FBTyxDQUFDRixJQUFELEVBQU9GLGtEQUFBLENBQW1CSyxZQUExQixDQUFQO0FBQ0QsQ0FIRDs7QUFLQUwsa0RBQUEsQ0FBbUIsWUFBbkIsSUFBbUMsVUFBU0MsS0FBVCxFQUFnQjtBQUNqRCxNQUFNSyxLQUFLLEdBQUdOLGtEQUFBLENBQW1CTyxXQUFuQixDQUErQk4sS0FBL0IsRUFBc0MsT0FBdEMsRUFDVkQsa0RBQUEsQ0FBbUJRLFVBRFQsS0FDd0IsSUFEdEM7QUFFQSxTQUFPLFVBQVVDLE1BQU0sQ0FBQ1IsS0FBSyxDQUFDRyxhQUFOLENBQW9CLFVBQXBCLENBQUQsQ0FBaEIsR0FBb0QsSUFBcEQsR0FBMkRFLEtBQTNELEdBQ0gsZUFERyxHQUNlTCxLQUFLLENBQUNTLEVBRHJCLEdBQzBCLFFBRGpDO0FBRUQsQ0FMRDs7QUFPQVYsa0RBQUEsQ0FBbUIsa0JBQW5CLElBQXlDLFVBQVNDLEtBQVQsRUFBZ0I7QUFDdkQsU0FBTyx3QkFBd0JBLEtBQUssQ0FBQ1MsRUFBOUIsR0FBbUMsUUFBMUM7QUFDRCxDQUZEOztBQUlBVixrREFBQSxDQUFtQixZQUFuQixJQUFtQyxVQUFTQyxLQUFULEVBQWdCO0FBQ2pELFNBQU8sVUFBVVEsTUFBTSxDQUFDUixLQUFLLENBQUNHLGFBQU4sQ0FBb0IsVUFBcEIsQ0FBRCxDQUFoQixHQUNILGVBREcsR0FDZUgsS0FBSyxDQUFDUyxFQURyQixHQUMwQixRQURqQztBQUVELENBSEQ7O0FBS0FWLGtEQUFBLENBQW1CLGtCQUFuQixJQUF5QyxVQUFTQyxLQUFULEVBQWdCO0FBQ3ZELE1BQU1VLFVBQVUsR0FDWlgsa0RBQUEsQ0FBbUJHLE1BQW5CLENBQTBCRixLQUFLLENBQUNHLGFBQU4sQ0FBb0IsWUFBcEIsQ0FBMUIsQ0FESjtBQUVBLFNBQU8sbUJBQW1CTyxVQUFuQixHQUFnQyxlQUFoQyxHQUFrRFYsS0FBSyxDQUFDUyxFQUF4RCxHQUE2RCxRQUFwRTtBQUNELENBSkQ7O0FBTUFWLGtEQUFBLENBQW1CLGFBQW5CLElBQW9DLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbEQsTUFBTVcsZUFBZSxHQUFHWixrREFBQSxDQUFtQmEsZUFBbkIsQ0FBbUNaLEtBQW5DLEVBQTBDLE9BQTFDLENBQXhCO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLHlCQUNYVSxlQURXLEdBQ08sS0FEcEIsQ0FGa0QsQ0FJbEQ7O0FBQ0FaLG9EQUFBLENBQW1CYyxZQUFuQixDQUFnQyxRQUFoQyxJQUE0Q1osSUFBNUM7QUFDQSxTQUFPLElBQVA7QUFDRCxDQVBEIiwiZmlsZSI6Ii4vc3JjL211c2ljX2Jsb2NrX2dlbmVyYXRvcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBKYXZhU2NyaXB0IGdlbmVyYXRvcnMgZm9yIG11c2ljIGJsb2Nrcy5cbiAqL1xuXG5pbXBvcnQgKiBhcyBCbG9ja2x5IGZyb20gJ2Jsb2NrbHknO1xuXG5CbG9ja2x5LkphdmFTY3JpcHRbJ211c2ljX3BpdGNoJ10gPSBmdW5jdGlvbihibG9jaykge1xuICBjb25zdCBjb2RlID0gQmxvY2tseS5KYXZhU2NyaXB0LnF1b3RlXyhibG9jay5nZXRGaWVsZFZhbHVlKCdQSVRDSCcpKTtcbiAgcmV0dXJuIFtjb2RlLCBCbG9ja2x5LkphdmFTY3JpcHQuT1JERVJfQVRPTUlDXTtcbn07XG5cbkJsb2NrbHkuSmF2YVNjcmlwdFsnbXVzaWNfbm90ZSddID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgY29uc3QgcGl0Y2ggPSBCbG9ja2x5LkphdmFTY3JpcHQudmFsdWVUb0NvZGUoYmxvY2ssICdQSVRDSCcsXG4gICAgICBCbG9ja2x5LkphdmFTY3JpcHQuT1JERVJfTk9ORSkgfHwgJ0M0JztcbiAgcmV0dXJuICdwbGF5KCcgKyBOdW1iZXIoYmxvY2suZ2V0RmllbGRWYWx1ZSgnRFVSQVRJT04nKSkgKyAnLCAnICsgcGl0Y2ggK1xuICAgICAgJywgXFwnYmxvY2tfaWRfJyArIGJsb2NrLmlkICsgJ1xcJyk7XFxuJztcbn07XG5cbkJsb2NrbHkuSmF2YVNjcmlwdFsnbXVzaWNfcmVzdF93aG9sZSddID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgcmV0dXJuICdyZXN0KDEsIFxcJ2Jsb2NrX2lkXycgKyBibG9jay5pZCArICdcXCcpO1xcbic7XG59O1xuXG5CbG9ja2x5LkphdmFTY3JpcHRbJ211c2ljX3Jlc3QnXSA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gIHJldHVybiAncmVzdCgnICsgTnVtYmVyKGJsb2NrLmdldEZpZWxkVmFsdWUoJ0RVUkFUSU9OJykpICtcbiAgICAgICcsIFxcJ2Jsb2NrX2lkXycgKyBibG9jay5pZCArICdcXCcpO1xcbic7XG59O1xuXG5CbG9ja2x5LkphdmFTY3JpcHRbJ211c2ljX2luc3RydW1lbnQnXSA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gIGNvbnN0IGluc3RydW1lbnQgPVxuICAgICAgQmxvY2tseS5KYXZhU2NyaXB0LnF1b3RlXyhibG9jay5nZXRGaWVsZFZhbHVlKCdJTlNUUlVNRU5UJykpO1xuICByZXR1cm4gJ3NldEluc3RydW1lbnQoJyArIGluc3RydW1lbnQgKyAnLCBcXCdibG9ja19pZF8nICsgYmxvY2suaWQgKyAnXFwnKTtcXG4nO1xufTtcblxuQmxvY2tseS5KYXZhU2NyaXB0WydtdXNpY19zdGFydCddID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgY29uc3Qgc3RhdGVtZW50c1N0YWNrID0gQmxvY2tseS5KYXZhU2NyaXB0LnN0YXRlbWVudFRvQ29kZShibG9jaywgJ1NUQUNLJyk7XG4gIGNvbnN0IGNvZGUgPSAnZnVuY3Rpb24gc3RhcnQoKSB7XFxuJyArXG4gICAgc3RhdGVtZW50c1N0YWNrICsgJ31cXG4nO1xuICAvLyBBZGQgJSBzbyBhcyBub3QgdG8gY29sbGlkZSB3aXRoIGhlbHBlciBmdW5jdGlvbnMgaW4gZGVmaW5pdGlvbnMgbGlzdC5cbiAgQmxvY2tseS5KYXZhU2NyaXB0LmRlZmluaXRpb25zX1snJXN0YXJ0J10gPSBjb2RlO1xuICByZXR1cm4gbnVsbDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/music_block_generators.js\n");

/***/ }),

/***/ "./src/music_blocks.js":
/*!*****************************!*\
  !*** ./src/music_blocks.js ***!
  \*****************************/
/*! exports provided: toolboxPitch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toolboxPitch\", function() { return toolboxPitch; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _field_pitch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./field_pitch */ \"./src/field_pitch.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Blocks for the accessible music demo.\n */\n\n\nvar mediaPrefix = 'https://raw.githubusercontent.com/google/blockly-games/master/appengine/';\n/* eslint-disable quotes */\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.defineBlocksWithJsonArray([{\n  \"type\": \"pitch_test\",\n  \"message0\": 'pitch test: %1',\n  \"args0\": [{\n    \"type\": \"field_pitch\",\n    \"name\": \"PITCH\"\n  }],\n  \"output\": null,\n  \"colour\": 160\n}, {\n  \"type\": \"music_pitch\",\n  \"message0\": \"%1\",\n  \"args0\": [{\n    \"type\": \"field_pitch\",\n    \"name\": \"PITCH\"\n  }],\n  \"output\": \"String\",\n  \"colourPrimary\": 160\n}, {\n  \"type\": \"music_note\",\n  \"message0\": 'play %1 note %2',\n  \"args0\": [{\n    \"type\": \"field_dropdown\",\n    \"name\": \"DURATION\",\n    \"options\": [[{\n      \"src\": mediaPrefix + \"music/note1.png\",\n      \"width\": 9,\n      \"height\": 19,\n      \"alt\": \"whole\"\n    }, \"1\"], [{\n      \"src\": mediaPrefix + \"music/note0.5.png\",\n      \"width\": 9,\n      \"height\": 19,\n      \"alt\": \"half\"\n    }, \"0.5\"], [{\n      \"src\": mediaPrefix + \"music/note0.25.png\",\n      \"width\": 9,\n      \"height\": 19,\n      \"alt\": \"quarter\"\n    }, \"0.25\"], [{\n      \"src\": mediaPrefix + \"music/note0.125.png\",\n      \"width\": 9,\n      \"height\": 19,\n      \"alt\": \"eighth\"\n    }, \"0.125\"], [{\n      \"src\": mediaPrefix + \"music/note0.0625.png\",\n      \"width\": 9,\n      \"height\": 19,\n      \"alt\": \"sixteenth\"\n    }, \"0.0625\"]]\n  }, {\n    \"type\": \"input_value\",\n    \"name\": \"PITCH\",\n    \"check\": \"String\"\n  }],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 160,\n  \"tooltip\": 'Music_playNoteTooltip'\n}, {\n  \"type\": \"music_rest_whole\",\n  \"message0\": 'rest %1',\n  \"args0\": [{\n    \"type\": \"field_image\",\n    \"src\": mediaPrefix + \"music/rest1.png\",\n    \"width\": 10,\n    \"height\": 20,\n    \"alt\": \"-\"\n  }],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 160,\n  \"tooltip\": 'Music_restWholeTooltip'\n}, {\n  \"type\": \"music_rest\",\n  \"message0\": 'rest %1',\n  \"args0\": [{\n    \"type\": \"field_dropdown\",\n    \"name\": \"DURATION\",\n    \"options\": [[{\n      \"src\": mediaPrefix + \"music/rest1.png\",\n      \"width\": 10,\n      \"height\": 20,\n      \"alt\": \"whole\"\n    }, \"1\"], [{\n      \"src\": mediaPrefix + \"music/rest0.5.png\",\n      \"width\": 10,\n      \"height\": 20,\n      \"alt\": \"half\"\n    }, \"0.5\"], [{\n      \"src\": mediaPrefix + \"music/rest0.25.png\",\n      \"width\": 10,\n      \"height\": 20,\n      \"alt\": \"quarter\"\n    }, \"0.25\"], [{\n      \"src\": mediaPrefix + \"music/rest0.125.png\",\n      \"width\": 10,\n      \"height\": 20,\n      \"alt\": \"eighth\"\n    }, \"0.125\"], [{\n      \"src\": mediaPrefix + \"music/rest0.0625.png\",\n      \"width\": 10,\n      \"height\": 20,\n      \"alt\": \"sixteenth\"\n    }, \"0.0625\"]]\n  }],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 160,\n  \"tooltip\": 'Music_restTooltip'\n}, {\n  \"type\": \"music_instrument\",\n  \"message0\": 'set instrument to %1',\n  \"args0\": [{\n    \"type\": \"field_dropdown\",\n    \"name\": \"INSTRUMENT\",\n    \"options\": [['Music_piano', \"piano\"], ['Music_trumpet', \"trumpet\"], ['Music_banjo', \"banjo\"], ['Music_violin', \"violin\"], ['Music_guitar', \"guitar\"], ['Music_flute', \"flute\"], ['Music_drum', \"drum\"], ['Music_choir', \"choir\"]]\n  }],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 160,\n  \"tooltip\": 'Music_setInstrumentTooltip'\n}, {\n  \"type\": \"music_start\",\n  \"message0\": 'when shift p pressed',\n  \"message1\": \"%1\",\n  \"args1\": [{\n    \"type\": \"input_statement\",\n    \"name\": \"STACK\"\n  }],\n  \"colour\": 0,\n  \"tooltip\": 'Music_startTooltip'\n}]);\nvar toolboxPitch = {\n  \"kind\": \"flyoutToolbox\",\n  \"contents\": [{\n    \"kind\": \"block\",\n    \"blockxml\": \"<block type='music_note'><value name='PITCH'>\" + \"<shadow type='music_pitch'></shadow></value></block>\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"pitch_test\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"music_pitch\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"music_note\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"music_rest_whole\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"music_rest\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"music_instrument\"\n  }, {\n    \"kind\": \"block\",\n    \"type\": \"music_start\"\n  }]\n};\n/* eslint-enable quotes *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/music_blocks.js\n");

/***/ }),

/***/ "./src/music_game_controller.js":
/*!**************************************!*\
  !*** ./src/music_game_controller.js ***!
  \**************************************/
/*! exports provided: MusicGameController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MusicGameController\", function() { return MusicGameController; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music */ \"./src/music.js\");\n/* harmony import */ var _help_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./help_modal */ \"./src/help_modal.js\");\n/* harmony import */ var _key_press_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./key_press_modal */ \"./src/key_press_modal.js\");\n/* harmony import */ var _welcome_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./welcome_modal */ \"./src/welcome_modal.js\");\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/* harmony import */ var _tutorial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tutorial */ \"./src/tutorial.js\");\n/* harmony import */ var _custom_cursor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./custom_cursor */ \"./src/custom_cursor.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Music game controller.\n */\n\n\n\n\n\n\n\n\n\n/**\n * Class for a controller for the music game, which handles\n * creation of the game and coordination of related modals, tutorials,\n * etc.\n */\n\nvar MusicGameController = /*#__PURE__*/function () {\n  /**\n   * The constructor for the music game controller.\n   */\n  function MusicGameController() {\n    var _this = this;\n\n    _classCallCheck(this, MusicGameController);\n\n    micromodal__WEBPACK_IMPORTED_MODULE_1__[\"default\"].init({\n      onClose: function onClose() {\n        return _speaker__WEBPACK_IMPORTED_MODULE_6__[\"speaker\"].cancel();\n      }\n    });\n    this.workspace = this.createWorkspace_();\n    /**\n     * The actual game object.\n     * @type {Music}\n     */\n\n    this.game = new _music__WEBPACK_IMPORTED_MODULE_2__[\"Music\"](this.workspace, function (text) {\n      return _this.setGoalText(text);\n    }, function () {\n      _this.setFeedbackText('Congratulations. You did it!');\n    }, function (feedback) {\n      _this.setFeedbackText(feedback);\n    });\n    var helpModal = new _help_modal__WEBPACK_IMPORTED_MODULE_3__[\"HelpModal\"]('modal-1', 'modalButton');\n    helpModal.init(); // Start by showing the key press modal.\n\n    new _key_press_modal__WEBPACK_IMPORTED_MODULE_4__[\"KeyPressModal\"](function () {\n      return _this.showWelcomeModal();\n    }).init();\n  }\n  /**\n   * Initializes the Blockly workspace.\n   * @return {!Blockly.WorkspaceSvg} The Blockly workspace.\n   * @private\n   */\n\n\n  _createClass(MusicGameController, [{\n    key: \"createWorkspace_\",\n    value: function createWorkspace_() {\n      // Initialize Blockly workspace.\n      var blocklyDiv = document.getElementById('blocklyDiv');\n      var workspace = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.inject(blocklyDiv, {\n        toolbox: {\n          'kind': 'flyoutToolbox',\n          'contents': [{\n            'kind': 'block',\n            'blockxml': \"<block type=\\\"music_note\\\">\\n                          <field name=\\\"DURATION\\\">0.25</field>\\n                          <value name=\\\"PITCH\\\">\\n                            <shadow type=\\\"music_pitch\\\">\\n                              <field name=\\\"PITCH\\\">C4</field>\\n                            </shadow>\\n                          </value>\\n                        </block>\"\n          }, {\n            'kind': 'block',\n            'type': 'music_rest'\n          }]\n        }\n      });\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = true;\n      workspace.getMarkerManager().setCursor(new _custom_cursor__WEBPACK_IMPORTED_MODULE_8__[\"CustomCursor\"]());\n      workspace.addChangeListener(function (event) {\n        return _speaker__WEBPACK_IMPORTED_MODULE_6__[\"speaker\"].nodeToSpeech(event);\n      });\n      workspace.getFlyout().getWorkspace().addChangeListener(function (event) {\n        return _speaker__WEBPACK_IMPORTED_MODULE_6__[\"speaker\"].nodeToSpeech(event);\n      });\n      return workspace;\n    }\n    /**\n     * Sets the feedback text.\n     * @param {string} text The text to set the feedback to.\n     */\n\n  }, {\n    key: \"setFeedbackText\",\n    value: function setFeedbackText(text) {\n      var feedbackTextEl = document.getElementById('feedbackText');\n      feedbackTextEl.innerHTML = text.replaceAll('\\n', '<br>');\n      _speaker__WEBPACK_IMPORTED_MODULE_6__[\"speaker\"].speak(text, true);\n    }\n    /**\n     * Sets the goal text.\n     * @param {string} text The text to set the goal to.\n     */\n\n  }, {\n    key: \"setGoalText\",\n    value: function setGoalText(text) {\n      var feedbackTextEl = document.getElementById('goalText');\n      feedbackTextEl.innerHTML = text;\n      _speaker__WEBPACK_IMPORTED_MODULE_6__[\"speaker\"].speak(text, true);\n    }\n    /**\n     * Get the current game object.\n     * @return {Music} The current game object.\n     */\n\n  }, {\n    key: \"getGame\",\n    value: function getGame() {\n      return this.game;\n    }\n    /**\n     * Start the tutorial.\n     */\n\n  }, {\n    key: \"runTutorial\",\n    value: function runTutorial() {\n      new _tutorial__WEBPACK_IMPORTED_MODULE_7__[\"Tutorial\"](this.workspace).init();\n    }\n    /**\n     * Start the Game.\n     */\n\n  }, {\n    key: \"runGame\",\n    value: function runGame() {\n      this.game.loadLevel(1);\n    }\n    /**\n     * Show the welcome modal.\n     */\n\n  }, {\n    key: \"showWelcomeModal\",\n    value: function showWelcomeModal() {\n      var _this2 = this;\n\n      new _welcome_modal__WEBPACK_IMPORTED_MODULE_5__[\"WelcomeModal\"](function () {\n        return _this2.runTutorial();\n      }, function () {\n        return _this2.runGame();\n      }).init();\n    }\n  }]);\n\n  return MusicGameController;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/music_game_controller.js\n");

/***/ }),

/***/ "./src/overrides.js":
/*!**************************!*\
  !*** ./src/overrides.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a line cursor.\n * A line cursor traverses the blocks as if they were\n * lines of code in a text editor.\n * Previous and next go up and down lines. In and out go\n * through the elements in a line.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n\n\n\n\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.handleEnterForWS_ = function (workspace) {\n  var cursor = workspace.getCursor();\n  var curNode = cursor.getCurNode();\n  var nodeType = curNode.getType();\n\n  if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD && curNode.getLocation().isClickable()) {\n    // TODO: Had to override so I could add this speaker in.\n    _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak('Use next and previous to read off your options.');\n\n    /** @type {!Blockly.Field} */\n    curNode.getLocation().showEditor();\n  } else if (curNode.isConnection() || nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.markAtCursor_();\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a block.');\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a stack.');\n  }\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.prototype.onBlocklyAction = function (action) {\n  var fieldNextOptions = 'To select this option hit enter';\n\n  if (this.menu_) {\n    switch (action.name) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.PREVIOUS:\n        this.menu_.highlightPrevious();\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(fieldNextOptions);\n        return true;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.NEXT:\n        this.menu_.highlightNext(); // TODO: Needed to override so that I could speak out the location when\n        // it changes.\n\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(fieldNextOptions);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  return blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.superClass_.onBlocklyAction.call(this, action);\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.prototype.toString = function (opt_maxLength, opt_emptyToken) {\n  var text = [];\n  var emptyFieldPlaceholder = opt_emptyToken || '?'; // Temporarily set flag to navigate to all fields.\n\n  var prevNavigateFields = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS;\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = true;\n  var node = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.createBlockNode(this);\n  var rootNode = node;\n  /**\n   * Whether or not to add parentheses around an input.\n   * @param {!Blockly.Connection} connection The connection.\n   * @return {boolean} True if we should add parentheses around the input.\n   */\n\n  function shouldAddParentheses(connection) {\n    var checks = connection.getCheck();\n\n    if (!checks && connection.targetConnection) {\n      checks = connection.targetConnection.getCheck();\n    }\n\n    return !!checks && (checks.indexOf('Boolean') != -1 || checks.indexOf('Number') != -1);\n  }\n  /**\n   * Check that we haven't circled back to the original root node.\n   */\n\n\n  function checkRoot() {\n    if (node && node.getType() == rootNode.getType() && node.getLocation() == rootNode.getLocation()) {\n      node = null;\n    }\n  }\n\n  var connection = null;\n  var field = null; // Traverse the AST building up our text string.\n\n  while (node) {\n    switch (node.getType()) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n        connection =\n        /** @type {!Blockly.Connection} */\n        node.getLocation();\n\n        if (!node.in()) {\n          text.push(emptyFieldPlaceholder);\n        } else if (shouldAddParentheses(connection)) {\n          text.push('(');\n        }\n\n        break;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n        field =\n        /** @type {Blockly.Field} */\n        node.getLocation();\n\n        if (field.name != blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.COLLAPSED_FIELD_NAME) {\n          text.push(field.getText());\n        }\n\n        break;\n    }\n\n    var current = node;\n    node = current.in() || current.next(); // TODO: This only works in our specific use case of having a block with a\n    // single statement connection.\n\n    if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && node.getLocation().type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n      node = null;\n    }\n\n    if (!node) {\n      // Can't go in or next, keep going out until we can go next.\n      node = current.out();\n      checkRoot();\n\n      while (node && !node.next()) {\n        node = node.out();\n        checkRoot(); // If we hit an input on the way up, possibly close out parentheses.\n\n        if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && shouldAddParentheses(\n        /** @type {!Blockly.Connection} */\n        node.getLocation())) {\n          text.push(')');\n        }\n      }\n\n      if (node) {\n        node = node.next();\n      }\n    }\n  } // Restore state of NAVIGATE_ALL_FIELDS.\n\n\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = prevNavigateFields; // Run through our text array and simplify expression to remove parentheses\n  // around single field blocks.\n\n  for (var i = 2, l = text.length; i < l; i++) {\n    if (text[i - 2] == '(' && text[i] == ')') {\n      text[i - 2] = text[i - 1];\n      text.splice(i - 1, 2);\n      l -= 2;\n    }\n  } // Join the text array, removing spaces around added paranthesis.\n\n\n  text = text.join(' ').replace(/(\\() | (\\))/gmi, '$1$2').trim() || '???';\n\n  if (opt_maxLength) {\n    // TODO: Improve truncation so that text from this block is given priority.\n    // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\n    // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\n    if (text.length > opt_maxLength) {\n      text = text.substring(0, opt_maxLength - 3) + '...';\n    }\n  }\n\n  return text;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/overrides.js\n");

/***/ }),

/***/ "./src/speaker.js":
/*!************************!*\
  !*** ./src/speaker.js ***!
  \************************/
/*! exports provided: Speaker, speaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Speaker\", function() { return Speaker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"speaker\", function() { return speaker; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Speaker used for speaking out text.\n */\n\n/**\n * Convenience methods for speaking out text.\n * More information on speakers can be found here:\n * https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis.\n */\n\nvar Speaker = /*#__PURE__*/function () {\n  /**\n   * Constructor for a speaker.\n   * @param {SpeakerMessages=} optMessages Optional messages for the speaker.\n   */\n  function Speaker(optMessages) {\n    _classCallCheck(this, Speaker);\n\n    var messages = {\n      'MAIN_WS': 'On the main workspace',\n      'STACK': 'To go to the last block in the previous group of blocks, press' + 'previous. To go to the first block in the stack hit next.',\n      'PREVIOUS': 'You are on a connection before, ',\n      'NEXT': 'On a connection after, ',\n      'OUTPUT': 'On an output connection. ',\n      'CONNECTION': 'At a connection point.',\n      'BLOCK': 'On a block of type',\n      'CLICKABLE_FIELD': 'To interact with the field hit enter.',\n      'EMPTY_TOKEN': 'blank',\n      'MARK_CONNECTION': 'To mark the block press enter. ',\n      'EXIT_EDIT_MODE': 'To exit edit mode hit escape. '\n    };\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.object.mixin(messages, optMessages);\n    this.setLocale(messages);\n    this.noOverrides = false;\n  }\n  /**\n   * The messages to be read out by a screen reader.\n   * @typedef {{\n   *     MAIN_WS: string,\n   *     STACK: string,\n   *     PREVIOUS: string,\n   *     NEXT: string,\n   *     OUTPUT: string,\n   *     CONNECTION: string,\n   *     BLOCK: string,\n   *     EMPTY_TOKEN: string,\n   *     MARK_CONNECTION: string,\n   * }} SpeakerMessages\n   */\n\n  /**\n   * Set the messages for the speaker.\n   * @param {!SpeakerMessages} messages The messages needed to create a speaker.\n   */\n\n\n  _createClass(Speaker, [{\n    key: \"setLocale\",\n    value: function setLocale(messages) {\n      Object.keys(messages).forEach(function (k) {\n        blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg[k] = messages[k];\n      });\n    }\n    /**\n     * Speaks out the text that was given to it.\n     * @param {string} text The text to speak out.\n     * @param {boolean=} shouldCancel True to stop the current utterance, false to\n     *     wait until the current utterance is done before speaking.\n     * @param {function=} onEnd The function to run after the text has been\n     *     spoken.\n     * @param {function=} onStart The function run when the text has begun to\n     *     be spoken.\n     * @public\n     */\n\n  }, {\n    key: \"speak\",\n    value: function speak(text, shouldCancel, onEnd, onStart) {\n      var audio = new SpeechSynthesisUtterance(text);\n\n      if (shouldCancel && !this.noOverrides && window.speechSynthesis.speaking) {\n        window.speechSynthesis.cancel();\n      }\n\n      if (onEnd) {\n        audio.onend = onEnd;\n      }\n\n      if (onStart) {\n        audio.onstart = onStart;\n      }\n\n      window.speechSynthesis.speak(audio);\n    }\n    /**\n     * Clears out the queue of text to speak.\n     * @public\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      window.speechSynthesis.cancel();\n    }\n    /**\n     * Pauses speaking.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      window.speechSynthesis.pause();\n    }\n    /**\n     * Resumes speaking.\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      window.speechSynthesis.resume();\n    }\n    /**\n     * Speaks out text if the event is of type marker or cursor move.\n     * @param {!Blockly.Events} event The event to speak out.\n     */\n\n  }, {\n    key: \"nodeToSpeech\",\n    value: function nodeToSpeech(event) {\n      // TODO: Update this if we link to the current version of blockly.\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Events.MARKER_MOVE) {\n        var nodeText = this.nodeToText_(event.newNode, event.oldNode, !event.isCursor);\n\n        if (!event.isCursor) {\n          nodeText = \"You have marked a location. To find a new block to connect\\n        to this location hit T. ! . To insert a block on the workspace,\\n        find the location of the block and hit I. \";\n        }\n\n        this.speak(nodeText, true);\n      }\n    }\n    /**\n     * Speaks out the text for a modal.\n     * @param {Element} modal The modal to collect the text to read out.\n     * @public\n     */\n\n  }, {\n    key: \"modalToText\",\n    value: function modalToText(modal) {\n      var header = modal.querySelector('header');\n      var headerText = header.textContent.trim();\n\n      if (headerText !== '') {\n        this.speak(headerText);\n      }\n\n      this.addButtonListeners_(header.querySelectorAll('button'));\n      var mainText = modal.querySelector('main').textContent.trim();\n\n      if (mainText !== '') {\n        this.speak(mainText);\n      }\n\n      var footerBtns = modal.querySelector('footer').querySelectorAll('button');\n      this.addButtonListeners_(footerBtns);\n    }\n    /**\n     * Adds listeners for when the button is focused.\n     * @param {!NodeList} btns The buttons to add listeners to.\n     * @private\n     */\n\n  }, {\n    key: \"addButtonListeners_\",\n    value: function addButtonListeners_(btns) {\n      var _this = this;\n\n      var _iterator = _createForOfIteratorHelper(btns),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var btn = _step.value;\n          btn.addEventListener('focus', function () {\n            _this.buttonToSpeech_(btns, btn, true);\n          });\n\n          if (document.activeElement === btn) {\n            _this.buttonToSpeech_(btns, btn, false);\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Speaks out information about a button.\n     * @param {NodeList} btns The list of buttons on the modal.\n     * @param {Element} btn The button.\n     * @param {boolean} shouldCancel True if this should cancel the previous\n     *     utterance.\n     * @private\n     */\n\n  }, {\n    key: \"buttonToSpeech_\",\n    value: function buttonToSpeech_(btns, btn, shouldCancel) {\n      this.speak('Hit enter to ', shouldCancel);\n\n      if (btn.textContent === '') {\n        this.speak(btn.getAttribute('aria-label'));\n      } else {\n        this.speak(btn.textContent);\n      }\n\n      if (btns.length > 0) {\n        this.speak('Hit tab to go to your next option');\n      }\n    }\n    /**\n     * Speaks out an audio representation of the given node.\n     * @param {Blockly.ASTNode} node The node to speak out.\n     * @param {Blockly.ASTNode} oldNode The previous node to speak out.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text representation of the node.\n     * @public\n     */\n\n  }, {\n    key: \"nodeToText_\",\n    value: function nodeToText_(node, oldNode, isMarker) {\n      var finalText = '';\n\n      switch (node.getType()) {\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n          finalText = this.fieldNodeToText_(node);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK:\n          finalText = this.blockNodeToText_(node);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n          finalText = this.inputNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.OUTPUT:\n          finalText = this.outputNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.NEXT:\n          finalText = this.nextNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.PREVIOUS:\n          finalText = this.previousNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK:\n          finalText = this.stackNodeToText_(node, oldNode);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE:\n          finalText = this.workspaceNodeToText_(node);\n          break;\n\n        default:\n          return node.toString();\n      }\n\n      finalText += this.getNextOptions_(node, oldNode, isMarker);\n      return finalText;\n    }\n    /**\n     * Gets text explaining the next options available for a user.\n     * @param {!Blockly.ASTNode} node The current node.\n     * @param {!Blockly.ASTNode} oldNode The previous node.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} Text explaining next options for the field.\n     * @private\n     */\n\n  }, {\n    key: \"getNextOptions_\",\n    value: function getNextOptions_(node, oldNode, isMarker) {\n      switch (node.getType()) {\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n          return this.getFieldOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK:\n          return this.getBlockOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.OUTPUT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.NEXT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.PREVIOUS:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK:\n          return this.getStackOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE:\n          return '';\n\n        default:\n          return node.toString();\n      }\n    }\n    /**\n     * Gets the next options for when a user is on a field.\n     * This is to open the field or to change locations.\n     * @param {!Blockly.ASTNode} node The field node.\n     * @return {string} The text explaining the next options when a user is on a\n     *     field.\n     * @private\n     */\n\n  }, {\n    key: \"getFieldOptions_\",\n    value: function getFieldOptions_(node) {\n      var field = node.getLocation();\n\n      if (field.isClickable()) {\n        return \"To interact with the field hit enter. Use the next or previous\\n      keys to change locations. \";\n      } else {\n        return 'Use the next or previous keys to change locations. ';\n      }\n    }\n    /**\n     * Gets the next options for when a user is on a block.\n     * @return {string} The text explaining the next options for a block.\n     * @private\n     */\n\n  }, {\n    key: \"getBlockOptions_\",\n    value: function getBlockOptions_() {\n      return \"Use the next or previous keys to change locations. \";\n    }\n    /**\n     * Gets the text for the connection point.\n     * @param {!Blockly.ASTNode} node The connection node.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} The text explaining the next options when a user is on a\n     *     connection.\n     * @private\n     */\n\n  }, {\n    key: \"getConnectionOptions_\",\n    value: function getConnectionOptions_(node, isMarker) {\n      var markerText = \". To mark this location, hit enter.\\n    To change locations use the next or previous keys\";\n      var finalText = '';\n\n      if (!isMarker) {\n        finalText += \"\".concat(markerText);\n      }\n\n      return finalText;\n    }\n    /**\n     * Gets the options for a user on a  stack of blocks.\n     * @param {Blockly.ASTNode} node The stack node.\n     * @return {string} The text explaining the next options when a user is on a\n     *     stack of blocks.\n     * @private\n     */\n\n  }, {\n    key: \"getStackOptions_\",\n    value: function getStackOptions_(node) {\n      var finalText = '';\n\n      if (node.prev()) {\n        finalText += \"To go to the last block in the previous group of blocks,\\n      press previous.\";\n      }\n\n      finalText += \" To go to the first block in the stack hit next.\";\n      return finalText;\n    }\n    /**\n     * Get the text for the source block of the node.\n     * @param {!Blockly.BlockSvg} srcBlock The block to get the text for.\n     * @param {string=} opt_emptyToken The optional empty token.\n     * @return {string} The text describing the source block of the node.\n     * @private\n     */\n\n  }, {\n    key: \"getBlockText_\",\n    value: function getBlockText_(srcBlock, opt_emptyToken) {\n      var emptyToken = opt_emptyToken || blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['EMPTY_TOKEN'];\n\n      if (srcBlock) {\n        if (srcBlock.statementInputCount > 0) {\n          emptyToken = ' do blank ';\n        }\n\n        return srcBlock.toString(null, emptyToken);\n      } else {\n        return '';\n      }\n    }\n    /**\n     * Creates text for a feild.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"fieldNodeToText_\",\n    value: function fieldNodeToText_(node) {\n      var field = node.getLocation();\n      return field.getText() + '. ';\n    }\n    /**\n     * Creates text for a feild.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"blockNodeToText_\",\n    value: function blockNodeToText_(node) {\n      var block =\n      /** @type{Blockly.BlockSvg} */\n      node.getLocation();\n      var blockText = this.getBlockText_(block);\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"You are on , \".concat(blockText, \". . \");\n      return finalText;\n    }\n    /**\n     * Creates text for an input.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"inputNodeToText_\",\n    value: function inputNodeToText_(node, isMarker) {\n      var inputConnection =\n      /** @type{Blockly.Input} */\n      node.getLocation();\n      var connectionText = \"You are on a connection\";\n      var finalText = '';\n\n      if (inputConnection.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n        var blockText = this.getBlockText_(node.getSourceBlock());\n        finalText = \"Inside \".concat(blockText, \". \").concat(connectionText, \". \");\n      } else if (inputConnection.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.INPUT_VALUE) {\n        var _blockText = this.getBlockText_(node.getSourceBlock(), ' ');\n\n        finalText = \"\".concat(connectionText, \" after \").concat(_blockText);\n      }\n\n      return finalText;\n    }\n    /**\n     * Creates text for a output connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"outputNodeToText_\",\n    value: function outputNodeToText_(node) {\n      var blockText = this.getBlockText_(node.getSourceBlock());\n      return \"You are on a connection for block, \".concat(blockText);\n    }\n    /**\n     * Creates text for a next connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"nextNodeToText_\",\n    value: function nextNodeToText_(node, isMarker) {\n      var block = node.getSourceBlock();\n      var blockText = this.getBlockText_(node.getSourceBlock());\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"\".concat(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['NEXT'], \" \").concat(blockText);\n      return finalText;\n    }\n    /**\n     * Creates text for a previous connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"previousNodeToText_\",\n    value: function previousNodeToText_(node, isMarker) {\n      var block = node.getSourceBlock();\n      var blockText = this.getBlockText_(block);\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"\".concat(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['PREVIOUS'], \" \").concat(blockText);\n      return finalText;\n    }\n    /**\n     * Creates text for a stack of blocks.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {!Blockly.ASTNode} oldNode The previous node.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"stackNodeToText_\",\n    value: function stackNodeToText_(node, oldNode) {\n      var srcBlock = node.getSourceBlock();\n      var newNodeTopBlock = srcBlock.getTopStackBlock();\n      var oldNodeTopBlock = null;\n\n      if (oldNode && oldNode.getSourceBlock()) {\n        oldNodeTopBlock = oldNode.getSourceBlock().getTopStackBlock();\n      }\n\n      var finalText = '';\n\n      if (srcBlock && srcBlock.workspace.isFlyout) {\n        finalText = this.getBlockText_(node.getSourceBlock());\n        finalText += \" . . To add this block to the workspace press Enter. .\\n      To go to the next block hit next. . To go back to the workspace\\n      hit escape. \";\n      } else if (srcBlock) {\n        if (oldNodeTopBlock !== newNodeTopBlock) {\n          finalText += \"You are on a new group of blocks. \";\n        } else {\n          finalText += \"You are on a group of blocks. \";\n        }\n      }\n\n      return finalText;\n    }\n    /**\n     * Creates text for a workspace.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"workspaceNodeToText_\",\n    value: function workspaceNodeToText_(node) {\n      var workspace =\n      /** @type{Blockly.WorkspaceSvg} */\n      node.getLocation(); // TODO: All text should be added to Blockly.Msg to allow for translation.\n\n      var text = null;\n\n      if (workspace.isFlyout) {\n        text = 'In the flyout, please select a block';\n      } else if (workspace.isMutator) {\n        text = 'In the mutator workspace, use this workspace to change a block';\n      } else {\n        text = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['MAIN_WS'];\n      }\n\n      return text;\n    }\n  }]);\n\n  return Speaker;\n}();\nvar speaker = new Speaker();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/speaker.js\n");

/***/ }),

/***/ "./src/tutorial.js":
/*!*************************!*\
  !*** ./src/tutorial.js ***!
  \*************************/
/*! exports provided: Tutorial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tutorial\", function() { return Tutorial; });\n/* harmony import */ var _tutorial_step__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tutorial_step */ \"./src/tutorial_step.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Multi-step tutorial using modals.\n */\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n/**\n * A multi-step tutorial for the accessible music game.\n */\n\nvar Tutorial = /*#__PURE__*/function () {\n  /**\n   * Class for a tutorial.\n   * @param {Blockly.WorkspaceSvg} workspace The workspace the user\n   *     will interact with.\n   * @constructor\n   */\n  function Tutorial(workspace) {\n    var _this = this;\n\n    _classCallCheck(this, Tutorial);\n\n    /**\n     * The id of the modal.\n     * @type {string}\n     */\n    this.modalId = 'tutorialModal';\n    /**\n     * The id of the tutorial text.\n     * @type {string}\n     */\n\n    this.stepTextId = this.modalId + 'Text';\n    /**\n     * The id of the next step button.\n     * @type {string}\n     */\n\n    this.stepButtonId = this.modalId + 'StepBtn';\n    /**\n     * The id of the hide modal button.\n     * @type {string}\n     */\n\n    this.hideButtonId = this.modalId + 'HideBtn';\n    /**\n     * An array of steps in the tutorial.\n     * @type {Array<!TutorialStep>}\n     */\n\n    this.steps = Tutorial.STEP_OBJECTS.map(function (obj) {\n      return new _tutorial_step__WEBPACK_IMPORTED_MODULE_0__[\"TutorialStep\"](obj.text, _this.stepTextId, _this.nextStep);\n    });\n    /**\n     * The index of the currently active step.\n     * @type {number}\n     */\n\n    this.curStepIndex = 0;\n    /**\n     * The currently active step.\n     * @type {TutorialStep}\n     */\n\n    this.curStep = this.steps[this.curStepIndex];\n    /**\n     * The Blockly workspace the user will interact with.\n     * @type {Blockly.WorkspaceSvg}\n     */\n\n    this.workspace = workspace;\n    /**\n     * The node that was selected on the workspace when the modal\n     * opened.\n     * @type {Blockly.ASTNode}\n     */\n\n    this.curNode = null;\n  }\n  /**\n   * Initialize DOM and show.\n   */\n\n\n  _createClass(Tutorial, [{\n    key: \"init\",\n    value: function init() {\n      this.createDom();\n      this.addCallbacks();\n      micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].show(this.modalId);\n      this.curStep.show();\n      this.registerPlayHelpText();\n      this.loadWorkspace();\n    }\n    /**\n     * Load the workspace for the tutorial.\n     */\n\n  }, {\n    key: \"loadWorkspace\",\n    value: function loadWorkspace() {\n      var toolboxJson = {\n        'kind': 'flyoutToolbox',\n        'contents': [{\n          'kind': 'block',\n          'blockxml': \"<block type=\\\"music_note\\\">\\n                        <field name=\\\"DURATION\\\">0.25</field>\\n                        <value name=\\\"PITCH\\\">\\n                          <shadow type=\\\"music_pitch\\\">\\n                            <field name=\\\"PITCH\\\">C4</field>\\n                          </shadow>\\n                        </value>\\n                      </block>\"\n        }, {\n          'kind': 'block',\n          'type': 'music_rest'\n        }]\n      };\n      this.workspace.updateToolbox(toolboxJson);\n      var starterXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"false\\\" x=\\\"180\\\"\\n            y=\\\"50\\\"></block>\\n          </xml>\";\n      this.workspace.clear();\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Xml.textToDom(starterXml), this.workspace);\n    }\n    /**\n     * Registers shortcut to replay the current tutorial step.\n     */\n\n  }, {\n    key: \"registerPlayHelpText\",\n    value: function registerPlayHelpText() {\n      var _this2 = this;\n\n      /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n      var playHelpText = {\n        name: 'playHelpText',\n        preconditionFn: function preconditionFn(workspace) {\n          return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n        },\n        callback: function callback() {\n          _speaker__WEBPACK_IMPORTED_MODULE_3__[\"speaker\"].speak(_this2.curStep.text, true);\n        }\n      };\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.register(playHelpText);\n      var shiftW = blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.utils.KeyCodes.H);\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.addKeyMapping(shiftW, playHelpText.name);\n    }\n    /**\n     * Display the next step, or end the tutorial if there are no more steps.\n     */\n\n  }, {\n    key: \"nextStep\",\n    value: function nextStep() {\n      this.curStepIndex++;\n\n      if (this.curStepIndex < this.steps.length) {\n        this.curStep = this.steps[this.curStepIndex];\n        micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].show(this.modalId);\n        this.curStep.show();\n        this.stashCursor();\n      } else {\n        this.done();\n      }\n    }\n    /**\n     * End the tutorial.\n     */\n\n  }, {\n    key: \"done\",\n    value: function done() {\n      micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].close(this.modalId);\n    }\n    /**\n     * Save the current cursor node and disable keyboard nav.\n     * Call this when opening the modal.\n     */\n\n  }, {\n    key: \"stashCursor\",\n    value: function stashCursor() {\n      this.curNode = this.workspace.getCursor().getCurNode();\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.navigation.disableKeyboardAccessibility();\n    }\n    /**\n     * Reenable keyboard nav and move the cursor to the previously\n     * selected cursor node. Call this when closing the modal.\n     */\n\n  }, {\n    key: \"popCursor\",\n    value: function popCursor() {\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.navigation.enableKeyboardAccessibility();\n\n      if (this.curNode) {\n        this.workspace.getCursor().setCurNode(this.curNode);\n        _speaker__WEBPACK_IMPORTED_MODULE_3__[\"speaker\"].cancel();\n      }\n    }\n    /**\n     * Add necessary handlers for any buttons on the modal.\n     */\n\n  }, {\n    key: \"addCallbacks\",\n    value: function addCallbacks() {\n      var _this3 = this;\n\n      document.getElementById(this.stepButtonId).addEventListener('click', function () {\n        _this3.nextStep();\n      });\n      document.getElementById(this.hideButtonId).addEventListener('click', function (e) {\n        micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].close(_this3.modalId);\n\n        _this3.popCursor();\n\n        Tutorial.STEP_OBJECTS[_this3.curStepIndex].onStart(_this3);\n\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n    /**\n     * Create the dom for the modal.\n     */\n\n  }, {\n    key: \"createDom\",\n    value: function createDom() {\n      document.getElementById(this.modalId).innerHTML = \"\\n     <div class=\\\"modal__overlay\\\" tabindex=\\\"-1\\\" data-micromodal-close>\\n      <div class=\\\"modal__container\\\" role=\\\"dialog\\\" aria-modal=\\\"true\\\"\\n        aria-labelledby=\\\"modal-1-title\\\">\\n        <header class=\\\"modal__header\\\">\\n          <button class=\\\"modal__close\\\" aria-label=\\\"Close modal\\\"\\n            id=\\\"tutorialCloseBtn\\\" data-micromodal-close></button>\\n        </header>\\n        <main class=\\\"modal__content\\\" id=\\\"modal-1-content\\\">\\n          <h2 class=\\\"modal__title\\\" id=\\\"\".concat(this.stepTextId, \"\\\"></h2>\\n        </main>\\n        <footer class=\\\"modal__footer\\\">\\n          <button class=\\\"modal__btn modal__btn-primary\\\" aria-label=\\\"Hide modal\\\"\\n            id=\\\"\").concat(this.hideButtonId, \"\\\">Hide modal</button>\\n          <button class=\\\"modal__btn modal__btn-primary\\\" aria-label=\\\"Next step\\\"\\n            id=\\\"\").concat(this.stepButtonId, \"\\\">Next step</button>\\n        </footer>\\n      </div>\\n    </div>\");\n    }\n    /**\n     * Get the current location, based on the event.\n     * @param {Blockly.Event} event An event to inspect for a cursor location.\n     * @return {Blockly.ASTNode} The current cursor location, or null if the event\n     *     didn't have one.\n     */\n\n  }, {\n    key: \"getCurrentLocation\",\n    value: function getCurrentLocation(event) {\n      var curNode = event.newNode;\n\n      if (curNode) {\n        return curNode.getLocation();\n      }\n\n      return null;\n    }\n  }]);\n\n  return Tutorial;\n}();\nTutorial.STEP_OBJECTS = [{\n  text: \"In this tutorial you will write code that plays musical notes. If at\\n      any point you are confused about what to do, press H to replay the goal\\n      for the current step. Press Enter to go to the next step.\",\n  goalText: \"Press Enter to go to the next step.\",\n  onStart: function onStart(tutorial) {\n    setTimeout(function () {\n      return tutorial.nextStep();\n    }, 100);\n  }\n}, {\n  text: \"You can move around the blocks of code with the up and down arrows.\\n    You will hear descriptions as you move around the blocks. .\\n    All blocks have connection points, which are places where you can add more\\n    code. . Use the down arrow to move to a connection point.\\n    Hit enter to begin. \",\n  goalText: \"Use the down arrow to move to a connection point.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Events.MARKER_MOVE) {\n        var curNode = event.newNode;\n        var correctLocation = workspace.getTopBlocks()[0].inputList[1].connection;\n\n        if (curNode) {\n          var location = curNode.getLocation();\n\n          if (location === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 4700);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You moved to a connection point. .\\n      To add more code, you first mark a location and then select the block you\\n      want to add. .\\n      Navigate to the connection point, then press enter to mark it.\",\n  goalText: \"Navigate to the connection point, then press enter to mark it.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Events.MARKER_MOVE) {\n        var currentLocation = tutorial.getCurrentLocation(event);\n\n        if (currentLocation && !event.isCursor) {\n          var correctLocation = workspace.getTopBlocks()[0].inputList[1].connection;\n\n          if (currentLocation === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 3000);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You marked a connection point. Now you can add more code\\n    blocks. .\\n    The toolbox is a list of code blocks that you can add to the workspace.\\n    You can always open the toolbox by pressing T. .\\n    Press T to open the toolbox, then use the up and down arrows to explore\\n    it. .\\n    Press ??? when you are ready for the next step.\",\n  goalText: \"Press T to open the toolbox, then use the up and down arrows to\\n      explore it. . Press ??? when you are ready for the next step.\",\n  onStart: function onStart(tutorial) {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    var finishStep = {\n      name: 'finishStep',\n      preconditionFn: function preconditionFn(workspace) {\n        return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n      },\n      callback: function callback() {\n        tutorial.nextStep();\n      }\n    };\n    blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.register(finishStep);\n    var shiftW = blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.utils.KeyCodes.F);\n    blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.addKeyMapping(shiftW, finishStep.name);\n  }\n}, {\n  text: \"Great! You have now successfully marked a connection point and\\n    navigated to a list of blocks that you can insert. .\\n    Now it\\u2019s time to put it all together. .\\n    Navigate to the connection and mark it, then press T to open the\\n    toolbox. Find the block that says \\u201Cplay whole note c4\\u201D and press\\n    enter to add it at the marked location.\",\n  goalText: \"Navigate to the connection and mark it, then press T to open the\\n    toolbox. Find the block that says \\u201Cplay whole note c4\\u201D and press\\n    enter to add it at the marked location.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Events.MARKER_MOVE) {\n        var currentLocation = tutorial.getCurrentLocation(event);\n\n        if (currentLocation && event.isCursor && workspace.getAllBlocks().length > 1) {\n          var correctLocation = workspace.getAllBlocks()[1].previousConnection;\n\n          if (currentLocation === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 4000);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You can now press Shift and P at the same time to run your\\n    code. You should hear a note play!\",\n  goalText: \"Press Shift and P at the same time to run your code.\",\n  onStart: function onStart(tutorial) {}\n}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/tutorial.js\n");

/***/ })

})
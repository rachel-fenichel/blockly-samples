webpackHotUpdate("main",{

/***/ "./src/line_cursor.js":
/*!****************************!*\
  !*** ./src/line_cursor.js ***!
  \****************************/
/*! exports provided: LineCursor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineCursor\", function() { return LineCursor; });\n/* harmony import */ var blockly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly */ \"./node_modules/blockly/dist/index.js\");\n/* harmony import */ var blockly__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a line cursor.\n * A line cursor traverses the blocks as if they were\n * lines of code in a text editor.\n * Previous and next go up and down lines. In and out go\n * through the elements in a line.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n/**\n * Class for a line cursor.\n * This will allow the user to get to all nodes in the AST by hitting next or\n * previous.\n * @constructor\n * @extends {Blockly.BasicCursor}\n */\n\nvar LineCursor = /*#__PURE__*/function (_Blockly$BasicCursor) {\n  _inherits(LineCursor, _Blockly$BasicCursor);\n\n  var _super = _createSuper(LineCursor);\n\n  /**\n   * Constructor for a line cursor.\n   */\n  function LineCursor() {\n    _classCallCheck(this, LineCursor);\n\n    return _super.call(this);\n  }\n  /**\n   * Find the next node in the pre order traversal.\n   * @return {Blockly.ASTNode} The next node, or null if the current node is\n   *     not set or there is no next value.\n   * @override\n   */\n\n\n  _createClass(LineCursor, [{\n    key: \"next\",\n    value: function next() {\n      var curNode = this.getCurNode();\n\n      if (!curNode) {\n        return null;\n      }\n\n      var newNode = this.getNextNode_(curNode, this.validLineNode_); // Skip the input or next value if there is a connected block.\n\n      if (newNode && (newNode.getType() == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.INPUT || newNode.getType() == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.NEXT) && newNode.getLocation().targetBlock()) {\n        newNode = this.getNextNode_(newNode, this.validLineNode_);\n      }\n\n      if (newNode) {\n        this.setCurNode(newNode);\n      }\n\n      return newNode;\n    }\n    /**\n     * Find the previous node in the pre order traversal.\n     * @return {Blockly.ASTNode} The previous node, or null if the current node\n     *     is not set or there is no previous value.\n     * @override\n     */\n\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      var curNode = this.getCurNode();\n\n      if (!curNode) {\n        return null;\n      }\n\n      var newNode = this.getPreviousNode_(curNode, this.validLineNode_);\n\n      if (newNode && (newNode.getType() == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.INPUT || newNode.getType() == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.NEXT) && newNode.getLocation().targetBlock()) {\n        newNode = this.getPreviousNode_(newNode, this.validLineNode_);\n      }\n\n      if (newNode) {\n        this.setCurNode(newNode);\n      }\n\n      return newNode;\n    }\n    /**\n     * For a basic cursor we only have the ability to go next and previous, so\n     * in will also allow the user to get to the next node in the pre order\n     * traversal.\n     * @return {Blockly.ASTNode} The next node, or null if the current node is\n     *     not set or there is no next value.\n     * @override\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in() {\n      var curNode = this.getCurNode();\n\n      if (!curNode) {\n        return null;\n      }\n\n      var newNode = this.getNextNode_(curNode, this.validInLineNode_);\n\n      if (newNode) {\n        this.setCurNode(newNode);\n      }\n\n      return newNode;\n    }\n    /**\n     * For a basic cursor we only have the ability to go next and previous, so\n     * out will allow the user to get to the previous node in the pre order\n     * traversal.\n     * @return {Blockly.ASTNode} The previous node, or null if the current\n     *     node is not set or there is no previous value.\n     * @override\n     */\n\n  }, {\n    key: \"out\",\n    value: function out() {\n      var curNode = this.getCurNode();\n\n      if (!curNode) {\n        return null;\n      }\n\n      var newNode = this.getPreviousNode_(curNode, this.validInLineNode_);\n\n      if (newNode) {\n        this.setCurNode(newNode);\n      }\n\n      return newNode;\n    }\n    /**\n     * Meant to traverse by lines of code. This is blocks, statement inputs and\n     * next connections.\n     * @param {Blockly.ASTNode} node The AST node to check whether it is valid.\n     * @return {boolean} True if the node should be visited, false otherwise.\n     * @private\n     */\n\n  }, {\n    key: \"validLineNode_\",\n    value: function validLineNode_(node) {\n      if (!node) {\n        return false;\n      }\n\n      var isValid = false;\n      var location = node.getLocation();\n      var type = node && node.getType();\n\n      if (type == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.PREVIOUS) {\n        isValid = true;\n      } else if (type == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.INPUT && location.type == blockly__WEBPACK_IMPORTED_MODULE_0__[\"NEXT_STATEMENT\"]) {\n        isValid = true;\n      } else if (type == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.NEXT) {\n        isValid = true;\n      } else if (type === blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.OUTPUT) {\n        if (!location.targetConnection) {\n          isValid = true;\n        }\n      }\n\n      return isValid;\n    }\n    /**\n     * Meant to traverse within a block. These are fields and input values.\n     * @param {Blockly.ASTNode} node The AST node to check whether it is valid.\n     * @return {boolean} True if the node should be visited, false otherwise.\n     * @private\n     */\n\n  }, {\n    key: \"validInLineNode_\",\n    value: function validInLineNode_(node) {\n      if (!node) {\n        return false;\n      }\n\n      var isValid = false;\n      var location = node.getLocation();\n      var type = node && node.getType();\n\n      if (type === blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.FIELD) {\n        isValid = true;\n      } else if (type === blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.INPUT && location.type === blockly__WEBPACK_IMPORTED_MODULE_0__[\"INPUT_VALUE\"]) {\n        isValid = true;\n      } else if (type == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.OUTPUT) {\n        isValid = true;\n      } else if (type == blockly__WEBPACK_IMPORTED_MODULE_0__[\"ASTNode\"].types.STACK) {\n        isValid = true;\n      }\n\n      return isValid;\n    }\n  }]);\n\n  return LineCursor;\n}(blockly__WEBPACK_IMPORTED_MODULE_0__[\"BasicCursor\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/line_cursor.js\n");

/***/ })

})
webpackHotUpdate("main",{

/***/ "./src/music.js":
/*!**********************!*\
  !*** ./src/music.js ***!
  \**********************/
/*! exports provided: Music */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Music\", function() { return Music; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/* harmony import */ var _music_blocks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music_blocks */ \"./src/music_blocks.js\");\n/* harmony import */ var _line_cursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./line_cursor */ \"./src/line_cursor.js\");\n/* harmony import */ var _music_block_generators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./music_block_generators */ \"./src/music_block_generators.js\");\n/* harmony import */ var js_interpreter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! js-interpreter */ \"./node_modules/js-interpreter/lib/js-interpreter.js\");\n/* harmony import */ var js_interpreter__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(js_interpreter__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _note_player__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./note_player */ \"./src/note_player.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Game logic for music game.\n */\n\n\n\n\n\n\n\n/**\n * Constant denoting a rest.\n */\n\nvar REST = 'REST';\n\nvar Stave = /*#__PURE__*/function () {\n  function Stave(id, stateStack) {\n    _classCallCheck(this, Stave);\n\n    /**\n     * The id.\n     * @type {number}\n     */\n    this.id = id;\n    /**\n     * The state stack.\n     * @type {Array<Interpreter.State>}\n     */\n\n    this.stateStack = stateStack;\n    /**\n     * Whether all the notes have ben played.\n     * @type {boolean}\n     */\n\n    this.done = false;\n    /**\n     * The time to pause till.\n     * @type {number}\n     * @private\n     */\n\n    this.pauseUntil64ths_ = 0;\n    /**\n     * The transcript of notes played.\n     * @type {Array<string|number>}\n     * @private\n     */\n\n    this.transcript_ = [];\n    /**\n     * Currently playing note.\n     * @type {string}\n     * @private\n     */\n\n    this.note_ = '';\n  }\n  /**\n   * Whether this stave is currently paused.\n   * @param {number} clock64ths Number of 1/64ths notes since the start.\n   * @return {boolean} Whether this stave is paused.\n   */\n\n\n  _createClass(Stave, [{\n    key: \"isPaused\",\n    value: function isPaused(clock64ths) {\n      return this.pauseUntil64ths_ > clock64ths;\n    }\n    /**\n     * Play one note.\n     * @param {number} duration Fraction of a whole note length to play.\n     * @param {string} pitch Note to play.\n     * @param {number} clock64ths Number of 1/64ths notes since the start.\n     */\n\n  }, {\n    key: \"play\",\n    value: function play(duration, pitch, clock64ths) {\n      this.stopSound();\n      this.note_ = pitch;\n      _note_player__WEBPACK_IMPORTED_MODULE_6__[\"notePlayer\"].triggerAttack(pitch);\n      this.pauseUntil64ths_ = duration * 64 + clock64ths; // Make a record of this note.\n\n      this.transcript_.push(pitch, duration);\n    }\n    /**\n     * Wait one rest.\n     * @param {number} duration Fraction of a whole note length to rest.\n     * @param {number} clock64ths Number of 1/64ths notes since the start.\n     */\n\n  }, {\n    key: \"rest\",\n    value: function rest(duration, clock64ths) {\n      this.stopSound();\n      this.pauseUntil64ths_ = duration * 64 + clock64ths; // Make a record of this rest.\n\n      var transcriptLen = this.transcript_.length;\n\n      if (transcriptLen > 1 && this.transcript_[transcriptLen - 2] === REST) {\n        // Concatenate this rest with previous one.\n        this.transcript_[transcriptLen - 1] += duration;\n      } else {\n        this.transcript_.push(REST, duration);\n      }\n    }\n    /**\n     * Stops currently playing note.\n     */\n\n  }, {\n    key: \"stopSound\",\n    value: function stopSound() {\n      if (this.note_) {\n        _note_player__WEBPACK_IMPORTED_MODULE_6__[\"notePlayer\"].triggerRelease();\n        this.note_ = '';\n      }\n    }\n    /**\n     * Returns whether the transcript matched expected.\n     * @param {Array<string|number>} expectedTranscript The expected transcript.\n     * @return {boolean} Whether the transcript matches.\n     */\n\n  }, {\n    key: \"checkTranscript\",\n    value: function checkTranscript(expectedTranscript) {\n      return JSON.stringify(expectedTranscript) === JSON.stringify(this.transcript_);\n    }\n  }]);\n\n  return Stave;\n}();\n/**\n * Game logic for music game.\n */\n\n\nvar Music = /*#__PURE__*/function () {\n  /**\n   * Class for a music game.\n   * @constructor\n   */\n  function Music() {\n    _classCallCheck(this, Music);\n\n    /**\n     * The Blockly workspace associated with this game.\n     * @type {!Blockly.WorkspaceSvg}\n     */\n    this.workspace = this.createWorkspace_();\n    /**\n     * The currently loaded level. 0 if no level loaded.\n     */\n\n    this.level = 0;\n    /**\n     * The HTML element containing the goal text for the game.\n     * @type {HTMLElement}\n     * @private\n     */\n\n    this.goalTextElement_ = document.getElementById('goalText');\n    /**\n     * The expected answer.\n     * @type {Array<Array<string|number>>}\n     * @private\n     */\n\n    this.expectedAnswer_ = [[]];\n    /**\n     * The interpreter.\n     * @type {?Interpreter}\n     * @private\n     */\n\n    this.interpreter_ = null;\n    /**\n     * @type {Array<Stave>}\n     * @private\n     */\n\n    this.staves_ = [];\n    /**\n     * The current active stave.\n     * @type {?Stave}\n     * @private\n     */\n\n    this.activeStave_ = null;\n    /**\n     * Time of start of execution.\n     * @type {number}\n     * @private\n     */\n\n    this.startTime_ = 0;\n    /**\n     * Number of 1/64ths notes since the start.\n     * @type {number}\n     * @private\n     */\n\n    this.clock64ths_ = 0;\n    /**\n     * The speed at which to play notes. Between 0 and 1, with 0 being slow,\n     * 0.5 being normal speed, and 1 being fast.\n     * @type {number}\n     * @private\n     */\n\n    this.speed_ = 0.5;\n  }\n  /**\n   * Initializes the Blockly workspace.\n   * @return {!Blockly.WorkspaceSvg} The Blockly workspace.\n   * @private\n   */\n\n\n  _createClass(Music, [{\n    key: \"createWorkspace_\",\n    value: function createWorkspace_() {\n      // Initialize Blockly workspace.\n      var blocklyDiv = document.getElementById('blocklyDiv');\n      var workspace = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.inject(blocklyDiv, {\n        toolbox: _music_blocks__WEBPACK_IMPORTED_MODULE_2__[\"toolboxPitch\"]\n      });\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = true;\n      workspace.getMarkerManager().setCursor(new _line_cursor__WEBPACK_IMPORTED_MODULE_3__[\"LineCursor\"]());\n      workspace.addChangeListener(function (event) {\n        return _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].nodeToSpeech(event);\n      });\n      workspace.getFlyout().getWorkspace().addChangeListener(function (event) {\n        return _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].nodeToSpeech(event);\n      });\n      return workspace;\n    }\n    /**\n     *\n     * @param {*} text\n     */\n\n  }, {\n    key: \"getWorkspace\",\n    value: function getWorkspace() {\n      return this.workspace;\n    }\n    /**\n     * Sets the goal text.\n     * @param {string} text The text to set the goal to.\n     */\n\n  }, {\n    key: \"setGoalText\",\n    value: function setGoalText(text) {\n      this.goalTextElement_.innerHTML = text;\n    }\n    /**\n     * Update the goal based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"updateGoal_\",\n    value: function updateGoal_() {\n      var goalText = '';\n\n      switch (this.level) {\n        case 1:\n          goalText = 'Play c4 d4 e4 c4';\n          this.expectedAnswer_ = [['C4', 0.25, 'D4', 0.25, 'E4', 0.25, 'C4', 0.25]];\n          break;\n      }\n\n      this.setGoalText(goalText);\n    }\n    /**\n     * Update the toolbox based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"updateToolbox_\",\n    value: function updateToolbox_() {\n      var toolboxJson = _music_blocks__WEBPACK_IMPORTED_MODULE_2__[\"toolboxPitch\"]; // Use toolboxPitch as default.\n\n      if (this.level < 6) {\n        toolboxJson = {\n          'kind': 'flyoutToolbox',\n          'contents': [{\n            'kind': 'block',\n            'type': 'pitch_test'\n          }, {\n            'kind': 'block',\n            'type': 'music_pitch'\n          }, {\n            'kind': 'block',\n            'type': 'music_note'\n          }, {\n            'kind': 'block',\n            'type': 'music_rest_whole'\n          }, {\n            'kind': 'block',\n            'type': 'music_rest'\n          }, {\n            'kind': 'block',\n            'type': 'music_instrument'\n          }]\n        };\n      }\n\n      this.workspace.updateToolbox(toolboxJson);\n    }\n    /**\n     * Update the workspace blocks based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"loadLevelBlocks_\",\n    value: function loadLevelBlocks_() {\n      this.workspace.clear();\n      var levelXml = '';\n\n      if (this.level === 2) {\n        levelXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"false\\\" x=\\\"180\\\"\\n            y=\\\"50\\\">\\n              <statement name=\\\"STACK\\\">\\n                <block type=\\\"music_note\\\">\\n                  <field name=\\\"DURATION\\\">0.25</field>\\n                  <value name=\\\"PITCH\\\">\\n                    <shadow type=\\\"music_pitch\\\">\\n                      <field name=\\\"PITCH\\\">C4</field>\\n                    </shadow>\\n                  </value>\\n                  <next>\\n                    <block type=\\\"music_note\\\">\\n                      <field name=\\\"DURATION\\\">0.25</field>\\n                      <value name=\\\"PITCH\\\">\\n                        <shadow type=\\\"music_pitch\\\">\\n                          <field name=\\\"PITCH\\\">D4</field>\\n                        </shadow>\\n                      </value>\\n                      <next>\\n                        <block type=\\\"music_note\\\">\\n                          <field name=\\\"DURATION\\\">0.25</field>\\n                          <value name=\\\"PITCH\\\">\\n                            <shadow type=\\\"music_pitch\\\">\\n                              <field name=\\\"PITCH\\\">E4</field>\\n                            </shadow>\\n                          </value>\\n                          <next>\\n                            <block type=\\\"music_note\\\">\\n                              <field name=\\\"DURATION\\\">0.25</field>\\n                              <value name=\\\"PITCH\\\">\\n                                <shadow type=\\\"music_pitch\\\">\\n                                  <field name=\\\"PITCH\\\">C4</field>\\n                                </shadow>\\n                              </value>\\n                            </block>\\n                          </next>\\n                        </block>\\n                      </next>\\n                    </block>\\n                  </next>\\n                </block>\\n              </statement>\\n            </block>\\n          </xml>\";\n      } else if (this.level < 6) {\n        levelXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"\".concat(this.level > 6, \"\\\" x=\\\"180\\\"\\n            y=\\\"50\\\"></block>\\n          </xml>\");\n      }\n\n      if (levelXml) {\n        blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.textToDom(levelXml), this.workspace);\n      }\n    }\n    /**\n     * Load the specified level.\n     * @param {number|string} level The level to load.\n     */\n\n  }, {\n    key: \"loadLevel\",\n    value: function loadLevel(level) {\n      this.level = Number(level);\n      this.updateGoal_();\n      this.updateToolbox_();\n      this.loadLevelBlocks_();\n    }\n    /**\n     * Generates code and logs it to the console.\n     */\n\n  }, {\n    key: \"logGeneratedCode\",\n    value: function logGeneratedCode() {\n      var codeJs = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.JavaScript.workspaceToCode(this.workspace);\n      console.log(codeJs);\n    }\n    /**\n     * Evaluates whether the answer for the currently loaded level is correct.\n     * @return {boolean} Whether the answer is correct.\n     */\n\n  }, {\n    key: \"checkAnswer_\",\n    value: function checkAnswer_() {\n      var correct = true;\n\n      for (var i = 0; i < this.expectedAnswer_.length; i++) {\n        if (!this.staves_[i].checkTranscript(this.expectedAnswer_[i])) {\n          correct = false;\n          break;\n        }\n      }\n\n      return correct;\n    }\n    /**\n     * Play one note.\n     * @param {number} duration Fraction of a whole note length to play.\n     * @param {string} pitch Note play.\n     */\n\n  }, {\n    key: \"play_\",\n    value: function play_(duration, pitch) {\n      this.activeStave_.play(duration, pitch, this.clock64ths_);\n    }\n    /**\n     * Wait one rest.\n     * @param {number} duration Fraction of a whole note length to rest.\n     */\n\n  }, {\n    key: \"rest_\",\n    value: function rest_(duration) {\n      this.activeStave_.rest(duration, this.clock64ths_);\n    }\n    /**\n     * Inject the Music API into a JavaScript interpreter.\n     * @param {!Interpreter} interpreter The JS-Interpreter.\n     * @param {!Interpreter.Object} globalObject Global object.\n     */\n\n  }, {\n    key: \"interpreterInit_\",\n    value: function interpreterInit_(interpreter, globalObject) {\n      var _this = this;\n\n      // API\n      var wrapper;\n\n      wrapper = function wrapper(duration, pitch, _id) {\n        _this.play_(duration, pitch);\n      };\n\n      interpreter.setProperty(globalObject, 'play', interpreter.createNativeFunction(wrapper));\n\n      wrapper = function wrapper(duration, _id) {\n        _this.rest_(duration);\n      };\n\n      interpreter.setProperty(globalObject, 'rest', interpreter.createNativeFunction(wrapper)); // TODO implement changing instrument.\n      // wrapper = function(instrument, id) {\n      //   Music.setInstrument(instrument, id);\n      // };\n      // interpreter.setProperty(globalObject, 'setInstrument',\n      //     interpreter.createNativeFunction(wrapper));\n    }\n    /**\n     * Execute a bite-sized chunk of the user's code.\n     * @param {Stave} stave The stave to execute.\n     */\n\n  }, {\n    key: \"executeChunk_\",\n    value: function executeChunk_(stave) {\n      this.activeStave_ = stave; // Switch the interpreter to run the provided staff.\n\n      this.interpreter_.stateStack = stave.stateStack;\n      var ticks = 10000;\n      var go;\n\n      do {\n        try {\n          go = this.interpreter_.step();\n        } catch (e) {\n          // User error, terminate in shame.\n          alert(e);\n          go = false;\n        }\n\n        if (ticks-- == 0) {\n          console.warn('Staff ' + stave.id + ' is running slowly.');\n          return;\n        }\n\n        if (stave.isPaused(this.clock64ths_)) {\n          // Previously executed command (play or rest) requested a pause.\n          return;\n        }\n      } while (go); // Thread complete.  Wrap up.\n\n\n      stave.stopSound(stave);\n      stave.done = true;\n    }\n    /**\n     * Set the speed (Number between 0 and 1).\n     * @param {number} speed The speed to set to.\n     */\n\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed(speed) {\n      if (speed <= 0 || speed > 1) {\n        console.error('Invalid speed');\n        return;\n      }\n\n      this.speed_ = speed;\n      this.startTime_ = 0;\n    }\n    /**\n     * Execute a 1/64th tick of the program.\n     * @private\n     */\n\n  }, {\n    key: \"tick_\",\n    value: function tick_() {\n      var _this2 = this;\n\n      // Delay between start of each beat (1/64ths of a whole note).\n      // Reminder: The startTime_ should be reset after the slider is adjusted.\n      var scaleDuration = 1000 * (2.5 - 2 * this.speed_) / 64;\n\n      if (!this.startTime_) {\n        // Either the first tick, or first tick after slider was adjusted.\n        this.startTime_ = Date.now() - this.clock64ths_ * scaleDuration;\n      }\n\n      var done = true;\n      this.staves_.forEach(function (stave) {\n        if (!stave.done) {\n          done = false;\n\n          if (!stave.isPaused(_this2.clock64ths_)) {\n            _this2.executeChunk_(stave);\n          }\n        }\n      });\n\n      if (done) {\n        // Program complete.\n        if (this.checkAnswer_()) {\n          console.log('CORRECT');\n        } else {\n          console.log('INCORRECT');\n        }\n      } else {\n        this.clock64ths_++;\n        var ms = this.startTime_ + this.clock64ths_ * scaleDuration - Date.now();\n        this.pid = setTimeout(function () {\n          return _this2.tick_();\n        }, ms);\n      }\n    }\n    /**\n     * Reset the music to the start position, clear the display, and kill any\n     * pending tasks.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Kill any task.\n      clearTimeout(this.pid);\n      this.staves_.forEach(function (stave) {\n        stave.stopSound();\n      });\n      this.interpreter_ = null;\n      this.activeStave_ = null;\n      this.staves_.length = 0;\n      this.clock64ths_ = 0;\n      this.startTime_ = 0;\n    }\n    /**\n     * Plays music based on the blocks on the workspace.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var _this3 = this;\n\n      this.reset(); // Get generated code from workspace\n\n      var code = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.JavaScript.workspaceToCode(this.workspace); // Run user code.\n\n      this.interpreter_ = new js_interpreter__WEBPACK_IMPORTED_MODULE_5___default.a(code, this.interpreterInit_.bind(this)); // TODO support multiple threads\n      // Assume only one thread.\n\n      var interpreter = new js_interpreter__WEBPACK_IMPORTED_MODULE_5___default.a(''); // Replace this thread's global scope with the cross-thread global.\n\n      interpreter.stateStack[0].scope = this.interpreter_.globalScope; // Add start call.\n\n      interpreter.appendCode('start();\\n');\n      this.staves_.push(new Stave(0, interpreter.stateStack));\n      setTimeout(function () {\n        return _this3.tick_();\n      }, 100);\n    }\n  }]);\n\n  return Music;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/music.js\n");

/***/ })

})
webpackHotUpdate("main",{

/***/ "./src/music.js":
/*!**********************!*\
  !*** ./src/music.js ***!
  \**********************/
/*! exports provided: Music */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Music\", function() { return Music; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _music_blocks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music_blocks */ \"./src/music_blocks.js\");\n/* harmony import */ var _music_block_generators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music_block_generators */ \"./src/music_block_generators.js\");\n/* harmony import */ var js_interpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js-interpreter */ \"./node_modules/js-interpreter/lib/js-interpreter.js\");\n/* harmony import */ var js_interpreter__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(js_interpreter__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _note_player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note_player */ \"./src/note_player.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Game logic for music game.\n */\n\n // import {speaker} from './speaker';\n// import {toolboxPitch} from './music_blocks';\n// import {CustomCursor} from './custom_cursor';\n\n\n\n\n/**\n * Constant denoting a rest.\n */\n\nvar REST = 'REST';\n/**\n * Class representing transcript of notes played.\n */\n\nvar Transcript = /*#__PURE__*/function () {\n  /**\n   * Class for holding transcript of notes that were played. Expects\n   * notesAndRests and durations to have a matching length.\n   * @param {Array<string>} notesAndRests The notes and rests.\n   * @param {Array<number>} durations The durations of the notes and rests.\n   */\n  function Transcript() {\n    var notesAndRests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var durations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Transcript);\n\n    if (notesAndRests.length !== durations.length) {\n      console.error('Transcript length mismatch.');\n    }\n\n    this.notesAndRests = [];\n    this.durations = [];\n    this.size = 0;\n    this.readableText_ = '';\n\n    for (var i = 0; i < notesAndRests.length; i++) {\n      this.appendNote(notesAndRests[i], durations[i]);\n    }\n  }\n  /**\n   * Converts duration number into approriate string.\n   * @param {number} duration The duration.\n   * @return {string} The string version of duration.\n   * @private\n   */\n\n\n  _createClass(Transcript, [{\n    key: \"appendReadableText_\",\n\n    /**\n     * Internal method for appending text to transcript text.\n     * @param {string} text The text to append.\n     * @private\n     */\n    value: function appendReadableText_(text) {\n      if (this.readableText_) {\n        this.readableText_ += ', ';\n      } else {\n        text = text.charAt(0).toUpperCase() + text.slice(1);\n      }\n\n      this.readableText_ += text;\n    }\n    /**\n     * Returns sentence representing the notes played in this transcript.\n     * @return {string} The sentence.\n     */\n\n  }, {\n    key: \"getReadableText\",\n    value: function getReadableText() {\n      if (!this.readableText_) {\n        return 'Empty.';\n      }\n\n      var items = this.readableText_.split(',');\n\n      if (items.length > 1) {\n        items[items.length - 1] = ' and ' + items[items.length - 1];\n      }\n\n      return items.join(',') + '.';\n    }\n    /**\n     * Appends note to transcript.\n     * @param {string} note The pitch of note to append.\n     * @param {number} duration The duration of the note.\n     */\n\n  }, {\n    key: \"appendNote\",\n    value: function appendNote(note, duration) {\n      this.notesAndRests.push(note);\n      this.durations.push(duration);\n      this.appendReadableText_(\"play \".concat(Transcript.getDurationText_(duration), \" note \").concat(note));\n      this.size++;\n    }\n    /**\n     * Appends rest to transcript.\n     * @param {number} duration The duration of the rest.\n     */\n\n  }, {\n    key: \"appendRest\",\n    value: function appendRest(duration) {\n      this.notesAndRests.push(REST);\n      this.durations.push(duration);\n      this.appendReadableText_(\"\".concat(Transcript.getDurationText_(duration), \" rest\"));\n      this.size++;\n    }\n  }], [{\n    key: \"getDurationText_\",\n    value: function getDurationText_(duration) {\n      var durationText = 'unknown';\n\n      switch (duration) {\n        case 1:\n          durationText = 'whole';\n          break;\n\n        case 0.5:\n          durationText = 'half';\n          break;\n\n        case 0.25:\n          durationText = 'quarter';\n          break;\n\n        case 0.125:\n          durationText = 'eight';\n          break;\n      }\n\n      return durationText;\n    }\n  }]);\n\n  return Transcript;\n}();\n/**\n * Class representing musical stave.\n */\n\n\nvar Stave = /*#__PURE__*/function () {\n  /**\n   * Class holding code for music to play.\n   * @param {number} id The unique id of this stave.\n   * @param {Array<Interpreter.State>} stateStack The stateStack containing code\n   *    for this stave.\n   */\n  function Stave(id, stateStack) {\n    _classCallCheck(this, Stave);\n\n    /**\n     * The id.\n     * @type {number}\n     */\n    this.id = id;\n    /**\n     * The state stack.\n     * @type {Array<Interpreter.State>}\n     */\n\n    this.stateStack = stateStack;\n    /**\n     * Whether all the notes have ben played.\n     * @type {boolean}\n     */\n\n    this.done = false;\n    /**\n     * The time to pause till.\n     * @type {number}\n     * @private\n     */\n\n    this.pauseUntil64ths_ = 0;\n    /**\n     * The transcript of notes played.\n     * @type {Transcript}\n     * @private\n     */\n\n    this.transcript_ = new Transcript();\n    /**\n     * Currently playing note.\n     * @type {string}\n     * @private\n     */\n\n    this.note_ = '';\n  }\n  /**\n   * Whether this stave is currently paused.\n   * @param {number} clock64ths Number of 1/64ths notes since the start.\n   * @return {boolean} Whether this stave is paused.\n   */\n\n\n  _createClass(Stave, [{\n    key: \"isPaused\",\n    value: function isPaused(clock64ths) {\n      return this.pauseUntil64ths_ > clock64ths;\n    }\n    /**\n     * Play one note.\n     * @param {number} duration Fraction of a whole note length to play.\n     * @param {string} pitch Note to play.\n     * @param {number} clock64ths Number of 1/64ths notes since the start.\n     */\n\n  }, {\n    key: \"play\",\n    value: function play(duration, pitch, clock64ths) {\n      this.stopSound();\n      this.note_ = pitch;\n      _note_player__WEBPACK_IMPORTED_MODULE_4__[\"notePlayer\"].triggerAttack(pitch);\n      this.pauseUntil64ths_ = duration * 64 + clock64ths; // Make a record of this note.\n\n      this.transcript_.appendNote(pitch, duration);\n    }\n    /**\n     * Wait one rest.\n     * @param {number} duration Fraction of a whole note length to rest.\n     * @param {number} clock64ths Number of 1/64ths notes since the start.\n     */\n\n  }, {\n    key: \"rest\",\n    value: function rest(duration, clock64ths) {\n      this.stopSound();\n      this.pauseUntil64ths_ = duration * 64 + clock64ths; // Make a record of this rest.\n\n      this.transcript_.appendRest(duration);\n    }\n    /**\n     * Stops currently playing note.\n     */\n\n  }, {\n    key: \"stopSound\",\n    value: function stopSound() {\n      if (this.note_) {\n        _note_player__WEBPACK_IMPORTED_MODULE_4__[\"notePlayer\"].triggerRelease();\n        this.note_ = '';\n      }\n    }\n    /**\n     * Returns feedback on what is different between the loaded transcript and the\n     * expected one, or empty string if they are equal.\n     * @param {Transcript} expectedTranscript The expected transcript.\n     * @return {string} The feedback.\n     */\n\n  }, {\n    key: \"getFeedback\",\n    value: function getFeedback(expectedTranscript) {\n      var feedback = ''; // There could be extra or missing notes.\n\n      var actualSize = this.transcript_.size;\n      var expectedSize = expectedTranscript.size;\n      var sizeMismatch = actualSize !== expectedSize;\n\n      if (actualSize < expectedSize) {\n        feedback += 'Your solution is missing notes.\\n';\n      } else if (actualSize > expectedSize) {\n        feedback += 'Your solution has extra notes.\\n';\n      } // The notes played could be wrong (duration or note).\n\n\n      var hasIncorrectNotes = false;\n      var hasIncorrectDuration = false;\n\n      for (var i = 0; i < actualSize && i < expectedSize; i++) {\n        if (this.transcript_.notesAndRests[i] !== expectedTranscript.notesAndRests[i]) {\n          hasIncorrectNotes = true;\n        }\n\n        if (this.transcript_.durations[i] !== expectedTranscript.durations[i]) {\n          hasIncorrectDuration = true;\n        }\n      }\n\n      if (hasIncorrectNotes) {\n        feedback += \"Some of the notes \".concat(sizeMismatch ? 'may be' : 'are', \" incorrect.\\n\");\n      }\n\n      if (hasIncorrectDuration) {\n        feedback += \"Some of the note durations \" + \"\".concat(sizeMismatch ? 'may be' : 'are', \" incorrect.\\n\");\n      } // Append the actual and expected notes played.\n\n\n      if (sizeMismatch || hasIncorrectNotes || hasIncorrectDuration) {\n        feedback += \"\\nYour solution: \".concat(this.transcript_.getReadableText() || 'empty', \"\\n\");\n        feedback += \"Expected solution: \".concat(expectedTranscript.getReadableText());\n      }\n\n      return feedback;\n    }\n  }]);\n\n  return Stave;\n}();\n/**\n * Game logic for music game.\n */\n\n\nvar Music = /*#__PURE__*/function () {\n  /**\n   * Class for a music game.\n   * @param {Blockly.WorkspaceSvg} workspace The Blockly workspace.\n   * @param {function(string)} onGoalUpdateCb The callback function for goal\n   *    change.\n   * @param {function()} onSuccessCb The callback function for on success event.\n   * @param {function(string)} onFailureCb The callback function for on failure\n   *    event.\n   * @constructor\n   */\n  function Music(workspace, onGoalUpdateCb, onSuccessCb, onFailureCb) {\n    _classCallCheck(this, Music);\n\n    /**\n     * The Blockly workspace associated with this game.\n     * @type {!Blockly.WorkspaceSvg}\n     */\n    this.workspace = workspace;\n    /**\n     * The currently loaded level. 0 if no level loaded.\n     */\n\n    this.level = 0;\n    /**\n     * Callback function for goal update.\n     * @param {string} text The text to set the goal to.\n     */\n\n    this.onGoalUpdate = onGoalUpdateCb;\n    /**\n     * The expected answer.\n     * @type {Array<Transcript>}\n     * @private\n     */\n\n    this.expectedAnswer_ = [];\n    /**\n     * The interpreter.\n     * @type {?Interpreter}\n     * @private\n     */\n\n    this.interpreter_ = null;\n    /**\n     * @type {Array<Stave>}\n     * @private\n     */\n\n    this.staves_ = [];\n    /**\n     * The current active stave.\n     * @type {?Stave}\n     * @private\n     */\n\n    this.activeStave_ = null;\n    /**\n     * Time of start of execution.\n     * @type {number}\n     * @private\n     */\n\n    this.startTime_ = 0;\n    /**\n     * Number of 1/64ths notes since the start.\n     * @type {number}\n     * @private\n     */\n\n    this.clock64ths_ = 0;\n    /**\n     * The speed at which to play notes. Between 0 and 1, with 0 being slow,\n     * 0.5 being normal speed, and 1 being fast.\n     * @type {number}\n     * @private\n     */\n\n    this.speed_ = 0.5;\n    /**\n     * The id of the last setTimeout call. Used for game reset.\n     * @type {number}\n     * @private\n     */\n\n    this.pid_ = 0;\n    /**\n     * The callback function on level success.\n     * @type {function()}\n     * @private\n     */\n\n    this.onSuccessCallback_ = onSuccessCb;\n    /**\n     * The callback function on level failure.\n     * @type {function(string)}\n     * @param {string} feedback The level feedback.\n     * @private\n     */\n\n    this.onFailureCallback_ = onFailureCb;\n    this.registerPlayShortcut();\n  }\n  /**\n   * Registers a shortcut to play the notes on the workspace.\n   */\n\n\n  _createClass(Music, [{\n    key: \"registerPlayShortcut\",\n    value: function registerPlayShortcut() {\n      var newFunction = function () {\n        this.execute();\n      }.bind(this);\n      /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n\n\n      var playShortcut = {\n        name: 'playShortcut',\n        preconditionFn: function preconditionFn(workspace) {\n          return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n        },\n        callback: newFunction\n      };\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.register(playShortcut);\n      var shiftW = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.KeyCodes.P, [blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.KeyCodes.SHIFT]);\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.addKeyMapping(shiftW, playShortcut.name);\n    }\n    /**\n     * Clears the workspace and loads the specified blocks.\n     * @param {string} blockXml The xml text string of blocks.\n     */\n\n  }, {\n    key: \"loadWorkspaceBlocks\",\n    value: function loadWorkspaceBlocks(blockXml) {\n      this.workspace.clear();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.textToDom(blockXml), this.workspace);\n    }\n    /**\n     * Updates the currently loaded toolbox.\n     * @param {?Blockly.utils.toolbox.ToolboxDefinition} toolboxDef\n     *    DOM tree of toolbox contents, string of toolbox contents, or JSON\n     *    representing toolbox definition.\n     */\n\n  }, {\n    key: \"updateToolbox\",\n    value: function updateToolbox(toolboxDef) {\n      this.workspace.updateToolbox(toolboxDef);\n    }\n    /**\n     * Updates the goal based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"updateLevelGoal_\",\n    value: function updateLevelGoal_() {\n      var goalText = '';\n\n      switch (this.level) {\n        case 1:\n          this.expectedAnswer_ = [new Transcript(['C4', 'D4', 'E4', 'C4'], Array(4).fill(0.25))];\n          goalText = this.expectedAnswer_[0].getReadableText();\n          break;\n      }\n\n      this.onGoalUpdate(goalText);\n    }\n    /**\n     * Updates the toolbox based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"updateLevelToolbox_\",\n    value: function updateLevelToolbox_() {\n      var toolboxJson = {\n        'kind': 'flyoutToolbox',\n        'contents': [{\n          'kind': 'block',\n          'blockxml': \"<block type=\\\"music_note\\\">\\n                        <field name=\\\"DURATION\\\">0.25</field>\\n                        <value name=\\\"PITCH\\\">\\n                          <shadow type=\\\"music_pitch\\\">\\n                            <field name=\\\"PITCH\\\">C4</field>\\n                          </shadow>\\n                        </value>\\n                      </block>\"\n        }, {\n          'kind': 'block',\n          'type': 'music_rest'\n        }]\n      };\n      this.updateToolbox(toolboxJson);\n    }\n    /**\n     * Update the workspace blocks based on the current level.\n     * @private\n     */\n\n  }, {\n    key: \"loadLevelBlocks_\",\n    value: function loadLevelBlocks_() {\n      var levelXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"false\\\" x=\\\"180\\\"\\n            y=\\\"50\\\"></block>\\n          </xml>\";\n      this.loadWorkspaceBlocks(levelXml);\n    }\n    /**\n     * Load the specified level.\n     * @param {number|string} level The level to load.\n     */\n\n  }, {\n    key: \"loadLevel\",\n    value: function loadLevel(level) {\n      this.level = Number(level);\n      this.updateLevelGoal_();\n      this.updateLevelToolbox_();\n      this.loadLevelBlocks_();\n    }\n    /**\n     * Set the speed (Number between 0 and 1).\n     * @param {number} speed The speed to set to.\n     */\n\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed(speed) {\n      if (speed <= 0 || speed > 1) {\n        console.error('Invalid speed');\n        return;\n      }\n\n      this.speed_ = speed;\n      this.startTime_ = 0;\n    }\n    /**\n     * Generates code and logs it to the console.\n     */\n\n  }, {\n    key: \"logGeneratedCode\",\n    value: function logGeneratedCode() {\n      var codeJs = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.JavaScript.workspaceToCode(this.workspace);\n      console.log(codeJs);\n    }\n    /**\n     * Reset the music to the start position, clear the display, and kill any\n     * pending tasks.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Kill any task.\n      clearTimeout(this.pid_);\n      this.staves_.forEach(function (stave) {\n        stave.stopSound();\n      });\n      this.interpreter_ = null;\n      this.activeStave_ = null;\n      this.staves_.length = 0;\n      this.clock64ths_ = 0;\n      this.startTime_ = 0;\n    }\n    /**\n     * Plays music based on the blocks on the workspace.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var _this = this;\n\n      this.reset(); // Get generated code from workspace\n\n      var code = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.JavaScript.workspaceToCode(this.workspace); // Run user code.\n\n      this.interpreter_ = new js_interpreter__WEBPACK_IMPORTED_MODULE_3___default.a(code, this.interpreterInit_.bind(this)); // TODO add support for multiple threads.\n\n      var interpreter = new js_interpreter__WEBPACK_IMPORTED_MODULE_3___default.a(''); // Replace this thread's global scope with the cross-thread global.\n\n      interpreter.stateStack[0].scope = this.interpreter_.globalScope; // Add start call.\n\n      interpreter.appendCode('start();\\n');\n      this.staves_.push(new Stave(0, interpreter.stateStack));\n      this.pid_ = setTimeout(function () {\n        return _this.tick_();\n      }, 100);\n    }\n    /**\n     * Inject the Music API into a JavaScript interpreter.\n     * @param {!Interpreter} interpreter The JS-Interpreter.\n     * @param {!Interpreter.Object} globalObject Global object.\n     * @private\n     */\n\n  }, {\n    key: \"interpreterInit_\",\n    value: function interpreterInit_(interpreter, globalObject) {\n      var _this2 = this;\n\n      // API\n      var wrapper;\n\n      wrapper = function wrapper(duration, pitch, _id) {\n        _this2.play_(duration, pitch);\n      };\n\n      interpreter.setProperty(globalObject, 'play', interpreter.createNativeFunction(wrapper));\n\n      wrapper = function wrapper(duration, _id) {\n        _this2.rest_(duration);\n      };\n\n      interpreter.setProperty(globalObject, 'rest', interpreter.createNativeFunction(wrapper)); // TODO implement setInstrument API.\n    }\n    /**\n     * Play one note.\n     * @param {number} duration Fraction of a whole note length to play.\n     * @param {string} pitch Note play.\n     * @private\n     */\n\n  }, {\n    key: \"play_\",\n    value: function play_(duration, pitch) {\n      this.activeStave_.play(duration, pitch, this.clock64ths_);\n    }\n    /**\n     * Wait one rest.\n     * @param {number} duration Fraction of a whole note length to rest.\n     * @private\n     */\n\n  }, {\n    key: \"rest_\",\n    value: function rest_(duration) {\n      this.activeStave_.rest(duration, this.clock64ths_);\n    }\n    /**\n     * Execute a 1/64th tick of the program.\n     * @private\n     */\n\n  }, {\n    key: \"tick_\",\n    value: function tick_() {\n      var _this3 = this;\n\n      // Delay between start of each beat (1/64ths of a whole note).\n      // Reminder: The startTime_ should be reset after the slider is adjusted.\n      var scaleDuration = 1000 * (2.5 - 2 * this.speed_) / 64;\n\n      if (!this.startTime_) {\n        // Either the first tick, or first tick after slider was adjusted.\n        this.startTime_ = Date.now() - this.clock64ths_ * scaleDuration;\n      }\n\n      var done = true;\n      this.staves_.forEach(function (stave) {\n        if (!stave.done) {\n          done = false;\n\n          if (!stave.isPaused(_this3.clock64ths_)) {\n            _this3.executeChunk_(stave);\n          }\n        }\n      });\n\n      if (done) {\n        // Program complete.\n        var feedback = this.checkAnswer_();\n\n        if (feedback) {\n          this.onFailureCallback_(feedback);\n        } else {\n          this.onSuccessCallback_();\n        }\n      } else {\n        this.clock64ths_++;\n        var ms = this.startTime_ + this.clock64ths_ * scaleDuration - Date.now();\n        this.pid_ = setTimeout(function () {\n          return _this3.tick_();\n        }, ms);\n      }\n    }\n    /**\n     * Execute a bite-sized chunk of the user's code.\n     * @param {Stave} stave The stave to execute.\n     * @private\n     */\n\n  }, {\n    key: \"executeChunk_\",\n    value: function executeChunk_(stave) {\n      this.activeStave_ = stave; // Switch the interpreter to run the provided staff.\n\n      this.interpreter_.stateStack = stave.stateStack;\n      var ticks = 10000;\n      var go;\n\n      do {\n        try {\n          go = this.interpreter_.step();\n        } catch (e) {\n          // User error, terminate in shame.\n          alert(e);\n          go = false;\n        }\n\n        if (ticks-- == 0) {\n          console.warn('Staff ' + stave.id + ' is running slowly.');\n          return;\n        }\n\n        if (stave.isPaused(this.clock64ths_)) {\n          // Previously executed command (play or rest) requested a pause.\n          return;\n        }\n      } while (go); // Thread complete.  Wrap up.\n\n\n      stave.stopSound(stave);\n      stave.done = true;\n    }\n    /**\n     * Evaluates whether the answer for the currently loaded level is correct.\n     * Returns level feedback if correct or empty string if correct.\n     * @return {string} Level feedback or empty string.\n     * @private\n     */\n\n  }, {\n    key: \"checkAnswer_\",\n    value: function checkAnswer_() {\n      var feedback = '';\n\n      for (var i = 0; i < this.expectedAnswer_.length; i++) {\n        var staveFeedback = this.staves_[i].getFeedback(this.expectedAnswer_[i]);\n\n        if (staveFeedback) {\n          feedback += staveFeedback;\n        }\n      }\n\n      return feedback;\n    }\n  }]);\n\n  return Music;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/music.js\n");

/***/ })

})
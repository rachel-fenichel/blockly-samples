webpackHotUpdate("main",{

/***/ "./src/tutorial.js":
/*!*************************!*\
  !*** ./src/tutorial.js ***!
  \*************************/
/*! exports provided: Tutorial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tutorial\", function() { return Tutorial; });\n/* harmony import */ var _tutorial_step__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tutorial_step */ \"./src/tutorial_step.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Multi-step tutorial using modals.\n */\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n/**\n * A multi-step tutorial for the accessible music game.\n */\n\nvar Tutorial = /*#__PURE__*/function () {\n  /**\n   * Class for a tutorial.\n   * @param {Blockly.WorkspaceSvg} workspace The workspace the user\n   *     will interact with.\n   * @constructor\n   */\n  function Tutorial(workspace) {\n    var _this = this;\n\n    _classCallCheck(this, Tutorial);\n\n    /**\n     * The id of the modal.\n     * @type {string}\n     */\n    this.modalId = 'tutorialModal';\n    /**\n     * The id of the tutorial text.\n     * @type {string}\n     */\n\n    this.stepTextId = this.modalId + 'Text';\n    /**\n     * The id of the next step button.\n     * @type {string}\n     */\n\n    this.stepButtonId = this.modalId + 'StepBtn';\n    /**\n     * The id of the hide modal button.\n     * @type {string}\n     */\n\n    this.hideButtonId = this.modalId + 'HideBtn';\n    /**\n     * An array of steps in the tutorial.\n     * @type {Array<!TutorialStep>}\n     */\n\n    this.steps = Tutorial.STEP_OBJECTS.map(function (obj) {\n      return new _tutorial_step__WEBPACK_IMPORTED_MODULE_0__[\"TutorialStep\"](obj.text, _this.stepTextId, _this.nextStep);\n    });\n    /**\n     * The index of the currently active step.\n     * @type {number}\n     */\n\n    this.curStepIndex = 0;\n    /**\n     * The currently active step.\n     * @type {TutorialStep}\n     */\n\n    this.curStep = this.steps[this.curStepIndex];\n    /**\n     * The Blockly workspace the user will interact with.\n     * @type {Blockly.WorkspaceSvg}\n     */\n\n    this.workspace = workspace;\n    /**\n     * The node that was selected on the workspace when the modal\n     * opened.\n     * @type {Blockly.ASTNode}\n     */\n\n    this.curNode = null;\n  }\n  /**\n   * Initialize DOM and show.\n   */\n\n\n  _createClass(Tutorial, [{\n    key: \"init\",\n    value: function init() {\n      this.createDom();\n      this.addCallbacks();\n      micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].show(this.modalId);\n      this.curStep.show();\n      this.registerPlayHelpText();\n      this.loadWorkspace();\n    }\n    /**\n     * Load the workspace for the tutorial.\n     */\n\n  }, {\n    key: \"loadWorkspace\",\n    value: function loadWorkspace() {\n      var toolboxJson = {\n        'kind': 'flyoutToolbox',\n        'contents': [{\n          'kind': 'block',\n          'blockxml': \"<block type=\\\"music_note\\\">\\n                        <field name=\\\"DURATION\\\">0.25</field>\\n                        <value name=\\\"PITCH\\\">\\n                          <shadow type=\\\"music_pitch\\\">\\n                            <field name=\\\"PITCH\\\">C4</field>\\n                          </shadow>\\n                        </value>\\n                      </block>\"\n        }, {\n          'kind': 'block',\n          'type': 'music_rest'\n        }]\n      };\n      this.workspace.updateToolbox(toolboxJson);\n      var starterXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"false\\\" x=\\\"180\\\"\\n            y=\\\"50\\\"></block>\\n          </xml>\";\n      this.workspace.clear();\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Xml.textToDom(starterXml), this.workspace);\n    }\n    /**\n     * Registers shortcut to replay the current tutorial step.\n     */\n\n  }, {\n    key: \"registerPlayHelpText\",\n    value: function registerPlayHelpText() {\n      var _this2 = this;\n\n      /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n      var playHelpText = {\n        name: 'playHelpText',\n        preconditionFn: function preconditionFn(workspace) {\n          return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n        },\n        callback: function callback() {\n          _speaker__WEBPACK_IMPORTED_MODULE_3__[\"speaker\"].speak(_this2.curStep.text, true);\n        }\n      };\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.register(playHelpText);\n      var shiftW = blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.utils.KeyCodes.H);\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.addKeyMapping(shiftW, playHelpText.name);\n    }\n    /**\n     * Display the next step, or end the tutorial if there are no more steps.\n     */\n\n  }, {\n    key: \"nextStep\",\n    value: function nextStep() {\n      this.curStepIndex++;\n\n      if (this.curStepIndex < this.steps.length) {\n        this.curStep = this.steps[this.curStepIndex];\n        micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].show(this.modalId);\n        this.curStep.show();\n        this.stashCursor();\n      } else {\n        this.done();\n      }\n    }\n    /**\n     * End the tutorial.\n     */\n\n  }, {\n    key: \"done\",\n    value: function done() {\n      micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].close(this.modalId);\n    }\n    /**\n     * Save the current cursor node and disable keyboard nav.\n     * Call this when opening the modal.\n     */\n\n  }, {\n    key: \"stashCursor\",\n    value: function stashCursor() {\n      this.curNode = this.workspace.getCursor().getCurNode();\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.navigation.disableKeyboardAccessibility();\n    }\n    /**\n     * Reenable keyboard nav and move the cursor to the previously\n     * selected cursor node. Call this when closing the modal.\n     */\n\n  }, {\n    key: \"popCursor\",\n    value: function popCursor() {\n      blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.navigation.enableKeyboardAccessibility();\n\n      if (this.curNode) {\n        this.workspace.getCursor().setCurNode(this.curNode);\n        _speaker__WEBPACK_IMPORTED_MODULE_3__[\"speaker\"].cancel();\n      }\n    }\n    /**\n     * Add necessary handlers for any buttons on the modal.\n     */\n\n  }, {\n    key: \"addCallbacks\",\n    value: function addCallbacks() {\n      var _this3 = this;\n\n      document.getElementById(this.stepButtonId).addEventListener('click', function () {\n        _this3.nextStep();\n      });\n      document.getElementById(this.hideButtonId).addEventListener('click', function (e) {\n        micromodal__WEBPACK_IMPORTED_MODULE_2__[\"default\"].close(_this3.modalId);\n\n        _this3.popCursor();\n\n        Tutorial.STEP_OBJECTS[_this3.curStepIndex].onStart(_this3);\n\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n    /**\n     * Create the dom for the modal.\n     */\n\n  }, {\n    key: \"createDom\",\n    value: function createDom() {\n      document.getElementById(this.modalId).innerHTML = \"\\n     <div class=\\\"modal__overlay\\\" tabindex=\\\"-1\\\" data-micromodal-close>\\n      <div class=\\\"modal__container\\\" role=\\\"dialog\\\" aria-modal=\\\"true\\\"\\n        aria-labelledby=\\\"modal-1-title\\\">\\n        <header class=\\\"modal__header\\\">\\n          <button class=\\\"modal__close\\\" aria-label=\\\"Close modal\\\"\\n            id=\\\"tutorialCloseBtn\\\" data-micromodal-close></button>\\n        </header>\\n        <main class=\\\"modal__content\\\" id=\\\"modal-1-content\\\">\\n          <h2 class=\\\"modal__title\\\" id=\\\"\".concat(this.stepTextId, \"\\\"></h2>\\n        </main>\\n        <footer class=\\\"modal__footer\\\">\\n          <button class=\\\"modal__btn modal__btn-primary\\\" aria-label=\\\"Hide modal\\\"\\n            id=\\\"\").concat(this.hideButtonId, \"\\\">Hide modal</button>\\n          <button class=\\\"modal__btn modal__btn-primary\\\" aria-label=\\\"Next step\\\"\\n            id=\\\"\").concat(this.stepButtonId, \"\\\">Next step</button>\\n        </footer>\\n      </div>\\n    </div>\");\n    }\n    /**\n     * Get the current location, based on the event.\n     * @param {Blockly.Event} event An event to inspect for a cursor location.\n     * @return {Blockly.ASTNode} The current cursor location, or null if the event\n     *     didn't have one.\n     */\n\n  }, {\n    key: \"getCurrentLocation\",\n    value: function getCurrentLocation(event) {\n      var curNode = event.newNode;\n\n      if (curNode) {\n        return curNode.getLocation();\n      }\n\n      return null;\n    }\n  }]);\n\n  return Tutorial;\n}();\nTutorial.STEP_OBJECTS = [{\n  text: \"In this tutorial you will write code that plays musical notes. If at\\n      any point you are confused about what to do, press H to replay the goal\\n      for the current step. Press Enter to go to the next step.\",\n  goalText: \"Press Enter to go to the next step.\",\n  onStart: function onStart(tutorial) {\n    setTimeout(function () {\n      return tutorial.nextStep();\n    }, 100);\n  }\n}, {\n  text: \"You can move around the blocks of code with the up and down arrows.\\n    You will hear descriptions as you move around the blocks. .\\n    All blocks have connection points, which are places where you can add more\\n    code. . Use the down arrow to move to a connection point.\\n    Hit enter to begin. \",\n  goalText: \"Use the down arrow to move to a connection point.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Events.MARKER_MOVE) {\n        var curNode = event.newNode;\n        var correctLocation = workspace.getTopBlocks()[0].inputList[1].connection;\n\n        if (curNode) {\n          var location = curNode.getLocation();\n\n          if (location === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 4700);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You moved to a connection point. .\\n      To add more code, you first mark a location and then select the block you\\n      want to add. .\\n      Navigate to the connection point, then press enter to mark it.\",\n  goalText: \"Navigate to the connection point, then press enter to mark it.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Events.MARKER_MOVE) {\n        var currentLocation = tutorial.getCurrentLocation(event);\n\n        if (currentLocation && !event.isCursor) {\n          var correctLocation = workspace.getTopBlocks()[0].inputList[1].connection;\n\n          if (currentLocation === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 3000);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You marked a connection point. Now you can add more code\\n    blocks. .\\n    The toolbox is a list of code blocks that you can add to the workspace.\\n    You can always open the toolbox by pressing T. .\\n    Press T to open the toolbox, then use the up and down arrows to explore\\n    it. .\\n    Press ??? when you are ready for the next step.\",\n  goalText: \"Press T to open the toolbox, then use the up and down arrows to\\n      explore it. . Press ??? when you are ready for the next step.\",\n  onStart: function onStart(tutorial) {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    var finishStep = {\n      name: 'finishStep',\n      preconditionFn: function preconditionFn(workspace) {\n        return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n      },\n      callback: function callback() {\n        tutorial.nextStep();\n      }\n    };\n    blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.register(finishStep);\n    var shiftW = blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.utils.KeyCodes.F);\n    blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.ShortcutRegistry.registry.addKeyMapping(shiftW, finishStep.name);\n  }\n}, {\n  text: \"Great! You have now successfully marked a connection point and\\n    navigated to a list of blocks that you can insert. .\\n    Now it\\u2019s time to put it all together. .\\n    Navigate to the connection and mark it, then press T to open the\\n    toolbox. Find the block that says \\u201Cplay whole note c4\\u201D and press\\n    enter to add it at the marked location.\",\n  goalText: \"Navigate to the connection and mark it, then press T to open the\\n    toolbox. Find the block that says \\u201Cplay whole note c4\\u201D and press\\n    enter to add it at the marked location.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_1___default.a.Events.MARKER_MOVE) {\n        var currentLocation = tutorial.getCurrentLocation(event);\n\n        if (currentLocation && event.isCursor && workspace.getAllBlocks().length > 1) {\n          var correctLocation = workspace.getAllBlocks()[1].previousConnection;\n\n          if (currentLocation === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 4000);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You can now press Shift and P at the same time to run your\\n    code. You should hear a note play!\",\n  goalText: \"Press Shift and P at the same time to run your code.\",\n  onStart: function onStart(tutorial) {}\n}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/tutorial.js\n");

/***/ })

})
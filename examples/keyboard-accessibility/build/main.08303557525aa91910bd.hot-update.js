webpackHotUpdate("main",{

/***/ "./src/overrides.js":
/*!**************************!*\
  !*** ./src/overrides.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a line cursor.\n * A line cursor traverses the blocks as if they were\n * lines of code in a text editor.\n * Previous and next go up and down lines. In and out go\n * through the elements in a line.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n\n\nfunction _readOnlyError(name) { throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\"); }\n\n\n\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.handleEnterForWS_ = function (workspace) {\n  var cursor = workspace.getCursor();\n  var curNode = cursor.getCurNode();\n  var nodeType = curNode.getType();\n\n  if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD && curNode.getLocation().isClickable()) {\n    // TODO: Had to override so I could add this speaker in.\n    _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak('Use next and previous to read off your options.');\n\n    /** @type {!Blockly.Field} */\n    curNode.getLocation().showEditor();\n  } else if (curNode.isConnection() || nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.markAtCursor_();\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a block.');\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a stack.');\n  }\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.prototype.onBlocklyAction = function (action) {\n  var fieldNextOptions = 'To select this option hit enter';\n\n  if (this.menu_) {\n    switch (action.name) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.PREVIOUS:\n        this.menu_.highlightPrevious();\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(fieldNextOptions);\n        return true;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.NEXT:\n        this.menu_.highlightNext(); // TODO: Needed to override so that I could speak out the location when\n        // it changes.\n\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(fieldNextOptions);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  return blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.superClass_.onBlocklyAction.call(this, action);\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.prototype.toString = function (opt_maxLength, opt_emptyToken) {\n  var text = [];\n  var emptyFieldPlaceholder = opt_emptyToken || '?'; // Temporarily set flag to navigate to all fields.\n\n  var prevNavigateFields = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS;\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = true;\n  var node = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.createBlockNode(this);\n  var rootNode = node;\n  /**\n   * Whether or not to add parentheses around an input.\n   * @param {!Blockly.Connection} connection The connection.\n   * @return {boolean} True if we should add parentheses around the input.\n   */\n\n  function shouldAddParentheses(connection) {\n    var checks = connection.getCheck();\n\n    if (!checks && connection.targetConnection) {\n      checks = connection.targetConnection.getCheck();\n    }\n\n    return !!checks && (checks.indexOf('Boolean') != -1 || checks.indexOf('Number') != -1);\n  }\n  /**\n   * Check that we haven't circled back to the original root node.\n   */\n\n\n  function checkRoot() {\n    if (node && node.getType() == rootNode.getType() && node.getLocation() == rootNode.getLocation()) {\n      node = null;\n    }\n  }\n\n  var connection = null;\n  var field = null; // Traverse the AST building up our text string.\n\n  while (node) {\n    switch (node.getType()) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n        connection =\n        /** @type {!Blockly.Connection} */\n        node.getLocation();\n\n        if (!node.in()) {\n          text.push(emptyFieldPlaceholder);\n        } else if (shouldAddParentheses(connection)) {\n          text.push('(');\n        }\n\n        break;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n        field =\n        /** @type {Blockly.Field} */\n        node.getLocation();\n\n        if (field.name != blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.COLLAPSED_FIELD_NAME) {\n          text.push(field.getText());\n        }\n\n        break;\n    }\n\n    var current = node;\n    node = current.in() || current.next(); // TODO: This only works in our specific use case of having a block with a\n    // single statement connection.\n\n    if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && node.getLocation().type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n      node = null;\n    }\n\n    if (!node) {\n      // Can't go in or next, keep going out until we can go next.\n      node = current.out();\n      checkRoot();\n\n      while (node && !node.next()) {\n        node = node.out();\n        checkRoot(); // If we hit an input on the way up, possibly close out parentheses.\n\n        if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && shouldAddParentheses(\n        /** @type {!Blockly.Connection} */\n        node.getLocation())) {\n          text.push(')');\n        }\n      }\n\n      if (node) {\n        node = node.next();\n      }\n    }\n  } // Restore state of NAVIGATE_ALL_FIELDS.\n\n\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = prevNavigateFields; // Run through our text array and simplify expression to remove parentheses\n  // around single field blocks.\n\n  for (var i = 2, l = text.length; i < l; i++) {\n    if (text[i - 2] == '(' && text[i] == ')') {\n      text[i - 2] = text[i - 1];\n      text.splice(i - 1, 2);\n      l -= 2;\n    }\n  } // Join the text array, removing spaces around added paranthesis.\n\n\n  text = (_readOnlyError(\"text\"), text.join(' ').replace(/(\\() | (\\))/gmi, '$1$2').trim() || '???');\n\n  if (opt_maxLength) {\n    // TODO: Improve truncation so that text from this block is given priority.\n    // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\n    // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\n    if (text.length > opt_maxLength) {\n      text = (_readOnlyError(\"text\"), text.substring(0, opt_maxLength - 3) + '...');\n    }\n  }\n\n  return text;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/overrides.js\n");

/***/ })

})
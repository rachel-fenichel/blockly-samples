webpackHotUpdate("main",{

/***/ "./src/speaker.js":
/*!************************!*\
  !*** ./src/speaker.js ***!
  \************************/
/*! exports provided: Speaker, speaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Speaker\", function() { return Speaker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"speaker\", function() { return speaker; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Speaker used for speaking out text.\n */\n\n/**\n * Convenience methods for speaking out text.\n * More information on speakers can be found here:\n * https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis.\n */\n\nvar Speaker = /*#__PURE__*/function () {\n  /**\n   * Constructor for a speaker.\n   * @param {SpeakerMessages=} optMessages Optional messages for the speaker.\n   */\n  function Speaker(optMessages) {\n    _classCallCheck(this, Speaker);\n\n    var messages = {\n      'MAIN_WS': 'On the main workspace',\n      'STACK': 'To go to the last block in the previous group of blocks, press' + 'previous. To go to the first block in the stack hit next.',\n      'PREVIOUS': 'You are on a connection before, ',\n      'NEXT': 'On a connection after, ',\n      'OUTPUT': 'On an output connection. ',\n      'CONNECTION': 'At a connection point.',\n      'BLOCK': 'On a block of type',\n      'CLICKABLE_FIELD': 'To interact with the field hit enter.',\n      'EMPTY_TOKEN': 'blank',\n      'MARK_CONNECTION': 'To mark the block press enter. ',\n      'EXIT_EDIT_MODE': 'To exit edit mode hit escape. '\n    };\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.object.mixin(messages, optMessages);\n    this.setLocale(messages);\n    this.noOverrides = false;\n  }\n  /**\n   * The messages to be read out by a screen reader.\n   * @typedef {{\n   *     MAIN_WS: string,\n   *     STACK: string,\n   *     PREVIOUS: string,\n   *     NEXT: string,\n   *     OUTPUT: string,\n   *     CONNECTION: string,\n   *     BLOCK: string,\n   *     EMPTY_TOKEN: string,\n   *     MARK_CONNECTION: string,\n   * }} SpeakerMessages\n   */\n\n  /**\n   * Set the messages for the speaker.\n   * @param {!SpeakerMessages} messages The messages needed to create a speaker.\n   */\n\n\n  _createClass(Speaker, [{\n    key: \"setLocale\",\n    value: function setLocale(messages) {\n      Object.keys(messages).forEach(function (k) {\n        blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg[k] = messages[k];\n      });\n    }\n    /**\n     * Speaks out the text that was given to it.\n     * @param {string} text The text to speak out.\n     * @param {boolean=} shouldCancel True to stop the current utterance, false to\n     *     wait until the current utterance is done before speaking.\n     * @param {function=} onEnd The function to run after the text has been\n     *     spoken.\n     * @param {function=} onStart The function run when the text has begun to\n     *     be spoken.\n     * @public\n     */\n\n  }, {\n    key: \"speak\",\n    value: function speak(text, shouldCancel, onEnd, onStart) {\n      var audio = new SpeechSynthesisUtterance(text);\n\n      if (shouldCancel && !this.noOverrides && window.speechSynthesis.speaking) {\n        window.speechSynthesis.cancel();\n      }\n\n      if (onEnd) {\n        audio.onend = onEnd;\n      }\n\n      if (onStart) {\n        audio.onstart = onStart;\n      }\n\n      window.speechSynthesis.speak(audio);\n    }\n    /**\n     * Clears out the queue of text to speak.\n     * @public\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      window.speechSynthesis.cancel();\n    }\n    /**\n     * Pauses speaking.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      window.speechSynthesis.pause();\n    }\n    /**\n     * Resumes speaking.\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      window.speechSynthesis.resume();\n    }\n    /**\n     * Speaks out text if the event is of type marker or cursor move.\n     * @param {!Blockly.Events} event The event to speak out.\n     */\n\n  }, {\n    key: \"nodeToSpeech\",\n    value: function nodeToSpeech(event) {\n      // TODO: Update this if we link to the current version of blockly.\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Events.MARKER_MOVE) {\n        var nodeText = this.nodeToText_(event.newNode, event.oldNode, !event.isCursor);\n\n        if (!event.isCursor) {\n          nodeText = \"You have marked a location. To find a new block to connect\\n        to this location hit T. ! . To insert a block on the workspace,\\n        find the location of the block and hit I. \";\n        }\n\n        this.speak(nodeText, true);\n      }\n    }\n    /**\n     * Speaks out the text for a modal.\n     * @param {Element} modal The modal to collect the text to read out.\n     * @public\n     */\n\n  }, {\n    key: \"modalToText\",\n    value: function modalToText(modal) {\n      var header = modal.querySelector('header');\n      var headerText = header.textContent.trim();\n\n      if (headerText !== '') {\n        this.speak(headerText);\n      }\n\n      this.addButtonListeners_(header.querySelectorAll('button'));\n      var mainText = modal.querySelector('main').textContent.trim();\n\n      if (mainText !== '') {\n        this.speak(mainText);\n      }\n\n      var footerBtns = modal.querySelector('footer').querySelectorAll('button');\n      this.addButtonListeners_(footerBtns);\n    }\n    /**\n     * Adds listeners for when the button is focused.\n     * @param {!NodeList} btns The buttons to add listeners to.\n     * @private\n     */\n\n  }, {\n    key: \"addButtonListeners_\",\n    value: function addButtonListeners_(btns) {\n      var _this = this;\n\n      var _iterator = _createForOfIteratorHelper(btns),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var btn = _step.value;\n          btn.addEventListener('focus', function () {\n            _this.buttonToSpeech_(btns, btn, true);\n          });\n\n          if (document.activeElement === btn) {\n            _this.buttonToSpeech_(btns, btn, false);\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Speaks out information about a button.\n     * @param {NodeList} btns The list of buttons on the modal.\n     * @param {Element} btn The button.\n     * @param {boolean} shouldCancel True if this should cancel the previous\n     *     utterance.\n     * @private\n     */\n\n  }, {\n    key: \"buttonToSpeech_\",\n    value: function buttonToSpeech_(btns, btn, shouldCancel) {\n      this.speak('Hit enter to ', shouldCancel);\n\n      if (btn.textContent === '') {\n        this.speak(btn.getAttribute('aria-label'));\n      } else {\n        this.speak(btn.textContent);\n      }\n\n      if (btns.length > 0) {\n        this.speak('Hit tab to go to your next option');\n      }\n    }\n    /**\n     * Speaks out an audio representation of the given node.\n     * @param {Blockly.ASTNode} node The node to speak out.\n     * @param {Blockly.ASTNode} oldNode The previous node to speak out.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text representation of the node.\n     * @public\n     */\n\n  }, {\n    key: \"nodeToText_\",\n    value: function nodeToText_(node, oldNode, isMarker) {\n      var finalText = '';\n\n      switch (node.getType()) {\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n          finalText = this.fieldNodeToText_(node);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK:\n          finalText = this.blockNodeToText_(node);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n          finalText = this.inputNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.OUTPUT:\n          finalText = this.outputNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.NEXT:\n          finalText = this.nextNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.PREVIOUS:\n          finalText = this.previousNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK:\n          finalText = this.stackNodeToText_(node, oldNode);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE:\n          finalText = this.workspaceNodeToText_(node);\n          break;\n\n        default:\n          return node.toString();\n      }\n\n      finalText += this.getNextOptions_(node, oldNode, isMarker);\n      return finalText;\n    }\n    /**\n     * Gets text explaining the next options available for a user.\n     * @param {!Blockly.ASTNode} node The current node.\n     * @param {!Blockly.ASTNode} oldNode The previous node.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} Text explaining next options for the field.\n     * @private\n     */\n\n  }, {\n    key: \"getNextOptions_\",\n    value: function getNextOptions_(node, oldNode, isMarker) {\n      switch (node.getType()) {\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n          return this.getFieldOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK:\n          return this.getBlockOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.OUTPUT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.NEXT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.PREVIOUS:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK:\n          return this.getStackOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE:\n          return '';\n\n        default:\n          return node.toString();\n      }\n    }\n    /**\n     * Gets the next options for when a user is on a field.\n     * This is to open the field or to change locations.\n     * @param {!Blockly.ASTNode} node The field node.\n     * @return {string} The text explaining the next options when a user is on a\n     *     field.\n     * @private\n     */\n\n  }, {\n    key: \"getFieldOptions_\",\n    value: function getFieldOptions_(node) {\n      var field = node.getLocation();\n\n      if (field.isClickable()) {\n        return \"To interact with the field hit enter. Use the next or previous\\n      keys to change locations. \";\n      } else {\n        return 'Use the next or previous keys to change locations. ';\n      }\n    }\n    /**\n     * Gets the next options for when a user is on a block.\n     * @return {string} The text explaining the next options for a block.\n     * @private\n     */\n\n  }, {\n    key: \"getBlockOptions_\",\n    value: function getBlockOptions_() {\n      return \"Use the next or previous keys to change locations. \";\n    }\n    /**\n     * Gets the text for the connection point.\n     * @param {!Blockly.ASTNode} node The connection node.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} The text explaining the next options when a user is on a\n     *     connection.\n     * @private\n     */\n\n  }, {\n    key: \"getConnectionOptions_\",\n    value: function getConnectionOptions_(node, isMarker) {\n      var markerText = \". To mark this location, hit enter. To change locations use the next or previous keys\";\n      var finalText = '';\n\n      if (!isMarker) {\n        finalText += \"\".concat(markerText);\n      }\n\n      return finalText;\n    }\n    /**\n     * Gets the options for a user on a  stack of blocks.\n     * @return {string} The text explaining the next options when a user is on a\n     *     stack of blocks.\n     * @private\n     */\n\n  }, {\n    key: \"getStackOptions_\",\n    value: function getStackOptions_(node) {\n      var finalText = '';\n\n      if (node.prev()) {\n        finalText += \"To go to the last block in the previous group of blocks,\\n      press previous.\";\n      }\n\n      finalText += \" To go to the first block in the stack hit next.\";\n      return finalText;\n    }\n    /**\n     * Get the text for the source block of the node.\n     * @param {!Blockly.BlockSvg} srcBlock The block to get the text for.\n     * @param {string=} opt_emptyToken The optional empty token.\n     * @return {string} The text describing the source block of the node.\n     * @private\n     */\n\n  }, {\n    key: \"getBlockText_\",\n    value: function getBlockText_(srcBlock, opt_emptyToken) {\n      var emptyToken = opt_emptyToken || blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['EMPTY_TOKEN'];\n\n      if (srcBlock) {\n        if (srcBlock.statementInputCount > 0) {\n          emptyToken = ' do blank ';\n        }\n\n        return srcBlock.toString(null, emptyToken);\n      } else {\n        return '';\n      }\n    }\n    /**\n     * Creates text for a feild.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"fieldNodeToText_\",\n    value: function fieldNodeToText_(node) {\n      var field = node.getLocation();\n      return field.getText() + '. ';\n    }\n    /**\n     * Creates text for a feild.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"blockNodeToText_\",\n    value: function blockNodeToText_(node) {\n      var block =\n      /** @type{Blockly.BlockSvg} */\n      node.getLocation();\n      var blockText = this.getBlockText_(block);\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"You are on , \".concat(blockText, \". . \");\n      return finalText;\n    }\n    /**\n     * Creates text for an input.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"inputNodeToText_\",\n    value: function inputNodeToText_(node, isMarker) {\n      var inputConnection =\n      /** @type{Blockly.Input} */\n      node.getLocation();\n      var connectionText = \"You are on a connection\";\n      var finalText = '';\n\n      if (inputConnection.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n        var blockText = this.getBlockText_(node.getSourceBlock());\n        finalText = \"Inside \".concat(blockText, \". \").concat(connectionText, \". \");\n      } else if (inputConnection.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.INPUT_VALUE) {\n        var _blockText = this.getBlockText_(node.getSourceBlock(), ' ');\n\n        finalText = \"\".concat(connectionText, \" after \").concat(_blockText);\n      }\n\n      return finalText;\n    }\n    /**\n     * Creates text for a output connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"outputNodeToText_\",\n    value: function outputNodeToText_(node) {\n      var blockText = this.getBlockText_(node.getSourceBlock());\n      return \"You are on a connection for block, \".concat(blockText);\n    }\n    /**\n     * Creates text for a next connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"nextNodeToText_\",\n    value: function nextNodeToText_(node, isMarker) {\n      var block = node.getSourceBlock();\n      var blockText = this.getBlockText_(node.getSourceBlock());\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"\".concat(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['NEXT'], \" \").concat(blockText);\n      return finalText;\n    }\n    /**\n     * Creates text for a previous connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"previousNodeToText_\",\n    value: function previousNodeToText_(node, isMarker) {\n      var block = node.getSourceBlock();\n      var blockText = this.getBlockText_(block);\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"\".concat(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['PREVIOUS'], \" \").concat(blockText);\n      return finalText;\n    }\n    /**\n     * Creates text for a stack of blocks.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {!Blockly.ASTNode} oldNode The previous node.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"stackNodeToText_\",\n    value: function stackNodeToText_(node, oldNode) {\n      var srcBlock = node.getSourceBlock();\n      var newNodeTopBlock = srcBlock.getTopStackBlock();\n      var oldNodeTopBlock = null;\n\n      if (oldNode && oldNode.getSourceBlock()) {\n        oldNodeTopBlock = oldNode.getSourceBlock().getTopStackBlock();\n      }\n\n      var finalText = '';\n\n      if (srcBlock && srcBlock.workspace.isFlyout) {\n        finalText = this.getBlockText_(node.getSourceBlock());\n        finalText += \" . . To add this block to the workspace press Enter. .\\n      To go to the next block hit next. . To go back to the workspace\\n      hit escape. \";\n      } else if (srcBlock) {\n        if (oldNodeTopBlock !== newNodeTopBlock) {\n          finalText += \"You are on a new group of blocks. \";\n        } else {\n          finalText += \"You are on a group of blocks. \";\n        }\n      }\n\n      return finalText;\n    }\n    /**\n     * Creates text for a workspace.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"workspaceNodeToText_\",\n    value: function workspaceNodeToText_(node) {\n      var workspace =\n      /** @type{Blockly.WorkspaceSvg} */\n      node.getLocation(); // TODO: All text should be added to Blockly.Msg to allow for translation.\n\n      var text = null;\n\n      if (workspace.isFlyout) {\n        text = 'In the flyout, please select a block';\n      } else if (workspace.isMutator) {\n        text = 'In the mutator workspace, use this workspace to change a block';\n      } else {\n        text = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['MAIN_WS'];\n      }\n\n      return text;\n    }\n  }]);\n\n  return Speaker;\n}();\nvar speaker = new Speaker();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/speaker.js\n");

/***/ })

})
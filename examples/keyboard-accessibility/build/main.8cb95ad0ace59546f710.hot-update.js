webpackHotUpdate("main",{

/***/ "./src/overrides.js":
/*!**************************!*\
  !*** ./src/overrides.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a line cursor.\n * A line cursor traverses the blocks as if they were\n * lines of code in a text editor.\n * Previous and next go up and down lines. In and out go\n * through the elements in a line.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n\n\n\n\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.handleEnterForWS_ = function (workspace) {\n  var cursor = workspace.getCursor();\n  var curNode = cursor.getCurNode();\n  var nodeType = curNode.getType();\n\n  if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD && curNode.getLocation().isClickable()) {\n    // TODO: Had to override so I could add this speaker in.\n    _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak('Use next and previous to read off your options.', true);\n\n    /** @type {!Blockly.Field} */\n    curNode.getLocation().showEditor();\n  } else if (curNode.isConnection() || nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.markAtCursor_();\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a block.');\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a stack.');\n  }\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.prototype.onBlocklyAction = function (action) {\n  if (this.menu_) {\n    switch (action.name) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.PREVIOUS:\n        this.menu_.highlightPrevious();\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak('Press enter to select this option. ');\n        return true;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.NEXT:\n        this.menu_.highlightNext(); // TODO: Needed to override so that I could speak out the location when\n        // it changes.\n\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak('Press enter to select this option. ');\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  return blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.superClass_.onBlocklyAction.call(this, action);\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.prototype.toString = function (opt_maxLength, opt_emptyToken) {\n  var text = [];\n  var emptyFieldPlaceholder = opt_emptyToken || '?'; // Temporarily set flag to navigate to all fields.\n\n  var prevNavigateFields = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS;\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = true;\n  var node = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.createBlockNode(this);\n  var rootNode = node;\n  /**\n   * Whether or not to add parentheses around an input.\n   * @param {!Blockly.Connection} connection The connection.\n   * @return {boolean} True if we should add parentheses around the input.\n   */\n\n  function shouldAddParentheses(connection) {\n    var checks = connection.getCheck();\n\n    if (!checks && connection.targetConnection) {\n      checks = connection.targetConnection.getCheck();\n    }\n\n    return !!checks && (checks.indexOf('Boolean') != -1 || checks.indexOf('Number') != -1);\n  }\n  /**\n   * Check that we haven't circled back to the original root node.\n   */\n\n\n  function checkRoot() {\n    if (node && node.getType() == rootNode.getType() && node.getLocation() == rootNode.getLocation()) {\n      node = null;\n    }\n  }\n\n  var connection = null;\n  var field = null; // Traverse the AST building up our text string.\n\n  while (node) {\n    switch (node.getType()) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n        connection =\n        /** @type {!Blockly.Connection} */\n        node.getLocation();\n\n        if (!node.in()) {\n          text.push(emptyFieldPlaceholder);\n        } else if (shouldAddParentheses(connection)) {\n          text.push('(');\n        }\n\n        break;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n        field =\n        /** @type {Blockly.Field} */\n        node.getLocation();\n\n        if (field.name != blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.COLLAPSED_FIELD_NAME) {\n          text.push(field.getText());\n        }\n\n        break;\n    }\n\n    var current = node;\n    node = current.in() || current.next(); // TODO: This only works in our specific use case of having a block with a\n    // single statement connection.\n\n    if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && node.getLocation().type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n      node = null;\n    }\n\n    if (!node) {\n      // Can't go in or next, keep going out until we can go next.\n      node = current.out();\n      checkRoot();\n\n      while (node && !node.next()) {\n        node = node.out();\n        checkRoot(); // If we hit an input on the way up, possibly close out parentheses.\n\n        if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && shouldAddParentheses(\n        /** @type {!Blockly.Connection} */\n        node.getLocation())) {\n          text.push(')');\n        }\n      }\n\n      if (node) {\n        node = node.next();\n      }\n    }\n  } // Restore state of NAVIGATE_ALL_FIELDS.\n\n\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = prevNavigateFields; // Run through our text array and simplify expression to remove parentheses\n  // around single field blocks.\n\n  for (var i = 2, l = text.length; i < l; i++) {\n    if (text[i - 2] == '(' && text[i] == ')') {\n      text[i - 2] = text[i - 1];\n      text.splice(i - 1, 2);\n      l -= 2;\n    }\n  } // Join the text array, removing spaces around added paranthesis.\n\n\n  text = text.join(' ').replace(/(\\() | (\\))/gmi, '$1$2').trim() || '???';\n\n  if (opt_maxLength) {\n    // TODO: Improve truncation so that text from this block is given priority.\n    // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\n    // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\n    if (text.length > opt_maxLength) {\n      text = text.substring(0, opt_maxLength - 3) + '...';\n    }\n  }\n\n  return text;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcnJpZGVzLmpzPzFjYjQiXSwibmFtZXMiOlsiQmxvY2tseSIsIm5hdmlnYXRpb24iLCJoYW5kbGVFbnRlckZvcldTXyIsIndvcmtzcGFjZSIsImN1cnNvciIsImdldEN1cnNvciIsImN1ck5vZGUiLCJnZXRDdXJOb2RlIiwibm9kZVR5cGUiLCJnZXRUeXBlIiwiQVNUTm9kZSIsInR5cGVzIiwiRklFTEQiLCJnZXRMb2NhdGlvbiIsImlzQ2xpY2thYmxlIiwic3BlYWtlciIsInNwZWFrIiwic2hvd0VkaXRvciIsImlzQ29ubmVjdGlvbiIsIldPUktTUEFDRSIsIm1hcmtBdEN1cnNvcl8iLCJCTE9DSyIsIndhcm5fIiwiU1RBQ0siLCJGaWVsZERyb3Bkb3duIiwicHJvdG90eXBlIiwib25CbG9ja2x5QWN0aW9uIiwiYWN0aW9uIiwibWVudV8iLCJuYW1lIiwiYWN0aW9uTmFtZXMiLCJQUkVWSU9VUyIsImhpZ2hsaWdodFByZXZpb3VzIiwiaGlnaGxpZ2h0ZWRJdGVtXyIsImNvbnRlbnRfIiwiYWx0IiwiTkVYVCIsImhpZ2hsaWdodE5leHQiLCJzdXBlckNsYXNzXyIsImNhbGwiLCJCbG9jayIsInRvU3RyaW5nIiwib3B0X21heExlbmd0aCIsIm9wdF9lbXB0eVRva2VuIiwidGV4dCIsImVtcHR5RmllbGRQbGFjZWhvbGRlciIsInByZXZOYXZpZ2F0ZUZpZWxkcyIsIk5BVklHQVRFX0FMTF9GSUVMRFMiLCJub2RlIiwiY3JlYXRlQmxvY2tOb2RlIiwicm9vdE5vZGUiLCJzaG91bGRBZGRQYXJlbnRoZXNlcyIsImNvbm5lY3Rpb24iLCJjaGVja3MiLCJnZXRDaGVjayIsInRhcmdldENvbm5lY3Rpb24iLCJpbmRleE9mIiwiY2hlY2tSb290IiwiZmllbGQiLCJJTlBVVCIsImluIiwicHVzaCIsIkNPTExBUFNFRF9GSUVMRF9OQU1FIiwiZ2V0VGV4dCIsImN1cnJlbnQiLCJuZXh0IiwidHlwZSIsIk5FWFRfU1RBVEVNRU5UIiwib3V0IiwiaSIsImwiLCJsZW5ndGgiLCJzcGxpY2UiLCJqb2luIiwicmVwbGFjZSIsInRyaW0iLCJzdWJzdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWI7QUFDQTs7QUFHQUEsbURBQU8sQ0FBQ0MsVUFBUixDQUFtQkMsaUJBQW5CLEdBQXVDLFVBQVNDLFNBQVQsRUFBb0I7QUFDekQsTUFBTUMsTUFBTSxHQUFHRCxTQUFTLENBQUNFLFNBQVYsRUFBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsTUFBTSxDQUFDRyxVQUFQLEVBQWhCO0FBQ0EsTUFBTUMsUUFBUSxHQUFHRixPQUFPLENBQUNHLE9BQVIsRUFBakI7O0FBQ0EsTUFBSUQsUUFBUSxJQUFJUixtREFBTyxDQUFDVSxPQUFSLENBQWdCQyxLQUFoQixDQUFzQkMsS0FBbEMsSUFDQU4sT0FBTyxDQUFDTyxXQUFSLEdBQXNCQyxXQUF0QixFQURKLEVBQ3lDO0FBQ3ZDO0FBRUFDLG9EQUFPLENBQUNDLEtBQVIsQ0FBYyxpREFBZCxFQUFpRSxJQUFqRTs7QUFDQztBQUE4QlYsV0FBTyxDQUFDTyxXQUFSLEVBQS9CLENBQXVESSxVQUF2RDtBQUNELEdBTkQsTUFNTyxJQUFJWCxPQUFPLENBQUNZLFlBQVIsTUFDUFYsUUFBUSxJQUFJUixtREFBTyxDQUFDVSxPQUFSLENBQWdCQyxLQUFoQixDQUFzQlEsU0FEL0IsRUFDMEM7QUFDL0NuQix1REFBTyxDQUFDQyxVQUFSLENBQW1CbUIsYUFBbkI7QUFDRCxHQUhNLE1BR0EsSUFBSVosUUFBUSxJQUFJUixtREFBTyxDQUFDVSxPQUFSLENBQWdCQyxLQUFoQixDQUFzQlUsS0FBdEMsRUFBNkM7QUFDbERyQix1REFBTyxDQUFDQyxVQUFSLENBQW1CcUIsS0FBbkIsQ0FBeUIsc0JBQXpCO0FBQ0QsR0FGTSxNQUVBLElBQUlkLFFBQVEsSUFBSVIsbURBQU8s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LFVBQUksQ0FBQzRCLE1BQUwsQ0FBWUgsQ0FBQyxHQUFHLENBQWhCLEVBQW1CLENBQW5CO0FBQ0FDLE9BQUMsSUFBSSxDQUFMO0FBQ0Q7QUFDRixHQS9Gd0UsQ0FpR3pFOzs7QUFDQTFCLE1BQUksR0FBR0EsSUFBSSxDQUFDNkIsSUFBTCxDQUFVLEdBQVYsRUFBZUMsT0FBZixDQUF1QixnQkFBdkIsRUFBeUMsTUFBekMsRUFBaURDLElBQWpELE1BQTJELEtBQWxFOztBQUNBLE1BQUlqQyxhQUFKLEVBQW1CO0FBQ2pCO0FBQ0E7QUFDRjtBQUNFLFFBQUlFLElBQUksQ0FBQzJCLE1BQUwsR0FBYzdCLGFBQWxCLEVBQWlDO0FBQy9CRSxVQUFJLEdBQUdBLElBQUksQ0FBQ2dDLFNBQUwsQ0FBZSxDQUFmLEVBQWtCbEMsYUFBYSxHQUFHLENBQWxDLElBQXVDLEtBQTlDO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPRSxJQUFQO0FBQ0QsQ0E1R0QiLCJmaWxlIjoiLi9zcmMvb3ZlcnJpZGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhlIGNsYXNzIHJlcHJlc2VudGluZyBhIGxpbmUgY3Vyc29yLlxuICogQSBsaW5lIGN1cnNvciB0cmF2ZXJzZXMgdGhlIGJsb2NrcyBhcyBpZiB0aGV5IHdlcmVcbiAqIGxpbmVzIG9mIGNvZGUgaW4gYSB0ZXh0IGVkaXRvci5cbiAqIFByZXZpb3VzIGFuZCBuZXh0IGdvIHVwIGFuZCBkb3duIGxpbmVzLiBJbiBhbmQgb3V0IGdvXG4gKiB0aHJvdWdoIHRoZSBlbGVtZW50cyBpbiBhIGxpbmUuXG4gKiBAYXV0aG9yIGFzY2htaWVkdEBnb29nbGUuY29tIChBYmJ5IFNjaG1pZWR0KVxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBCbG9ja2x5IGZyb20gJ2Jsb2NrbHkvY29yZSc7XG5pbXBvcnQge3NwZWFrZXJ9IGZyb20gJy4vc3BlYWtlcic7XG5cblxuQmxvY2tseS5uYXZpZ2F0aW9uLmhhbmRsZUVudGVyRm9yV1NfID0gZnVuY3Rpb24od29ya3NwYWNlKSB7XG4gIGNvbnN0IGN1cnNvciA9IHdvcmtzcGFjZS5nZXRDdXJzb3IoKTtcbiAgY29uc3QgY3VyTm9kZSA9IGN1cnNvci5nZXRDdXJOb2RlKCk7XG4gIGNvbnN0IG5vZGVUeXBlID0gY3VyTm9kZS5nZXRUeXBlKCk7XG4gIGlmIChub2RlVHlwZSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuRklFTEQgJiZcbiAgICAgIGN1ck5vZGUuZ2V0TG9jYXRpb24oKS5pc0NsaWNrYWJsZSgpKSB7XG4gICAgLy8gVE9ETzogSGFkIHRvIG92ZXJyaWRlIHNvIEkgY291bGQgYWRkIHRoaXMgc3BlYWtlciBpbi5cblxuICAgIHNwZWFrZXIuc3BlYWsoJ1VzZSBuZXh0IGFuZCBwcmV2aW91cyB0byByZWFkIG9mZiB5b3VyIG9wdGlvbnMuJywgdHJ1ZSk7XG4gICAgKC8qKiBAdHlwZSB7IUJsb2NrbHkuRmllbGR9ICovKGN1ck5vZGUuZ2V0TG9jYXRpb24oKSkpLnNob3dFZGl0b3IoKTtcbiAgfSBlbHNlIGlmIChjdXJOb2RlLmlzQ29ubmVjdGlvbigpIHx8XG4gICAgICBub2RlVHlwZSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuV09SS1NQQUNFKSB7XG4gICAgQmxvY2tseS5uYXZpZ2F0aW9uLm1hcmtBdEN1cnNvcl8oKTtcbiAgfSBlbHNlIGlmIChub2RlVHlwZSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuQkxPQ0spIHtcbiAgICBCbG9ja2x5Lm5hdmlnYXRpb24ud2Fybl8oJ0Nhbm5vdCBtYXJrIGEgYmxvY2suJyk7XG4gIH0gZWxzZSBpZiAobm9kZVR5cGUgPT0gQmxvY2tseS5BU1ROb2RlLnR5cGVzLlNUQUNLKSB7XG4gICAgQmxvY2tseS5uYXZpZ2F0aW9uLndhcm5fKCdDYW5ub3QgbWFyayBhIHN0YWNrLicpO1xuICB9XG59O1xuXG5cbkJsb2NrbHkuRmllbGREcm9wZG93bi5wcm90b3R5cGUub25CbG9ja2x5QWN0aW9uID0gZnVuY3Rpb24oYWN0aW9uKSB7XG4gIGlmICh0aGlzLm1lbnVfKSB7XG4gICAgc3dpdGNoIChhY3Rpb24ubmFtZSkge1xuICAgICAgY2FzZSBCbG9ja2x5Lm5hdmlnYXRpb24uYWN0aW9uTmFtZXMuUFJFVklPVVM6XG4gICAgICAgIHRoaXMubWVudV8uaGlnaGxpZ2h0UHJldmlvdXMoKTtcbiAgICAgICAgc3BlYWtlci5zcGVhayh0aGlzLm1lbnVfLmhpZ2hsaWdodGVkSXRlbV8uY29udGVudF8uYWx0LCB0cnVlKTtcbiAgICAgICAgc3BlYWtlci5zcGVhaygnUHJlc3MgZW50ZXIgdG8gc2VsZWN0IHRoaXMgb3B0aW9uLiAnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlIEJsb2NrbHkubmF2aWdhdGlvbi5hY3Rpb25OYW1lcy5ORVhUOlxuICAgICAgICB0aGlzLm1lbnVfLmhpZ2hsaWdodE5leHQoKTtcbiAgICAgICAgLy8gVE9ETzogTmVlZGVkIHRvIG92ZXJyaWRlIHNvIHRoYXQgSSBjb3VsZCBzcGVhayBvdXQgdGhlIGxvY2F0aW9uIHdoZW5cbiAgICAgICAgLy8gaXQgY2hhbmdlcy5cbiAgICAgICAgc3BlYWtlci5zcGVhayh0aGlzLm1lbnVfLmhpZ2hsaWdodGVkSXRlbV8uY29udGVudF8uYWx0LCB0cnVlKTtcbiAgICAgICAgc3BlYWtlci5zcGVhaygnUHJlc3MgZW50ZXIgdG8gc2VsZWN0IHRoaXMgb3B0aW9uLiAnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBCbG9ja2x5LkZpZWxkRHJvcGRvd24uc3VwZXJDbGFzc18ub25CbG9ja2x5QWN0aW9uLmNhbGwodGhpcywgYWN0aW9uKTtcbn07XG5cblxuQmxvY2tseS5CbG9jay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRfbWF4TGVuZ3RoLCBvcHRfZW1wdHlUb2tlbikge1xuICBsZXQgdGV4dCA9IFtdO1xuICBjb25zdCBlbXB0eUZpZWxkUGxhY2Vob2xkZXIgPSBvcHRfZW1wdHlUb2tlbiB8fCAnPyc7XG5cbiAgLy8gVGVtcG9yYXJpbHkgc2V0IGZsYWcgdG8gbmF2aWdhdGUgdG8gYWxsIGZpZWxkcy5cbiAgY29uc3QgcHJldk5hdmlnYXRlRmllbGRzID0gQmxvY2tseS5BU1ROb2RlLk5BVklHQVRFX0FMTF9GSUVMRFM7XG4gIEJsb2NrbHkuQVNUTm9kZS5OQVZJR0FURV9BTExfRklFTERTID0gdHJ1ZTtcblxuICBsZXQgbm9kZSA9IEJsb2NrbHkuQVNUTm9kZS5jcmVhdGVCbG9ja05vZGUodGhpcyk7XG4gIGNvbnN0IHJvb3ROb2RlID0gbm9kZTtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gYWRkIHBhcmVudGhlc2VzIGFyb3VuZCBhbiBpbnB1dC5cbiAgICogQHBhcmFtIHshQmxvY2tseS5Db25uZWN0aW9ufSBjb25uZWN0aW9uIFRoZSBjb25uZWN0aW9uLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHdlIHNob3VsZCBhZGQgcGFyZW50aGVzZXMgYXJvdW5kIHRoZSBpbnB1dC5cbiAgICovXG4gIGZ1bmN0aW9uIHNob3VsZEFkZFBhcmVudGhlc2VzKGNvbm5lY3Rpb24pIHtcbiAgICBsZXQgY2hlY2tzID0gY29ubmVjdGlvbi5nZXRDaGVjaygpO1xuICAgIGlmICghY2hlY2tzICYmIGNvbm5lY3Rpb24udGFyZ2V0Q29ubmVjdGlvbikge1xuICAgICAgY2hlY2tzID0gY29ubmVjdGlvbi50YXJnZXRDb25uZWN0aW9uLmdldENoZWNrKCk7XG4gICAgfVxuICAgIHJldHVybiAhIWNoZWNrcyAmJiAoY2hlY2tzLmluZGV4T2YoJ0Jvb2xlYW4nKSAhPSAtMSB8fFxuICAgICAgICBjaGVja3MuaW5kZXhPZignTnVtYmVyJykgIT0gLTEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoYXQgd2UgaGF2ZW4ndCBjaXJjbGVkIGJhY2sgdG8gdGhlIG9yaWdpbmFsIHJvb3Qgbm9kZS5cbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdCgpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLmdldFR5cGUoKSA9PSByb290Tm9kZS5nZXRUeXBlKCkgJiZcbiAgICAgICAgbm9kZS5nZXRMb2NhdGlvbigpID09IHJvb3ROb2RlLmdldExvY2F0aW9uKCkpIHtcbiAgICAgIG5vZGUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBsZXQgY29ubmVjdGlvbiA9IG51bGw7XG4gIGxldCBmaWVsZCA9IG51bGw7XG5cbiAgLy8gVHJhdmVyc2UgdGhlIEFTVCBidWlsZGluZyB1cCBvdXIgdGV4dCBzdHJpbmcuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLmdldFR5cGUoKSkge1xuICAgICAgY2FzZSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuSU5QVVQ6XG4gICAgICAgIGNvbm5lY3Rpb24gPSAvKiogQHR5cGUgeyFCbG9ja2x5LkNvbm5lY3Rpb259ICovIChub2RlLmdldExvY2F0aW9uKCkpO1xuICAgICAgICBpZiAoIW5vZGUuaW4oKSkge1xuICAgICAgICAgIHRleHQucHVzaChlbXB0eUZpZWxkUGxhY2Vob2xkZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHNob3VsZEFkZFBhcmVudGhlc2VzKGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgdGV4dC5wdXNoKCcoJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEJsb2NrbHkuQVNUTm9kZS50eXBlcy5GSUVMRDpcbiAgICAgICAgZmllbGQgPSAvKiogQHR5cGUge0Jsb2NrbHkuRmllbGR9ICovIChub2RlLmdldExvY2F0aW9uKCkpO1xuICAgICAgICBpZiAoZmllbGQubmFtZSAhPSBCbG9ja2x5LkJsb2NrLkNPTExBUFNFRF9GSUVMRF9OQU1FKSB7XG4gICAgICAgICAgdGV4dC5wdXNoKGZpZWxkLmdldFRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudCA9IG5vZGU7XG4gICAgbm9kZSA9IGN1cnJlbnQuaW4oKSB8fCBjdXJyZW50Lm5leHQoKTtcbiAgICAvLyBUT0RPOiBUaGlzIG9ubHkgd29ya3MgaW4gb3VyIHNwZWNpZmljIHVzZSBjYXNlIG9mIGhhdmluZyBhIGJsb2NrIHdpdGggYVxuICAgIC8vIHNpbmdsZSBzdGF0ZW1lbnQgY29ubmVjdGlvbi5cbiAgICBpZiAobm9kZSAmJiBub2RlLmdldFR5cGUoKSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuSU5QVVQgJiZcbiAgICAgICAgbm9kZS5nZXRMb2NhdGlvbigpLnR5cGUgPT09IEJsb2NrbHkuTkVYVF9TVEFURU1FTlQpIHtcbiAgICAgIG5vZGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIC8vIENhbid0IGdvIGluIG9yIG5leHQsIGtlZXAgZ29pbmcgb3V0IHVudGlsIHdlIGNhbiBnbyBuZXh0LlxuICAgICAgbm9kZSA9IGN1cnJlbnQub3V0KCk7XG4gICAgICBjaGVja1Jvb3QoKTtcbiAgICAgIHdoaWxlIChub2RlICYmICFub2RlLm5leHQoKSkge1xuICAgICAgICBub2RlID0gbm9kZS5vdXQoKTtcbiAgICAgICAgY2hlY2tSb290KCk7XG4gICAgICAgIC8vIElmIHdlIGhpdCBhbiBpbnB1dCBvbiB0aGUgd2F5IHVwLCBwb3NzaWJseSBjbG9zZSBvdXQgcGFyZW50aGVzZXMuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZ2V0VHlwZSgpID09IEJsb2NrbHkuQVNUTm9kZS50eXBlcy5JTlBVVCAmJlxuICAgICAgICAgICAgc2hvdWxkQWRkUGFyZW50aGVzZXMoXG4gICAgICAgICAgICAgICAgLyoqIEB0eXBlIHshQmxvY2tseS5Db25uZWN0aW9ufSAqLyAobm9kZS5nZXRMb2NhdGlvbigpKSkpIHtcbiAgICAgICAgICB0ZXh0LnB1c2goJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlc3RvcmUgc3RhdGUgb2YgTkFWSUdBVEVfQUxMX0ZJRUxEUy5cbiAgQmxvY2tseS5BU1ROb2RlLk5BVklHQVRFX0FMTF9GSUVMRFMgPSBwcmV2TmF2aWdhdGVGaWVsZHM7XG5cbiAgLy8gUnVuIHRocm91Z2ggb3VyIHRleHQgYXJyYXkgYW5kIHNpbXBsaWZ5IGV4cHJlc3Npb24gdG8gcmVtb3ZlIHBhcmVudGhlc2VzXG4gIC8vIGFyb3VuZCBzaW5nbGUgZmllbGQgYmxvY2tzLlxuICBmb3IgKGxldCBpID0gMiwgbCA9IHRleHQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHRleHRbaSAtIDJdID09ICcoJyAmJiB0ZXh0W2ldID09ICcpJykge1xuICAgICAgdGV4dFtpIC0gMl0gPSB0ZXh0W2kgLSAxXTtcbiAgICAgIHRleHQuc3BsaWNlKGkgLSAxLCAyKTtcbiAgICAgIGwgLT0gMjtcbiAgICB9XG4gIH1cblxuICAvLyBKb2luIHRoZSB0ZXh0IGFycmF5LCByZW1vdmluZyBzcGFjZXMgYXJvdW5kIGFkZGVkIHBhcmFudGhlc2lzLlxuICB0ZXh0ID0gdGV4dC5qb2luKCcgJykucmVwbGFjZSgvKFxcKCkgfCAoXFwpKS9nbWksICckMSQyJykudHJpbSgpIHx8ICc/Pz8nO1xuICBpZiAob3B0X21heExlbmd0aCkge1xuICAgIC8vIFRPRE86IEltcHJvdmUgdHJ1bmNhdGlvbiBzbyB0aGF0IHRleHQgZnJvbSB0aGlzIGJsb2NrIGlzIGdpdmVuIHByaW9yaXR5LlxuICAgIC8vIEUuZy4gXCIxKzIrMys0KzUrNis3KzgrOT0wXCIgc2hvdWxkIGJlIFwiLi4uNis3KzgrOT0wXCIsIG5vdCBcIjErMiszKzQrNS4uLlwiLlxuICAvLyBFLmcuIFwiMSsyKzMrNCs1PTYrNys4KzkrMFwiIHNob3VsZCBiZSBcIi4uLjQrNT02KzcuLi5cIi5cbiAgICBpZiAodGV4dC5sZW5ndGggPiBvcHRfbWF4TGVuZ3RoKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgb3B0X21heExlbmd0aCAtIDMpICsgJy4uLic7XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/overrides.js\n");

/***/ }),

/***/ "./src/speaker.js":
/*!************************!*\
  !*** ./src/speaker.js ***!
  \************************/
/*! exports provided: Speaker, speaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Speaker\", function() { return Speaker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"speaker\", function() { return speaker; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Speaker used for speaking out text.\n */\n\n/**\n * Convenience methods for speaking out text.\n * More information on speakers can be found here:\n * https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis.\n */\n\nvar Speaker = /*#__PURE__*/function () {\n  /**\n   * Constructor for a speaker.\n   * @param {SpeakerMessages=} optMessages Optional messages for the speaker.\n   */\n  function Speaker(optMessages) {\n    _classCallCheck(this, Speaker);\n\n    var messages = {\n      'MAIN_WS': 'On the main workspace',\n      'STACK': 'To go to the last block in the previous group of blocks, press' + 'previous. To go to the first block in the stack hit next.',\n      'PREVIOUS': 'You are on a connection before, ',\n      'NEXT': 'On a connection after, ',\n      'OUTPUT': 'On an output connection. ',\n      'CONNECTION': 'At a connection point.',\n      'BLOCK': 'On a block of type',\n      'CLICKABLE_FIELD': 'To interact with the field hit enter.',\n      'EMPTY_TOKEN': 'blank',\n      'MARK_CONNECTION': 'To mark the block press enter. ',\n      'EXIT_EDIT_MODE': 'To exit edit mode hit escape. '\n    };\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.object.mixin(messages, optMessages);\n    this.setLocale(messages);\n    this.noOverrides = false;\n  }\n  /**\n   * The messages to be read out by a screen reader.\n   * @typedef {{\n   *     MAIN_WS: string,\n   *     STACK: string,\n   *     PREVIOUS: string,\n   *     NEXT: string,\n   *     OUTPUT: string,\n   *     CONNECTION: string,\n   *     BLOCK: string,\n   *     EMPTY_TOKEN: string,\n   *     MARK_CONNECTION: string,\n   * }} SpeakerMessages\n   */\n\n  /**\n   * Set the messages for the speaker.\n   * @param {!SpeakerMessages} messages The messages needed to create a speaker.\n   */\n\n\n  _createClass(Speaker, [{\n    key: \"setLocale\",\n    value: function setLocale(messages) {\n      Object.keys(messages).forEach(function (k) {\n        blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg[k] = messages[k];\n      });\n    }\n    /**\n     * Speaks out the text that was given to it.\n     * @param {string} text The text to speak out.\n     * @param {boolean=} shouldCancel True to stop the current utterance, false to\n     *     wait until the current utterance is done before speaking.\n     * @param {function=} onEnd The function to run after the text has been\n     *     spoken.\n     * @param {function=} onStart The function run when the text has begun to\n     *     be spoken.\n     * @public\n     */\n\n  }, {\n    key: \"speak\",\n    value: function speak(text, shouldCancel, onEnd, onStart) {\n      var audio = new SpeechSynthesisUtterance(text);\n\n      if (shouldCancel && !this.noOverrides && window.speechSynthesis.speaking) {\n        window.speechSynthesis.cancel();\n      }\n\n      if (onEnd) {\n        audio.onend = onEnd;\n      }\n\n      if (onStart) {\n        audio.onstart = onStart;\n      } // Putting on timeout fixes some weird issues with onend being called too\n      // early.\n\n\n      setTimeout(function () {\n        return window.speechSynthesis.speak(audio);\n      }, 1);\n    }\n    /**\n     * Clears out the queue of text to speak.\n     * @public\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      window.speechSynthesis.cancel();\n    }\n    /**\n     * Pauses speaking.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      window.speechSynthesis.pause();\n    }\n    /**\n     * Resumes speaking.\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      window.speechSynthesis.resume();\n    }\n    /**\n     * Speaks out text if the event is of type marker or cursor move.\n     * @param {!Blockly.Events} event The event to speak out.\n     */\n\n  }, {\n    key: \"nodeToSpeech\",\n    value: function nodeToSpeech(event) {\n      // TODO: Update this if we link to the current version of blockly.\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Events.MARKER_MOVE) {\n        var nodeText = this.nodeToText_(event.newNode, event.oldNode, !event.isCursor);\n\n        if (!event.isCursor) {\n          nodeText = \"You have marked a location. To find a new block to connect\\n        to this location hit T. ! . To insert a block on the workspace,\\n        find the location of the block and hit I. \";\n        }\n\n        var onStart;\n\n        if (event.newNode && event.newNode.getLocation() && event.newNode.getLocation().actionBeforeSpeaker) {\n          var location = event.newNode.getLocation();\n          onStart = location.actionBeforeSpeaker.bind(location);\n        }\n\n        this.speak(nodeText, true, undefined, onStart);\n      }\n    }\n    /**\n     * Speaks out the text for a modal.\n     * @param {Element} modal The modal to collect the text to read out.\n     * @public\n     */\n\n  }, {\n    key: \"modalToText\",\n    value: function modalToText(modal) {\n      var header = modal.querySelector('header');\n      var headerText = header.textContent.trim();\n\n      if (headerText !== '') {\n        this.speak(headerText);\n      }\n\n      this.addButtonListeners_(header.querySelectorAll('button'));\n      var mainText = modal.querySelector('main').textContent.trim();\n\n      if (mainText !== '') {\n        this.speak(mainText);\n      }\n\n      var footerBtns = modal.querySelector('footer').querySelectorAll('button');\n      this.addButtonListeners_(footerBtns);\n    }\n    /**\n     * Adds listeners for when the button is focused.\n     * @param {!NodeList} btns The buttons to add listeners to.\n     * @private\n     */\n\n  }, {\n    key: \"addButtonListeners_\",\n    value: function addButtonListeners_(btns) {\n      var _this = this;\n\n      var _iterator = _createForOfIteratorHelper(btns),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var btn = _step.value;\n          btn.addEventListener('focus', function () {\n            _this.buttonToSpeech_(btns, btn, true);\n          });\n\n          if (document.activeElement === btn) {\n            _this.buttonToSpeech_(btns, btn, false);\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Speaks out information about a button.\n     * @param {NodeList} btns The list of buttons on the modal.\n     * @param {Element} btn The button.\n     * @param {boolean} shouldCancel True if this should cancel the previous\n     *     utterance.\n     * @private\n     */\n\n  }, {\n    key: \"buttonToSpeech_\",\n    value: function buttonToSpeech_(btns, btn, shouldCancel) {\n      this.speak('Hit enter to ', shouldCancel);\n\n      if (btn.textContent === '') {\n        this.speak(btn.getAttribute('aria-label'));\n      } else {\n        this.speak(btn.textContent);\n      }\n\n      if (btns.length > 0) {\n        this.speak('Hit tab to go to your next option');\n      }\n    }\n    /**\n     * Speaks out an audio representation of the given node.\n     * @param {Blockly.ASTNode} node The node to speak out.\n     * @param {Blockly.ASTNode} oldNode The previous node to speak out.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text representation of the node.\n     * @public\n     */\n\n  }, {\n    key: \"nodeToText_\",\n    value: function nodeToText_(node, oldNode, isMarker) {\n      var finalText = '';\n\n      switch (node.getType()) {\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n          finalText = this.fieldNodeToText_(node);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK:\n          finalText = this.blockNodeToText_(node);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n          finalText = this.inputNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.OUTPUT:\n          finalText = this.outputNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.NEXT:\n          finalText = this.nextNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.PREVIOUS:\n          finalText = this.previousNodeToText_(node, isMarker);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK:\n          finalText = this.stackNodeToText_(node, oldNode);\n          break;\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE:\n          finalText = this.workspaceNodeToText_(node);\n          break;\n\n        default:\n          return node.toString();\n      }\n\n      finalText += this.getNextOptions_(node, oldNode, isMarker);\n      return finalText;\n    }\n    /**\n     * Gets text explaining the next options available for a user.\n     * @param {!Blockly.ASTNode} node The current node.\n     * @param {!Blockly.ASTNode} oldNode The previous node.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} Text explaining next options for the field.\n     * @private\n     */\n\n  }, {\n    key: \"getNextOptions_\",\n    value: function getNextOptions_(node, oldNode, isMarker) {\n      switch (node.getType()) {\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n          return this.getFieldOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK:\n          return this.getBlockOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.OUTPUT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.NEXT:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.PREVIOUS:\n          return this.getConnectionOptions_(node, isMarker);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK:\n          return this.getStackOptions_(node);\n\n        case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE:\n          return '';\n\n        default:\n          return node.toString();\n      }\n    }\n    /**\n     * Gets the next options for when a user is on a field.\n     * This is to open the field or to change locations.\n     * @param {!Blockly.ASTNode} node The field node.\n     * @return {string} The text explaining the next options when a user is on a\n     *     field.\n     * @private\n     */\n\n  }, {\n    key: \"getFieldOptions_\",\n    value: function getFieldOptions_(node) {\n      var field = node.getLocation();\n\n      if (field.isClickable()) {\n        return \"To interact with the field hit enter. Use the up or down\\n      arrows to change locations. \";\n      } else {\n        return 'Use the up or down arrows to change locations. ';\n      }\n    }\n    /**\n     * Gets the next options for when a user is on a block.\n     * @return {string} The text explaining the next options for a block.\n     * @private\n     */\n\n  }, {\n    key: \"getBlockOptions_\",\n    value: function getBlockOptions_() {\n      return \"Use the up or down arrows to change locations. \";\n    }\n    /**\n     * Gets the text for the connection point.\n     * @param {!Blockly.ASTNode} node The connection node.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} The text explaining the next options when a user is on a\n     *     connection.\n     * @private\n     */\n\n  }, {\n    key: \"getConnectionOptions_\",\n    value: function getConnectionOptions_(node, isMarker) {\n      var markerText = \". To mark this location, hit enter.\\n    To change locations use the up or down arrows\";\n      var finalText = '';\n\n      if (!isMarker) {\n        finalText += \"\".concat(markerText);\n      }\n\n      return finalText;\n    }\n    /**\n     * Gets the options for a user on a  stack of blocks.\n     * @param {Blockly.ASTNode} node The stack node.\n     * @return {string} The text explaining the next options when a user is on a\n     *     stack of blocks.\n     * @private\n     */\n\n  }, {\n    key: \"getStackOptions_\",\n    value: function getStackOptions_(node) {\n      var finalText = '';\n\n      if (node.prev()) {\n        finalText += \"To go to the last block in the previous group of blocks,\\n      press previous.\";\n      }\n\n      finalText += \" To go to the first block in the stack hit next.\";\n      return finalText;\n    }\n    /**\n     * Get the text for the source block of the node.\n     * @param {!Blockly.BlockSvg} srcBlock The block to get the text for.\n     * @param {string=} opt_emptyToken The optional empty token.\n     * @return {string} The text describing the source block of the node.\n     * @private\n     */\n\n  }, {\n    key: \"getBlockText_\",\n    value: function getBlockText_(srcBlock, opt_emptyToken) {\n      var emptyToken = opt_emptyToken || blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['EMPTY_TOKEN'];\n\n      if (srcBlock) {\n        if (srcBlock.statementInputCount > 0) {\n          emptyToken = ' do blank ';\n        }\n\n        return srcBlock.toString(null, emptyToken);\n      } else {\n        return '';\n      }\n    }\n    /**\n     * Creates text for a feild.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"fieldNodeToText_\",\n    value: function fieldNodeToText_(node) {\n      var field = node.getLocation();\n      return field.getText() + '. ';\n    }\n    /**\n     * Creates text for a feild.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"blockNodeToText_\",\n    value: function blockNodeToText_(node) {\n      var block =\n      /** @type{Blockly.BlockSvg} */\n      node.getLocation();\n      var blockText = this.getBlockText_(block);\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"You are on , \".concat(blockText, \". . \");\n      return finalText;\n    }\n    /**\n     * Creates text for an input.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True if the marker was moved.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"inputNodeToText_\",\n    value: function inputNodeToText_(node, isMarker) {\n      var inputConnection =\n      /** @type{Blockly.Input} */\n      node.getLocation();\n      var connectionText = \"You are on a connection\";\n      var finalText = '';\n\n      if (inputConnection.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n        var blockText = this.getBlockText_(node.getSourceBlock());\n        finalText = \"Inside \".concat(blockText, \". \").concat(connectionText, \". \");\n      } else if (inputConnection.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.INPUT_VALUE) {\n        var _blockText = this.getBlockText_(node.getSourceBlock(), ' ');\n\n        finalText = \"\".concat(connectionText, \" after \").concat(_blockText);\n      }\n\n      return finalText;\n    }\n    /**\n     * Creates text for a output connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"outputNodeToText_\",\n    value: function outputNodeToText_(node) {\n      var blockText = this.getBlockText_(node.getSourceBlock());\n      return \"You are on a connection for block, \".concat(blockText);\n    }\n    /**\n     * Creates text for a next connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"nextNodeToText_\",\n    value: function nextNodeToText_(node, isMarker) {\n      var block = node.getSourceBlock();\n      var blockText = this.getBlockText_(node.getSourceBlock());\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"\".concat(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['NEXT'], \" \").concat(blockText);\n      return finalText;\n    }\n    /**\n     * Creates text for a previous connection.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {boolean} isMarker True to get the text for a marker,\n     *     false otherwise.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"previousNodeToText_\",\n    value: function previousNodeToText_(node, isMarker) {\n      var block = node.getSourceBlock();\n      var blockText = this.getBlockText_(block);\n      var finalText = '';\n\n      if (block.getSurroundParent()) {\n        var parentBlockText = this.getBlockText_(block.getSurroundParent());\n        finalText += \"You are inside of block \".concat(parentBlockText, \". . \");\n      }\n\n      finalText += \"\".concat(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['PREVIOUS'], \" \").concat(blockText);\n      return finalText;\n    }\n    /**\n     * Creates text for a stack of blocks.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @param {!Blockly.ASTNode} oldNode The previous node.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"stackNodeToText_\",\n    value: function stackNodeToText_(node, oldNode) {\n      var srcBlock = node.getSourceBlock();\n      var newNodeTopBlock = srcBlock.getTopStackBlock();\n      var oldNodeTopBlock = null;\n\n      if (oldNode && oldNode.getSourceBlock()) {\n        oldNodeTopBlock = oldNode.getSourceBlock().getTopStackBlock();\n      }\n\n      var finalText = '';\n\n      if (srcBlock && srcBlock.workspace.isFlyout) {\n        finalText = this.getBlockText_(node.getSourceBlock());\n        finalText += \" . . To add this block to the workspace press Enter. .\\n      To go to the next block hit next. . To go back to the workspace\\n      hit escape. \";\n      } else if (srcBlock) {\n        if (oldNodeTopBlock !== newNodeTopBlock) {\n          finalText += \"You are on a new group of blocks. \";\n        } else {\n          finalText += \"You are on a group of blocks. \";\n        }\n      }\n\n      return finalText;\n    }\n    /**\n     * Creates text for a workspace.\n     * @param {!Blockly.ASTNode} node The node to create text for.\n     * @return {string} The text for the screen reader to read out.\n     * @protected\n     */\n\n  }, {\n    key: \"workspaceNodeToText_\",\n    value: function workspaceNodeToText_(node) {\n      var workspace =\n      /** @type{Blockly.WorkspaceSvg} */\n      node.getLocation(); // TODO: All text should be added to Blockly.Msg to allow for translation.\n\n      var text = null;\n\n      if (workspace.isFlyout) {\n        text = 'In the flyout, please select a block';\n      } else if (workspace.isMutator) {\n        text = 'In the mutator workspace, use this workspace to change a block';\n      } else {\n        text = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Msg['MAIN_WS'];\n      }\n\n      return text;\n    }\n  }]);\n\n  return Speaker;\n}();\nvar speaker = new Speaker();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/speaker.js\n");

/***/ }),

/***/ "./src/tutorial.js":
/*!*************************!*\
  !*** ./src/tutorial.js ***!
  \*************************/
/*! exports provided: Tutorial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tutorial\", function() { return Tutorial; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music */ \"./src/music.js\");\n/* harmony import */ var _tutorial_step__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tutorial_step */ \"./src/tutorial_step.js\");\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Multi-step tutorial using modals.\n */\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n/**\n * A multi-step tutorial for the accessible music game.\n */\n\nvar Tutorial = /*#__PURE__*/function () {\n  /**\n   * Class for a tutorial.\n   * @param {Blockly.WorkspaceSvg} workspace The workspace the user\n   *     will interact with.\n   * @param {Music} music A reference to the music logic object.\n   * @param {function(string)} goalUpdateCb The callback function for goal\n   *    change.\n   * @param {function} endTutorialCb The function to call at the end of the\n   *     tutorial.\n   * @constructor\n   */\n  function Tutorial(workspace, music, goalUpdateCb, endTutorialCb) {\n    var _this = this;\n\n    _classCallCheck(this, Tutorial);\n\n    /**\n     * The id of the modal.\n     * @type {string}\n     */\n    this.modalId = 'tutorialModal';\n    /**\n     * The id of the tutorial text.\n     * @type {string}\n     */\n\n    this.stepTextId = this.modalId + 'Text';\n    /**\n     * The id of the next step button.\n     * @type {string}\n     */\n\n    this.stepButtonId = this.modalId + 'StepBtn';\n    /**\n     * The id of the hide modal button.\n     * @type {string}\n     */\n\n    this.hideButtonId = this.modalId + 'HideBtn';\n    /**\n     * An array of steps in the tutorial.\n     * @type {Array<!TutorialStep>}\n     */\n\n    this.steps = Tutorial.STEP_OBJECTS.map(function (obj) {\n      return new _tutorial_step__WEBPACK_IMPORTED_MODULE_2__[\"TutorialStep\"](obj.text, _this.stepTextId, _this.nextStep, obj.goalText);\n    });\n    /**\n     * The index of the currently active step.\n     * @type {number}\n     */\n\n    this.curStepIndex = 0;\n    /**\n     * The currently active step.\n     * @type {TutorialStep}\n     */\n\n    this.curStep = this.steps[this.curStepIndex];\n    /**\n     * The Blockly workspace the user will interact with.\n     * @type {Blockly.WorkspaceSvg}\n     */\n\n    this.workspace = workspace;\n    /**\n     * The Music logic object.\n     * @type {Music}\n     */\n\n    this.music = music;\n    /**\n     * The node that was selected on the workspace when the modal\n     * opened.\n     * @type {Blockly.ASTNode}\n     */\n\n    this.curNode = null;\n    /**\n     * Callback function for goal update, which accepts a string\n     *     with the text to set the goal to.\n     * @type {function(string)}\n     */\n\n    this.goalUpdateCb = goalUpdateCb;\n    /**\n     * Callback function for the end of the tutorial.\n     * @type {function}\n     */\n\n    this.endTutorialCb = endTutorialCb;\n  }\n  /**\n   * Initialize DOM and show.\n   */\n\n\n  _createClass(Tutorial, [{\n    key: \"init\",\n    value: function init() {\n      this.createDom();\n      this.addCallbacks();\n      micromodal__WEBPACK_IMPORTED_MODULE_3__[\"default\"].show(this.modalId, {\n        onClose: function onClose() {\n          return _speaker__WEBPACK_IMPORTED_MODULE_4__[\"speaker\"].cancel();\n        }\n      });\n      this.curStep.show();\n      this.registerPlayHelpText();\n      this.loadWorkspace();\n      this.music.setOnFinishPlayCallback(null);\n    }\n    /**\n     * Load the workspace for the tutorial.\n     */\n\n  }, {\n    key: \"loadWorkspace\",\n    value: function loadWorkspace() {\n      var toolboxJson = {\n        'kind': 'flyoutToolbox',\n        'contents': [{\n          'kind': 'block',\n          'blockxml': \"<block type=\\\"music_note\\\">\\n                        <field name=\\\"DURATION\\\">0.25</field>\\n                        <value name=\\\"PITCH\\\">\\n                          <shadow type=\\\"music_pitch\\\">\\n                            <field name=\\\"PITCH\\\">C4</field>\\n                          </shadow>\\n                        </value>\\n                      </block>\"\n        }, {\n          'kind': 'block',\n          'type': 'music_rest'\n        }]\n      };\n      this.workspace.updateToolbox(toolboxJson);\n      var starterXml = \"<xml>\\n            <block type=\\\"music_start\\\" deletable=\\\"false\\\" x=\\\"180\\\"\\n            y=\\\"50\\\"></block>\\n          </xml>\";\n      this.workspace.clear();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.textToDom(starterXml), this.workspace);\n    }\n    /**\n     * Registers shortcut to replay the current tutorial step.\n     */\n\n  }, {\n    key: \"registerPlayHelpText\",\n    value: function registerPlayHelpText() {\n      var _this2 = this;\n\n      /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n      var playHelpText = {\n        name: 'playHelpText',\n        preconditionFn: function preconditionFn(workspace) {\n          return !workspace.options.readOnly;\n        },\n        callback: function callback() {\n          _speaker__WEBPACK_IMPORTED_MODULE_4__[\"speaker\"].speak('Goal: ' + _this2.curStep.goalText, true);\n        }\n      };\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.register(playHelpText);\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.addKeyMapping(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.KeyCodes.H, playHelpText.name);\n    }\n    /**\n     * Display the next step, or end the tutorial if there are no more steps.\n     */\n\n  }, {\n    key: \"nextStep\",\n    value: function nextStep() {\n      this.curStepIndex++;\n\n      if (this.curStepIndex < this.steps.length) {\n        this.curStep = this.steps[this.curStepIndex];\n        micromodal__WEBPACK_IMPORTED_MODULE_3__[\"default\"].show(this.modalId, {\n          onClose: function onClose() {\n            return _speaker__WEBPACK_IMPORTED_MODULE_4__[\"speaker\"].cancel();\n          }\n        });\n        this.curStep.show();\n        this.goalUpdateCb(Tutorial.STEP_OBJECTS[this.curStepIndex].goalText);\n        this.stashCursor();\n      } else {\n        this.done();\n      }\n    }\n    /**\n     * End the tutorial.\n     */\n\n  }, {\n    key: \"done\",\n    value: function done() {\n      micromodal__WEBPACK_IMPORTED_MODULE_3__[\"default\"].close(this.modalId, {\n        onClose: function onClose() {\n          return _speaker__WEBPACK_IMPORTED_MODULE_4__[\"speaker\"].cancel();\n        }\n      });\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.disableKeyboardAccessibility();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.unregister('playHelpText');\n      this.endTutorialCb();\n    }\n    /**\n     * Save the current cursor node and disable keyboard nav.\n     * Call this when opening the modal.\n     */\n\n  }, {\n    key: \"stashCursor\",\n    value: function stashCursor() {\n      this.curNode = this.workspace.getCursor().getCurNode();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.disableKeyboardAccessibility();\n    }\n    /**\n     * Reenable keyboard nav and move the cursor to the previously\n     * selected cursor node. Call this when closing the modal.\n     */\n\n  }, {\n    key: \"popCursor\",\n    value: function popCursor() {\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.enableKeyboardAccessibility();\n\n      if (this.curNode) {// this.workspace.getCursor().setCurNode(this.curNode);\n        // speaker.cancel();\n      }\n    }\n    /**\n     * Add necessary handlers for any buttons on the modal.\n     */\n\n  }, {\n    key: \"addCallbacks\",\n    value: function addCallbacks() {\n      var _this3 = this;\n\n      document.getElementById(this.stepButtonId).addEventListener('click', function () {\n        _this3.nextStep();\n      });\n      document.getElementById(this.hideButtonId).addEventListener('click', function (e) {\n        micromodal__WEBPACK_IMPORTED_MODULE_3__[\"default\"].close(_this3.modalId);\n\n        _this3.popCursor();\n\n        Tutorial.STEP_OBJECTS[_this3.curStepIndex].onStart(_this3);\n\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n    /**\n     * Create the dom for the modal.\n     */\n\n  }, {\n    key: \"createDom\",\n    value: function createDom() {\n      document.getElementById(this.modalId).innerHTML = \"\\n     <div class=\\\"modal__overlay\\\" tabindex=\\\"-1\\\" data-micromodal-close>\\n      <div class=\\\"modal__container\\\" role=\\\"dialog\\\" aria-modal=\\\"true\\\"\\n        aria-labelledby=\\\"modal-1-title\\\">\\n        <header class=\\\"modal__header\\\">\\n          <button class=\\\"modal__close\\\" aria-label=\\\"Close modal\\\"\\n            id=\\\"tutorialCloseBtn\\\" data-micromodal-close></button>\\n        </header>\\n        <main class=\\\"modal__content\\\" id=\\\"modal-1-content\\\">\\n          <h2 class=\\\"modal__title\\\" id=\\\"\".concat(this.stepTextId, \"\\\"></h2>\\n        </main>\\n        <footer class=\\\"modal__footer\\\">\\n          <button class=\\\"modal__btn modal__btn-primary\\\" aria-label=\\\"Start step\\\"\\n            id=\\\"\").concat(this.hideButtonId, \"\\\">Start step</button>\\n          <button class=\\\"modal__btn modal__btn-primary\\\" aria-label=\\\"Skip step\\\"\\n            id=\\\"\").concat(this.stepButtonId, \"\\\">Skip step</button>\\n        </footer>\\n      </div>\\n    </div>\");\n    }\n    /**\n     * Get the current location, based on the event.\n     * @param {Blockly.Event} event An event to inspect for a cursor location.\n     * @return {Blockly.ASTNode} The current cursor location, or null if the event\n     *     didn't have one.\n     */\n\n  }, {\n    key: \"getCurrentLocation\",\n    value: function getCurrentLocation(event) {\n      var curNode = event.newNode;\n\n      if (curNode) {\n        return curNode.getLocation();\n      }\n\n      return null;\n    }\n  }]);\n\n  return Tutorial;\n}();\nTutorial.STEP_OBJECTS = [{\n  text: \"In this tutorial you will write code that plays musical notes. Press\\n    H to replay the goal for the current step. Press Enter to go to the next\\n    step.\",\n  goalText: \"Press Enter to go to the next step.\",\n  onStart: function onStart(tutorial) {\n    setTimeout(function () {\n      return tutorial.nextStep();\n    }, 10);\n  }\n}, {\n  text: \"You can move around the blocks of code with the up and down arrows.\\n    You will hear descriptions as you move around the blocks. .\\n    All blocks have connection points, which are places where you can add more\\n    code. . Your goal: Use the down arrow to move to a connection point.\\n    Hit enter to begin. \",\n  goalText: \"Use the down arrow to move to a connection point.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Events.MARKER_MOVE) {\n        var curNode = event.newNode;\n        var correctLocation = workspace.getTopBlocks()[0].inputList[1].connection;\n\n        if (curNode) {\n          var location = curNode.getLocation();\n\n          if (location === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 4300);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You moved to a connection point. .\\n      To add more code, you first mark a location and then select the block you\\n      want to add. .\\n      Your goal: Navigate to the connection point, then press enter to mark it.\\n      Hit enter to begin. \",\n  goalText: \"Navigate to the connection point, then press enter to mark it.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Events.MARKER_MOVE) {\n        var currentLocation = tutorial.getCurrentLocation(event);\n\n        if (currentLocation && !event.isCursor) {\n          var correctLocation = workspace.getTopBlocks()[0].inputList[1].connection;\n\n          if (currentLocation === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 2000);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! You marked a connection point. Now you can add more code\\n    blocks. .\\n    The toolbox is a list of code blocks that you can add to the workspace.\\n    You can always open the toolbox by pressing T. .\\n    Your goal: Press T to open the toolbox, then use the up and down arrows to\\n    explore it. . Press F when you are finished exploring.\",\n  goalText: \"Press T to open the toolbox, then use the up and down arrows to\\n      explore it. . Press F when you are finished exploring.\",\n  onStart: function onStart(tutorial) {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    var finishStep = {\n      name: 'finishStep',\n      preconditionFn: function preconditionFn(workspace) {\n        return workspace.keyboardAccessibilityMode && !workspace.options.readOnly;\n      },\n      callback: function callback() {\n        tutorial.nextStep();\n        blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.unregister('finishStep');\n      }\n    };\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.register(finishStep);\n    var shiftF = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.createSerializedKey(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.KeyCodes.F);\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.addKeyMapping(shiftF, finishStep.name);\n  }\n}, {\n  text: \"Great! Now it\\u2019s time to put it all together.\\n    Your goal: Navigate to the connection and mark it, then press T to open the\\n    toolbox. Find the block that says \\u201Cplay whole note c4\\u201D and press\\n    enter to add it at the marked location.\",\n  goalText: \"Navigate to the connection and mark it, then press T to open the\\n    toolbox. Find the block that says \\u201Cplay whole note c4\\u201D and press\\n    enter to add it at the marked location.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n\n    var listener = function listener(event) {\n      if (event.type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Events.MARKER_MOVE) {\n        var currentLocation = tutorial.getCurrentLocation(event);\n\n        if (currentLocation && event.isCursor && workspace.getAllBlocks().length > 1) {\n          var correctLocation = workspace.getAllBlocks()[1].previousConnection;\n\n          if (currentLocation === correctLocation) {\n            setTimeout(function () {\n              workspace.removeChangeListener(wrapper);\n              tutorial.nextStep();\n            }, 5400);\n          }\n        }\n      }\n    }; // Add a shortcut in place of the down arrow shortcut.\n\n\n    var wrapper = workspace.addChangeListener(listener);\n  }\n}, {\n  text: \"Great! Your goal: Press Shift and P at the same time to run your\\n    code. You should hear a note play!\",\n  goalText: \"Press Shift and P at the same time to run your code.\",\n  onStart: function onStart(tutorial) {\n    var workspace = tutorial.workspace;\n    var starterXml = \"<xml>\\n            <block type=\\\"music_note\\\">\\n                    <field name=\\\"DURATION\\\">0.25</field>\\n                    <value name=\\\"PITCH\\\">\\n                      <shadow type=\\\"music_pitch\\\">\\n                        <field name=\\\"PITCH\\\">C4</field>\\n                      </shadow>\\n                    </value>\\n                  </block>\\n          </xml>\";\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.domToWorkspace(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Xml.textToDom(starterXml), workspace);\n    var musicNote = workspace.getBlocksByType('music_note')[0];\n    var musicStart = workspace.getBlocksByType('music_start')[0];\n    musicStart.inputList[1].connection.connect(musicNote.previousConnection);\n    tutorial.music.setOnFinishPlayCallback(function () {\n      tutorial.nextStep();\n    });\n  }\n}, {\n  text: \"Congratulations! You have finished the tutorial! In the game use\\n    H to give you tips and Shift and P to play your solution. !\\n    Hit enter to start the game.\",\n  goalText: \"Start the game.\",\n  onStart: function onStart(tutorial) {\n    setTimeout(function () {\n      return tutorial.nextStep();\n    }, 100);\n  }\n}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/tutorial.js\n");

/***/ }),

/***/ "./src/tutorial_step.js":
/*!******************************!*\
  !*** ./src/tutorial_step.js ***!
  \******************************/
/*! exports provided: TutorialStep */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TutorialStep\", function() { return TutorialStep; });\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview A single step in the tutorial.\n */\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\n * A step in the tutorial.\n */\n\nvar TutorialStep = /*#__PURE__*/function () {\n  /**\n   * Class for a single step in the tutorial.\n   * @param {string} text The text to show on the modal.\n   * @param {string} textId The ID of the element where the text will be\n   *     displayed.\n   * @param {Function} doneCb The function to call when the step is completed\n   *     by the user.\n   * @constructor\n   */\n  function TutorialStep(text, textId, doneCb, goalText) {\n    _classCallCheck(this, TutorialStep);\n\n    /**\n     * The text being displayed to the user.\n     * @type {string}\n     */\n    this.text = text;\n    /**\n     * The ID of the element where the text will be displayed.\n     * @type {string}\n     */\n\n    this.textId = textId;\n    /**\n     * The function to call when the step is completed by the user.\n     * @type {Function}\n     */\n\n    this.doneCb = doneCb;\n    /**\n     * The goal text.\n     * @type {string}\n     */\n\n    this.goalText = goalText;\n  }\n  /**\n   * Show this step in the modal, and speak it out loud.\n   */\n\n\n  _createClass(TutorialStep, [{\n    key: \"show\",\n    value: function show() {\n      document.getElementById(this.textId).innerHTML = this.text;\n      _speaker__WEBPACK_IMPORTED_MODULE_0__[\"speaker\"].speak(this.text, true);\n    }\n  }]);\n\n  return TutorialStep;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdHV0b3JpYWxfc3RlcC5qcz8wODg1Il0sIm5hbWVzIjpbIlR1dG9yaWFsU3RlcCIsInRleHQiLCJ0ZXh0SWQiLCJkb25lQ2IiLCJnb2FsVGV4dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJzcGVha2VyIiwic3BlYWsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ2E7Ozs7Ozs7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sSUFBTUEsWUFBYjtBQUNFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLHdCQUFZQyxJQUFaLEVBQWtCQyxNQUFsQixFQUEwQkMsTUFBMUIsRUFBa0NDLFFBQWxDLEVBQTRDO0FBQUE7O0FBQzFDO0FBQ0o7QUFDQTtBQUNBO0FBQ0ksU0FBS0gsSUFBTCxHQUFZQSxJQUFaO0FBRUE7QUFDSjtBQUNBO0FBQ0E7O0FBQ0ksU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBRUE7QUFDSjtBQUNBO0FBQ0E7O0FBQ0ksU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBRUE7QUFDSjtBQUNBO0FBQ0E7O0FBQ0ksU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBdENBO0FBQUE7QUFBQSwyQkF1Q1M7QUFDTEMsY0FBUSxDQUFDQyxjQUFULENBQXdCLEtBQUtKLE1BQTdCLEVBQXFDSyxTQUFyQyxHQUFpRCxLQUFLTixJQUF0RDtBQUNBTyxzREFBTyxDQUFDQyxLQUFSLENBQWMsS0FBS1IsSUFBbkIsRUFBeUIsSUFBekI7QUFDRDtBQTFDSDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL3R1dG9yaWFsX3N0ZXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIHNpbmdsZSBzdGVwIGluIHRoZSB0dXRvcmlhbC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge3NwZWFrZXJ9IGZyb20gJy4vc3BlYWtlcic7XG4vKipcbiAqIEEgc3RlcCBpbiB0aGUgdHV0b3JpYWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBUdXRvcmlhbFN0ZXAge1xuICAvKipcbiAgICogQ2xhc3MgZm9yIGEgc2luZ2xlIHN0ZXAgaW4gdGhlIHR1dG9yaWFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBzaG93IG9uIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRJZCBUaGUgSUQgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIHRleHQgd2lsbCBiZVxuICAgKiAgICAgZGlzcGxheWVkLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkb25lQ2IgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgc3RlcCBpcyBjb21wbGV0ZWRcbiAgICogICAgIGJ5IHRoZSB1c2VyLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRleHQsIHRleHRJZCwgZG9uZUNiLCBnb2FsVGV4dCkge1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IGJlaW5nIGRpc3BsYXllZCB0byB0aGUgdXNlci5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIHRleHQgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRleHRJZCA9IHRleHRJZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHN0ZXAgaXMgY29tcGxldGVkIGJ5IHRoZSB1c2VyLlxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLmRvbmVDYiA9IGRvbmVDYjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnb2FsIHRleHQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmdvYWxUZXh0ID0gZ29hbFRleHQ7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyB0aGlzIHN0ZXAgaW4gdGhlIG1vZGFsLCBhbmQgc3BlYWsgaXQgb3V0IGxvdWQuXG4gICAqL1xuICBzaG93KCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMudGV4dElkKS5pbm5lckhUTUwgPSB0aGlzLnRleHQ7XG4gICAgc3BlYWtlci5zcGVhayh0aGlzLnRleHQsIHRydWUpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/tutorial_step.js\n");

/***/ })

})
webpackHotUpdate("main",{

/***/ "./src/field_pitch.js":
/*!****************************!*\
  !*** ./src/field_pitch.js ***!
  \****************************/
/*! exports provided: FieldPitch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FieldPitch\", function() { return FieldPitch; });\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Music pitch input field. Borrowed from Blockly Games.\n * @author fraser@google.com (Neil Fraser)\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n/**\n * Pitch field from Blockly Games music.\n * @extends {Blockly.FieldTextInput}\n */\n\nvar FieldPitch = /*#__PURE__*/function (_Blockly$FieldTextInp) {\n  _inherits(FieldPitch, _Blockly$FieldTextInp);\n\n  var _super = _createSuper(FieldPitch);\n\n  /**\n   * Class for an editable pitch field.\n   * @param {string} text The initial content of the field.\n   * @constructor\n   */\n  function FieldPitch(text) {\n    _classCallCheck(this, FieldPitch);\n\n    return _super.call(this, text);\n  }\n  /**\n   * Construct a FieldPitch from a JSON arg object.\n   * @param {!Object} options A JSON object with options (pitch).\n   * @return {!FieldPitch} The new field instance.\n   * @package\n   * @nocollapse\n   */\n\n\n  _createClass(FieldPitch, [{\n    key: \"showEditor_\",\n\n    /**\n     * Show the inline free-text editor on top of the text and the note picker.\n     * @private\n     */\n    value: function showEditor_() {\n      _get(_getPrototypeOf(FieldPitch.prototype), \"showEditor_\", this).call(this);\n\n      var div = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.WidgetDiv.DIV;\n\n      if (!div.firstChild) {\n        // Mobile interface uses Blockly.prompt.\n        return;\n      } // Build the DOM.\n\n\n      var editor = this.dropdownCreate_();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.DropDownDiv.getContentDiv().appendChild(editor);\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.DropDownDiv.setColour(this.sourceBlock_.getColour(), this.sourceBlock_.style.colourTertiary);\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.DropDownDiv.showPositionedByField(this, this.dropdownDispose_.bind(this)); // The note picker is different from other fields in that it updates on\n      // mousemove even if it's not in the middle of a drag.  In future we may\n      // change this behaviour.  For now, using bindEvent_ instead of\n      // bindEventWithChecks_ allows it to work without a mousedown/touchstart.\n\n      this.clickWrapper_ = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.bindEvent_(this.imageElement_, 'click', this, this.hide_);\n      this.moveWrapper_ = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.bindEvent_(this.imageElement_, 'mousemove', this, this.onMouseMove);\n      this.bindAdditionalInputEvents_(this.htmlInput_);\n      this.updateGraph_();\n    }\n    /**\n     * Create the pitch editor.\n     * @return {!Element} The newly created pitch picker.\n     * @private\n     */\n\n  }, {\n    key: \"dropdownCreate_\",\n    value: function dropdownCreate_() {\n      this.imageElement_ = document.createElement('div');\n      this.imageElement_.id = 'notePicker';\n      return this.imageElement_;\n    }\n    /**\n     * Dispose of events belonging to the pitch editor.\n     * @private\n     */\n\n  }, {\n    key: \"dropdownDispose_\",\n    value: function dropdownDispose_() {\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.unbindEvent_(this.clickWrapper_);\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.unbindEvent_(this.moveWrapper_);\n    }\n    /**\n     * Hide the editor.\n     * @private\n     */\n\n  }, {\n    key: \"hide_\",\n    value: function hide_() {\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.WidgetDiv.hide();\n      blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.DropDownDiv.hideWithoutAnimation();\n    }\n    /**\n     * Set the note to match the mouse's position.\n     * @param {!Event} e Mouse move event.\n     */\n\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(e) {\n      var bBox = this.imageElement_.getBoundingClientRect();\n      var dy = e.clientY - bBox.top;\n      var note = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.utils.math.clamp(Math.round(13.5 - dy / 7.5), 0, 12);\n      this.imageElement_.style.backgroundPosition = -note * 37 + 'px 0';\n      this.setEditorValue_(this.valueToNote(note));\n    }\n    /**\n     * Convert the machine-readable value (0-12) to human-readable text (C3-A4).\n     * @param {number|string} value The provided value.\n     * @return {string|undefined} The respective note, or undefined if invalid.\n     */\n\n  }, {\n    key: \"valueToNote\",\n    value: function valueToNote(value) {\n      return FieldPitch.NOTES[Number(value)];\n    }\n    /**\n     * Convert the human-readable text (C3-A4) to machine-readable value (0-12).\n     * @param {string} text The provided note.\n     * @return {number|undefined} The respective value, or undefined if invalid.\n     */\n\n  }, {\n    key: \"noteToValue\",\n    value: function noteToValue(text) {\n      var normalizedText = text.trim().toUpperCase();\n      var i = FieldPitch.NOTES.indexOf(normalizedText);\n      return i > -1 ? i : undefined;\n    }\n    /**\n     * Updates the graph when the field rerenders.\n     * @private\n     * @override\n     */\n\n  }, {\n    key: \"render_\",\n    value: function render_() {\n      _get(_getPrototypeOf(FieldPitch.prototype), \"render_\", this).call(this);\n\n      this.updateGraph_();\n    }\n    /**\n     * Redraw the note picker with the current note.\n     * @private\n     */\n\n  }, {\n    key: \"updateGraph_\",\n    value: function updateGraph_() {\n      if (!this.imageElement_) {\n        return;\n      }\n\n      var i = this.noteToValue(this.getValue());\n      this.imageElement_.style.backgroundPosition = -i * 37 + 'px 0';\n    }\n    /**\n     * Ensure that only a valid value may be entered.\n     * @param {*} opt_newValue The input value.\n     * @return {*} A valid value, or null if invalid.\n     */\n\n  }, {\n    key: \"doClassValidation_\",\n    value: function doClassValidation_(opt_newValue) {\n      if (opt_newValue === null || opt_newValue === undefined) {\n        return null;\n      }\n\n      var noteNum = this.noteToValue(opt_newValue);\n\n      if (noteNum !== undefined && this.valueToNote(noteNum) == opt_newValue) {\n        return opt_newValue;\n      }\n\n      return null;\n    }\n    /**\n     * Select a note one higher than current, or stay at the highest note.\n     */\n\n  }, {\n    key: \"selectHigherNote\",\n    value: function selectHigherNote() {\n      var currentNote = this.noteToValue(this.getValue());\n      currentNote = currentNote === undefined ? 12 : currentNote;\n      var note = Math.min(currentNote + 1, 12);\n      this.setEditorValue_(this.valueToNote(note));\n    }\n    /**\n     * Select a note one lower than current, or stay at the lowest note.\n     */\n\n  }, {\n    key: \"selectLowerNote\",\n    value: function selectLowerNote() {\n      var currentNote = this.noteToValue(this.getValue());\n      currentNote = currentNote === undefined ? 0 : currentNote;\n      var note = Math.max(currentNote - 1, 0);\n      this.setEditorValue_(this.valueToNote(note));\n    }\n    /**\n     * Handles next/previous key presses on the input event.\n     * OnBlocklyAction would normally receive next/previous actions,\n     * but the html input element is capturing the keypresses.\n     * We bind our own event that only handles keys registered to next/previous.\n     * If we handle it, we stop other handlers from firing.\n     * This does not clobber the events registered by FieldTextInput, so\n     * esc and enter presses are still handled by that.\n     * @param {!Event} e Keyboard event.\n     */\n\n  }, {\n    key: \"handleKeyPress_\",\n    value: function handleKeyPress_(e) {\n      var action = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ShortcutRegistry.registry.getKeyboardShortcuts(e.keyCode);\n      var handled = false;\n\n      if (action.includes('next')) {\n        this.selectLowerNote();\n        handled = true;\n      } else if (action.includes('previous')) {\n        this.selectHigherNote();\n        handled = true;\n      }\n\n      if (handled) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n    /**\n     * Bind handler for keypresses on input.\n     * @param {!HTMLElement} htmlInput Input element.\n     */\n\n  }, {\n    key: \"bindAdditionalInputEvents_\",\n    value: function bindAdditionalInputEvents_(htmlInput) {\n      this.additionalOnKeyDownWrapper_ = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.bindEventWithChecks_(htmlInput, 'keydown', this, this.handleKeyPress_);\n    }\n    /**\n     * Unbind handler for user input.\n     * @private\n     */\n\n  }, {\n    key: \"unbindAdditionalInputEvents_\",\n    value: function unbindAdditionalInputEvents_() {\n      if (this.additionalOnKeyDownWrapper_) {\n        blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.unbindEvent_(this.additionalOnKeyDownWrapper_);\n        this.additionalOnKeyDownWrapper_ = null;\n      }\n    }\n    /**\n     * Dispose of event handlers.\n     * @override\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.unbindAdditionalInputEvents_();\n\n      _get(_getPrototypeOf(FieldPitch.prototype), \"dispose\", this).call(this);\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(options) {\n      return new FieldPitch(options['pitch']);\n    }\n  }]);\n\n  return FieldPitch;\n}(blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldTextInput);\n/**\n * All notes available for the picker.\n */\n\nFieldPitch.NOTES = 'C3 D3 E3 F3 G3 A3 B3 C4 D4 E4 F4 G4 A4'.split(/ /);\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.fieldRegistry.register('field_pitch', FieldPitch);\n/**\n * CSS for the pitch field.\n * This field is using CSS to set a background image of a series of notes, then\n * translating left or right to show only the correct note.\n */\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Css.register([\n/* eslint-disable indent */\n\"#notePicker {\\n    background-image: url(https://raw.githubusercontent.com/google/blockly-games/master/appengine/music/notes.png);\\n    border: 1px solid #ccc;\\n    height: 109px;\\n    width: 46px;\\n  }\"\n/* eslint-enable indent */\n]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/field_pitch.js\n");

/***/ })

})
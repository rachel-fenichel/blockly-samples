webpackHotUpdate("main",{

/***/ "./src/overrides.js":
/*!**************************!*\
  !*** ./src/overrides.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blockly/core */ \"./node_modules/blockly/dist/core-browser.js\");\n/* harmony import */ var blockly_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blockly_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _speaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speaker */ \"./src/speaker.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a line cursor.\n * A line cursor traverses the blocks as if they were\n * lines of code in a text editor.\n * Previous and next go up and down lines. In and out go\n * through the elements in a line.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n\n\n\n\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.handleEnterForWS_ = function (workspace) {\n  var cursor = workspace.getCursor();\n  var curNode = cursor.getCurNode();\n  var nodeType = curNode.getType();\n\n  if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD && curNode.getLocation().isClickable()) {\n    // TODO: Had to override so I could add this speaker in.\n    _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak('Use next and previous to read off your options.');\n\n    /** @type {!Blockly.Field} */\n    curNode.getLocation().showEditor();\n  } else if (curNode.isConnection() || nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.WORKSPACE) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.markAtCursor_();\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.BLOCK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a block.');\n  } else if (nodeType == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.STACK) {\n    blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.warn_('Cannot mark a stack.');\n  }\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.prototype.onBlocklyAction = function (action) {\n  var fieldNextOptions = 'To select this option hit enter';\n\n  if (this.menu_) {\n    switch (action.name) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.PREVIOUS:\n        this.menu_.highlightPrevious();\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(fieldNextOptions);\n        return true;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.navigation.actionNames.NEXT:\n        this.menu_.highlightNext(); // TODO: Needed to override so that I could speak out the location when\n        // it changes.\n\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(this.menu_.highlightedItem_.content_.alt, true);\n        _speaker__WEBPACK_IMPORTED_MODULE_1__[\"speaker\"].speak(fieldNextOptions);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  return blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.FieldDropdown.superClass_.onBlocklyAction.call(this, action);\n};\n\nblockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.prototype.toString = function (opt_maxLength, opt_emptyToken) {\n  var text = [];\n  var emptyFieldPlaceholder = opt_emptyToken || '?'; // Temporarily set flag to navigate to all fields.\n\n  var prevNavigateFields = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS;\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = true;\n  var node = blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.createBlockNode(this);\n  var rootNode = node;\n  /**\n   * Whether or not to add parentheses around an input.\n   * @param {!Blockly.Connection} connection The connection.\n   * @return {boolean} True if we should add parentheses around the input.\n   */\n\n  function shouldAddParentheses(connection) {\n    var checks = connection.getCheck();\n\n    if (!checks && connection.targetConnection) {\n      checks = connection.targetConnection.getCheck();\n    }\n\n    return !!checks && (checks.indexOf('Boolean') != -1 || checks.indexOf('Number') != -1);\n  }\n  /**\n   * Check that we haven't circled back to the original root node.\n   */\n\n\n  function checkRoot() {\n    if (node && node.getType() == rootNode.getType() && node.getLocation() == rootNode.getLocation()) {\n      node = null;\n    }\n  }\n\n  var connection = null;\n  var field = null; // Traverse the AST building up our text string.\n\n  while (node) {\n    switch (node.getType()) {\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT:\n        connection =\n        /** @type {!Blockly.Connection} */\n        node.getLocation();\n\n        if (!node.in()) {\n          text.push(emptyFieldPlaceholder);\n        } else if (shouldAddParentheses(connection)) {\n          text.push('(');\n        }\n\n        break;\n\n      case blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.FIELD:\n        field =\n        /** @type {Blockly.Field} */\n        node.getLocation();\n\n        if (field.name != blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.Block.COLLAPSED_FIELD_NAME) {\n          text.push(field.getText());\n        }\n\n        break;\n    }\n\n    var current = node;\n    node = current.in() || current.next(); // TODO: This only works in our specific use case of having a block with a\n    // single statement connection.\n\n    if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && node.getLocation().type === blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.NEXT_STATEMENT) {\n      node = null;\n    }\n\n    if (!node) {\n      // Can't go in or next, keep going out until we can go next.\n      node = current.out();\n      checkRoot();\n\n      while (node && !node.next()) {\n        node = node.out();\n        checkRoot(); // If we hit an input on the way up, possibly close out parentheses.\n\n        if (node && node.getType() == blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.types.INPUT && shouldAddParentheses(\n        /** @type {!Blockly.Connection} */\n        node.getLocation())) {\n          text.push(')');\n        }\n      }\n\n      if (node) {\n        node = node.next();\n      }\n    }\n  } // Restore state of NAVIGATE_ALL_FIELDS.\n\n\n  blockly_core__WEBPACK_IMPORTED_MODULE_0___default.a.ASTNode.NAVIGATE_ALL_FIELDS = prevNavigateFields; // Run through our text array and simplify expression to remove parentheses\n  // around single field blocks.\n\n  for (var i = 2, l = text.length; i < l; i++) {\n    if (text[i - 2] == '(' && text[i] == ')') {\n      text[i - 2] = text[i - 1];\n      text.splice(i - 1, 2);\n      l -= 2;\n    }\n  } // Join the text array, removing spaces around added paranthesis.\n\n\n  text = text.join(' ').replace(/(\\() | (\\))/gmi, '$1$2').trim() || '???';\n\n  if (opt_maxLength) {\n    // TODO: Improve truncation so that text from this block is given priority.\n    // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\n    // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\n    if (text.length > opt_maxLength) {\n      text = text.substring(0, opt_maxLength - 3) + '...';\n    }\n  }\n\n  return text;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcnJpZGVzLmpzPzFjYjQiXSwibmFtZXMiOlsiQmxvY2tseSIsIm5hdmlnYXRpb24iLCJoYW5kbGVFbnRlckZvcldTXyIsIndvcmtzcGFjZSIsImN1cnNvciIsImdldEN1cnNvciIsImN1ck5vZGUiLCJnZXRDdXJOb2RlIiwibm9kZVR5cGUiLCJnZXRUeXBlIiwiQVNUTm9kZSIsInR5cGVzIiwiRklFTEQiLCJnZXRMb2NhdGlvbiIsImlzQ2xpY2thYmxlIiwic3BlYWtlciIsInNwZWFrIiwic2hvd0VkaXRvciIsImlzQ29ubmVjdGlvbiIsIldPUktTUEFDRSIsIm1hcmtBdEN1cnNvcl8iLCJCTE9DSyIsIndhcm5fIiwiU1RBQ0siLCJGaWVsZERyb3Bkb3duIiwicHJvdG90eXBlIiwib25CbG9ja2x5QWN0aW9uIiwiYWN0aW9uIiwiZmllbGROZXh0T3B0aW9ucyIsIm1lbnVfIiwibmFtZSIsImFjdGlvbk5hbWVzIiwiUFJFVklPVVMiLCJoaWdobGlnaHRQcmV2aW91cyIsImhpZ2hsaWdodGVkSXRlbV8iLCJjb250ZW50XyIsImFsdCIsIk5FWFQiLCJoaWdobGlnaHROZXh0Iiwic3VwZXJDbGFzc18iLCJjYWxsIiwiQmxvY2siLCJ0b1N0cmluZyIsIm9wdF9tYXhMZW5ndGgiLCJvcHRfZW1wdHlUb2tlbiIsInRleHQiLCJlbXB0eUZpZWxkUGxhY2Vob2xkZXIiLCJwcmV2TmF2aWdhdGVGaWVsZHMiLCJOQVZJR0FURV9BTExfRklFTERTIiwibm9kZSIsImNyZWF0ZUJsb2NrTm9kZSIsInJvb3ROb2RlIiwic2hvdWxkQWRkUGFyZW50aGVzZXMiLCJjb25uZWN0aW9uIiwiY2hlY2tzIiwiZ2V0Q2hlY2siLCJ0YXJnZXRDb25uZWN0aW9uIiwiaW5kZXhPZiIsImNoZWNrUm9vdCIsImZpZWxkIiwiSU5QVVQiLCJpbiIsInB1c2giLCJDT0xMQVBTRURfRklFTERfTkFNRSIsImdldFRleHQiLCJjdXJyZW50IiwibmV4dCIsInR5cGUiLCJORVhUX1NUQVRFTUVOVCIsIm91dCIsImkiLCJsIiwibGVuZ3RoIiwic3BsaWNlIiwiam9pbiIsInJlcGxhY2UiLCJ0cmltIiwic3Vic3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViO0FBQ0E7O0FBR0FBLG1EQUFPLENBQUNDLFVBQVIsQ0FBbUJDLGlCQUFuQixHQUF1QyxVQUFTQyxTQUFULEVBQW9CO0FBQ3pELE1BQU1DLE1BQU0sR0FBR0QsU0FBUyxDQUFDRSxTQUFWLEVBQWY7QUFDQSxNQUFNQyxPQUFPLEdBQUdGLE1BQU0sQ0FBQ0csVUFBUCxFQUFoQjtBQUNBLE1BQU1DLFFBQVEsR0FBR0YsT0FBTyxDQUFDRyxPQUFSLEVBQWpCOztBQUNBLE1BQUlELFFBQVEsSUFBSVIsbURBQU8sQ0FBQ1UsT0FBUixDQUFnQkMsS0FBaEIsQ0FBc0JDLEtBQWxDLElBQ0FOLE9BQU8sQ0FBQ08sV0FBUixHQUFzQkMsV0FBdEIsRUFESixFQUN5QztBQUN2QztBQUNBQyxvREFBTyxDQUFDQyxLQUFSLENBQWMsaURBQWQ7O0FBQ0M7QUFBOEJWLFdBQU8sQ0FBQ08sV0FBUixFQUEvQixDQUF1REksVUFBdkQ7QUFDRCxHQUxELE1BS08sSUFBSVgsT0FBTyxDQUFDWSxZQUFSLE1BQ1BWLFFBQVEsSUFBSVIsbURBQU8sQ0FBQ1UsT0FBUixDQUFnQkMsS0FBaEIsQ0FBc0JRLFNBRC9CLEVBQzBDO0FBQy9DbkIsdURBQU8sQ0FBQ0MsVUFBUixDQUFtQm1CLGFBQW5CO0FBQ0QsR0FITSxNQUdBLElBQUlaLFFBQVEsSUFBSVIsbURBQU8sQ0FBQ1UsT0FBUixDQUFnQkMsS0FBaEIsQ0FBc0JVLEtBQXRDLEVBQTZDO0FBQ2xEckIsdURBQU8sQ0FBQ0MsVUFBUixDQUFtQnFCLEtBQW5CLENBQXlCLHNCQUF6QjtBQUNELEdBRk0sTUFFQSxJQUFJZCxRQUFRLElBQUlS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QixJQUFJLENBQUN5QixDQUFDLEdBQUcsQ0FBTCxDQUFsQjtBQUNBekIsVUFBSSxDQUFDNEIsTUFBTCxDQUFZSCxDQUFDLEdBQUcsQ0FBaEIsRUFBbUIsQ0FBbkI7QUFDQUMsT0FBQyxJQUFJLENBQUw7QUFDRDtBQUNGLEdBL0Z3RSxDQWlHekU7OztBQUNBMUIsTUFBSSxHQUFHQSxJQUFJLENBQUM2QixJQUFMLENBQVUsR0FBVixFQUFlQyxPQUFmLENBQXVCLGdCQUF2QixFQUF5QyxNQUF6QyxFQUFpREMsSUFBakQsTUFBMkQsS0FBbEU7O0FBQ0EsTUFBSWpDLGFBQUosRUFBbUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsUUFBSUUsSUFBSSxDQUFDMkIsTUFBTCxHQUFjN0IsYUFBbEIsRUFBaUM7QUFDL0JFLFVBQUksR0FBR0EsSUFBSSxDQUFDZ0MsU0FBTCxDQUFlLENBQWYsRUFBa0JsQyxhQUFhLEdBQUcsQ0FBbEMsSUFBdUMsS0FBOUM7QUFDRDtBQUNGOztBQUNELFNBQU9FLElBQVA7QUFDRCxDQTVHRCIsImZpbGUiOiIuL3NyYy9vdmVycmlkZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUaGUgY2xhc3MgcmVwcmVzZW50aW5nIGEgbGluZSBjdXJzb3IuXG4gKiBBIGxpbmUgY3Vyc29yIHRyYXZlcnNlcyB0aGUgYmxvY2tzIGFzIGlmIHRoZXkgd2VyZVxuICogbGluZXMgb2YgY29kZSBpbiBhIHRleHQgZWRpdG9yLlxuICogUHJldmlvdXMgYW5kIG5leHQgZ28gdXAgYW5kIGRvd24gbGluZXMuIEluIGFuZCBvdXQgZ29cbiAqIHRocm91Z2ggdGhlIGVsZW1lbnRzIGluIGEgbGluZS5cbiAqIEBhdXRob3IgYXNjaG1pZWR0QGdvb2dsZS5jb20gKEFiYnkgU2NobWllZHQpXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEJsb2NrbHkgZnJvbSAnYmxvY2tseS9jb3JlJztcbmltcG9ydCB7c3BlYWtlcn0gZnJvbSAnLi9zcGVha2VyJztcblxuXG5CbG9ja2x5Lm5hdmlnYXRpb24uaGFuZGxlRW50ZXJGb3JXU18gPSBmdW5jdGlvbih3b3Jrc3BhY2UpIHtcbiAgY29uc3QgY3Vyc29yID0gd29ya3NwYWNlLmdldEN1cnNvcigpO1xuICBjb25zdCBjdXJOb2RlID0gY3Vyc29yLmdldEN1ck5vZGUoKTtcbiAgY29uc3Qgbm9kZVR5cGUgPSBjdXJOb2RlLmdldFR5cGUoKTtcbiAgaWYgKG5vZGVUeXBlID09IEJsb2NrbHkuQVNUTm9kZS50eXBlcy5GSUVMRCAmJlxuICAgICAgY3VyTm9kZS5nZXRMb2NhdGlvbigpLmlzQ2xpY2thYmxlKCkpIHtcbiAgICAvLyBUT0RPOiBIYWQgdG8gb3ZlcnJpZGUgc28gSSBjb3VsZCBhZGQgdGhpcyBzcGVha2VyIGluLlxuICAgIHNwZWFrZXIuc3BlYWsoJ1VzZSBuZXh0IGFuZCBwcmV2aW91cyB0byByZWFkIG9mZiB5b3VyIG9wdGlvbnMuJyk7XG4gICAgKC8qKiBAdHlwZSB7IUJsb2NrbHkuRmllbGR9ICovKGN1ck5vZGUuZ2V0TG9jYXRpb24oKSkpLnNob3dFZGl0b3IoKTtcbiAgfSBlbHNlIGlmIChjdXJOb2RlLmlzQ29ubmVjdGlvbigpIHx8XG4gICAgICBub2RlVHlwZSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuV09SS1NQQUNFKSB7XG4gICAgQmxvY2tseS5uYXZpZ2F0aW9uLm1hcmtBdEN1cnNvcl8oKTtcbiAgfSBlbHNlIGlmIChub2RlVHlwZSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuQkxPQ0spIHtcbiAgICBCbG9ja2x5Lm5hdmlnYXRpb24ud2Fybl8oJ0Nhbm5vdCBtYXJrIGEgYmxvY2suJyk7XG4gIH0gZWxzZSBpZiAobm9kZVR5cGUgPT0gQmxvY2tseS5BU1ROb2RlLnR5cGVzLlNUQUNLKSB7XG4gICAgQmxvY2tseS5uYXZpZ2F0aW9uLndhcm5fKCdDYW5ub3QgbWFyayBhIHN0YWNrLicpO1xuICB9XG59O1xuXG5cbkJsb2NrbHkuRmllbGREcm9wZG93bi5wcm90b3R5cGUub25CbG9ja2x5QWN0aW9uID0gZnVuY3Rpb24oYWN0aW9uKSB7XG4gIGNvbnN0IGZpZWxkTmV4dE9wdGlvbnMgPSAnVG8gc2VsZWN0IHRoaXMgb3B0aW9uIGhpdCBlbnRlcic7XG4gIGlmICh0aGlzLm1lbnVfKSB7XG4gICAgc3dpdGNoIChhY3Rpb24ubmFtZSkge1xuICAgICAgY2FzZSBCbG9ja2x5Lm5hdmlnYXRpb24uYWN0aW9uTmFtZXMuUFJFVklPVVM6XG4gICAgICAgIHRoaXMubWVudV8uaGlnaGxpZ2h0UHJldmlvdXMoKTtcbiAgICAgICAgc3BlYWtlci5zcGVhayh0aGlzLm1lbnVfLmhpZ2hsaWdodGVkSXRlbV8uY29udGVudF8uYWx0LCB0cnVlKTtcbiAgICAgICAgc3BlYWtlci5zcGVhayhmaWVsZE5leHRPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlIEJsb2NrbHkubmF2aWdhdGlvbi5hY3Rpb25OYW1lcy5ORVhUOlxuICAgICAgICB0aGlzLm1lbnVfLmhpZ2hsaWdodE5leHQoKTtcbiAgICAgICAgLy8gVE9ETzogTmVlZGVkIHRvIG92ZXJyaWRlIHNvIHRoYXQgSSBjb3VsZCBzcGVhayBvdXQgdGhlIGxvY2F0aW9uIHdoZW5cbiAgICAgICAgLy8gaXQgY2hhbmdlcy5cbiAgICAgICAgc3BlYWtlci5zcGVhayh0aGlzLm1lbnVfLmhpZ2hsaWdodGVkSXRlbV8uY29udGVudF8uYWx0LCB0cnVlKTtcbiAgICAgICAgc3BlYWtlci5zcGVhayhmaWVsZE5leHRPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBCbG9ja2x5LkZpZWxkRHJvcGRvd24uc3VwZXJDbGFzc18ub25CbG9ja2x5QWN0aW9uLmNhbGwodGhpcywgYWN0aW9uKTtcbn07XG5cblxuQmxvY2tseS5CbG9jay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRfbWF4TGVuZ3RoLCBvcHRfZW1wdHlUb2tlbikge1xuICBsZXQgdGV4dCA9IFtdO1xuICBjb25zdCBlbXB0eUZpZWxkUGxhY2Vob2xkZXIgPSBvcHRfZW1wdHlUb2tlbiB8fCAnPyc7XG5cbiAgLy8gVGVtcG9yYXJpbHkgc2V0IGZsYWcgdG8gbmF2aWdhdGUgdG8gYWxsIGZpZWxkcy5cbiAgY29uc3QgcHJldk5hdmlnYXRlRmllbGRzID0gQmxvY2tseS5BU1ROb2RlLk5BVklHQVRFX0FMTF9GSUVMRFM7XG4gIEJsb2NrbHkuQVNUTm9kZS5OQVZJR0FURV9BTExfRklFTERTID0gdHJ1ZTtcblxuICBsZXQgbm9kZSA9IEJsb2NrbHkuQVNUTm9kZS5jcmVhdGVCbG9ja05vZGUodGhpcyk7XG4gIGNvbnN0IHJvb3ROb2RlID0gbm9kZTtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gYWRkIHBhcmVudGhlc2VzIGFyb3VuZCBhbiBpbnB1dC5cbiAgICogQHBhcmFtIHshQmxvY2tseS5Db25uZWN0aW9ufSBjb25uZWN0aW9uIFRoZSBjb25uZWN0aW9uLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHdlIHNob3VsZCBhZGQgcGFyZW50aGVzZXMgYXJvdW5kIHRoZSBpbnB1dC5cbiAgICovXG4gIGZ1bmN0aW9uIHNob3VsZEFkZFBhcmVudGhlc2VzKGNvbm5lY3Rpb24pIHtcbiAgICBsZXQgY2hlY2tzID0gY29ubmVjdGlvbi5nZXRDaGVjaygpO1xuICAgIGlmICghY2hlY2tzICYmIGNvbm5lY3Rpb24udGFyZ2V0Q29ubmVjdGlvbikge1xuICAgICAgY2hlY2tzID0gY29ubmVjdGlvbi50YXJnZXRDb25uZWN0aW9uLmdldENoZWNrKCk7XG4gICAgfVxuICAgIHJldHVybiAhIWNoZWNrcyAmJiAoY2hlY2tzLmluZGV4T2YoJ0Jvb2xlYW4nKSAhPSAtMSB8fFxuICAgICAgICBjaGVja3MuaW5kZXhPZignTnVtYmVyJykgIT0gLTEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoYXQgd2UgaGF2ZW4ndCBjaXJjbGVkIGJhY2sgdG8gdGhlIG9yaWdpbmFsIHJvb3Qgbm9kZS5cbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdCgpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLmdldFR5cGUoKSA9PSByb290Tm9kZS5nZXRUeXBlKCkgJiZcbiAgICAgICAgbm9kZS5nZXRMb2NhdGlvbigpID09IHJvb3ROb2RlLmdldExvY2F0aW9uKCkpIHtcbiAgICAgIG5vZGUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBsZXQgY29ubmVjdGlvbiA9IG51bGw7XG4gIGxldCBmaWVsZCA9IG51bGw7XG5cbiAgLy8gVHJhdmVyc2UgdGhlIEFTVCBidWlsZGluZyB1cCBvdXIgdGV4dCBzdHJpbmcuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLmdldFR5cGUoKSkge1xuICAgICAgY2FzZSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuSU5QVVQ6XG4gICAgICAgIGNvbm5lY3Rpb24gPSAvKiogQHR5cGUgeyFCbG9ja2x5LkNvbm5lY3Rpb259ICovIChub2RlLmdldExvY2F0aW9uKCkpO1xuICAgICAgICBpZiAoIW5vZGUuaW4oKSkge1xuICAgICAgICAgIHRleHQucHVzaChlbXB0eUZpZWxkUGxhY2Vob2xkZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHNob3VsZEFkZFBhcmVudGhlc2VzKGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgdGV4dC5wdXNoKCcoJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEJsb2NrbHkuQVNUTm9kZS50eXBlcy5GSUVMRDpcbiAgICAgICAgZmllbGQgPSAvKiogQHR5cGUge0Jsb2NrbHkuRmllbGR9ICovIChub2RlLmdldExvY2F0aW9uKCkpO1xuICAgICAgICBpZiAoZmllbGQubmFtZSAhPSBCbG9ja2x5LkJsb2NrLkNPTExBUFNFRF9GSUVMRF9OQU1FKSB7XG4gICAgICAgICAgdGV4dC5wdXNoKGZpZWxkLmdldFRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudCA9IG5vZGU7XG4gICAgbm9kZSA9IGN1cnJlbnQuaW4oKSB8fCBjdXJyZW50Lm5leHQoKTtcbiAgICAvLyBUT0RPOiBUaGlzIG9ubHkgd29ya3MgaW4gb3VyIHNwZWNpZmljIHVzZSBjYXNlIG9mIGhhdmluZyBhIGJsb2NrIHdpdGggYVxuICAgIC8vIHNpbmdsZSBzdGF0ZW1lbnQgY29ubmVjdGlvbi5cbiAgICBpZiAobm9kZSAmJiBub2RlLmdldFR5cGUoKSA9PSBCbG9ja2x5LkFTVE5vZGUudHlwZXMuSU5QVVQgJiZcbiAgICAgICAgbm9kZS5nZXRMb2NhdGlvbigpLnR5cGUgPT09IEJsb2NrbHkuTkVYVF9TVEFURU1FTlQpIHtcbiAgICAgIG5vZGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIC8vIENhbid0IGdvIGluIG9yIG5leHQsIGtlZXAgZ29pbmcgb3V0IHVudGlsIHdlIGNhbiBnbyBuZXh0LlxuICAgICAgbm9kZSA9IGN1cnJlbnQub3V0KCk7XG4gICAgICBjaGVja1Jvb3QoKTtcbiAgICAgIHdoaWxlIChub2RlICYmICFub2RlLm5leHQoKSkge1xuICAgICAgICBub2RlID0gbm9kZS5vdXQoKTtcbiAgICAgICAgY2hlY2tSb290KCk7XG4gICAgICAgIC8vIElmIHdlIGhpdCBhbiBpbnB1dCBvbiB0aGUgd2F5IHVwLCBwb3NzaWJseSBjbG9zZSBvdXQgcGFyZW50aGVzZXMuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZ2V0VHlwZSgpID09IEJsb2NrbHkuQVNUTm9kZS50eXBlcy5JTlBVVCAmJlxuICAgICAgICAgICAgc2hvdWxkQWRkUGFyZW50aGVzZXMoXG4gICAgICAgICAgICAgICAgLyoqIEB0eXBlIHshQmxvY2tseS5Db25uZWN0aW9ufSAqLyAobm9kZS5nZXRMb2NhdGlvbigpKSkpIHtcbiAgICAgICAgICB0ZXh0LnB1c2goJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlc3RvcmUgc3RhdGUgb2YgTkFWSUdBVEVfQUxMX0ZJRUxEUy5cbiAgQmxvY2tseS5BU1ROb2RlLk5BVklHQVRFX0FMTF9GSUVMRFMgPSBwcmV2TmF2aWdhdGVGaWVsZHM7XG5cbiAgLy8gUnVuIHRocm91Z2ggb3VyIHRleHQgYXJyYXkgYW5kIHNpbXBsaWZ5IGV4cHJlc3Npb24gdG8gcmVtb3ZlIHBhcmVudGhlc2VzXG4gIC8vIGFyb3VuZCBzaW5nbGUgZmllbGQgYmxvY2tzLlxuICBmb3IgKGxldCBpID0gMiwgbCA9IHRleHQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHRleHRbaSAtIDJdID09ICcoJyAmJiB0ZXh0W2ldID09ICcpJykge1xuICAgICAgdGV4dFtpIC0gMl0gPSB0ZXh0W2kgLSAxXTtcbiAgICAgIHRleHQuc3BsaWNlKGkgLSAxLCAyKTtcbiAgICAgIGwgLT0gMjtcbiAgICB9XG4gIH1cblxuICAvLyBKb2luIHRoZSB0ZXh0IGFycmF5LCByZW1vdmluZyBzcGFjZXMgYXJvdW5kIGFkZGVkIHBhcmFudGhlc2lzLlxuICB0ZXh0ID0gdGV4dC5qb2luKCcgJykucmVwbGFjZSgvKFxcKCkgfCAoXFwpKS9nbWksICckMSQyJykudHJpbSgpIHx8ICc/Pz8nO1xuICBpZiAob3B0X21heExlbmd0aCkge1xuICAgIC8vIFRPRE86IEltcHJvdmUgdHJ1bmNhdGlvbiBzbyB0aGF0IHRleHQgZnJvbSB0aGlzIGJsb2NrIGlzIGdpdmVuIHByaW9yaXR5LlxuICAgIC8vIEUuZy4gXCIxKzIrMys0KzUrNis3KzgrOT0wXCIgc2hvdWxkIGJlIFwiLi4uNis3KzgrOT0wXCIsIG5vdCBcIjErMiszKzQrNS4uLlwiLlxuICAgIC8vIEUuZy4gXCIxKzIrMys0KzU9Nis3KzgrOSswXCIgc2hvdWxkIGJlIFwiLi4uNCs1PTYrNy4uLlwiLlxuICAgIGlmICh0ZXh0Lmxlbmd0aCA+IG9wdF9tYXhMZW5ndGgpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBvcHRfbWF4TGVuZ3RoIC0gMykgKyAnLi4uJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRleHQ7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/overrides.js\n");

/***/ })

})